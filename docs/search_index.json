[["index.html", "Putnu sugu izplatības modelēšana biodaudzveidības aizsardzībai: materiāli reproducēšanai Par šo materiālu Kas nav šis materiāls? Kas ir šis materiāls un kā to lietot? Direktoriju koks Satura izklāsts (orientācijai)", " Putnu sugu izplatības modelēšana biodaudzveidības aizsardzībai: materiāli reproducēšanai Andris Avotiņš 2025-01-06 Par šo materiālu Šis materiāls ir izstrādāts Latvijas Vides Aizsardzības Fonda administrācijas finansētā projekta “Esošo aizsargāto teritoriju pārklājuma ģeotelpisko datu slāņa sagatavošana ES Bioloģiskās daudzveidības stratēģijas 2030 ieviešanai” (Nr. 1-08/73/2023) ietvaros. Šī materiāla mērķis ir demonstrēt un skaidrot darba gaitu un pieņemtos lēmumus, lai nodrošinātu tā atkārtojamību un reproducējamību. Projekta mērķis ir ģeotelpisko datu slāņu sagatavošana aizsargājamo teritoriju pārklājuma paplašināšanai. Materiāls ir izstrādāts R, izmantojot {bookdown}. Saturā raksturotā datu apstrāde un analīze galvenokārt ir veikta R un viens no nozīmīgiem iemesliem šī materiāla tapšanai ir informācijas par darba atkārtošanu, izmantojot pārbaudītas komandu rindas, nodošana. Kā vēlamais blakusprodukts - veicināt zinātniskās prakses un praktiskās zinātnes atvērtību un reproducējamību. Kas nav šis materiāls? Šis materiāls nav: iepazīstināšana ar R vai citu programmēšanas valodu. Gluži pretēji - lietderīgākais tas būs personām ar izpratni komandu rindu lietošanā. Tomēr informatīvs par izmantotajām pieejām tas būs jebkuram; pamācība ģeoprocesēšanā. Šajā materiāla ir apkopotas tās pieejas, kuras tā izstrādes brīdī autoru kolektīvas ir zināmas kā efektīvākās (apstrādei nepieciešamā laika, operatīvās atmiņas un cietā diska apjoma, izpildes garantiju un uzticamības ziņā), bet noteikti nav vienīgās; sugu izplatības (dzīvotņu piemērotības, sastopamības, skaita vai tml.) modelēšanas rokasgrāmata. Šis materiāls apraksta darba gaitu un pieņemtos datu analīzes lēmumus, izstrādājot produktu, kas iespējami vienkāršiem un ātriem līdzekļiem vienotā darba plūsmā ļauj iegūt informāciju sugu un biotopu aizsardzības plānošanai. Tātad, eksistē dažādas modelešēnas metodes un to parametrizācijas un vēl vairāk - pieejas, kuras gadījumu no gadījuma var būt piemērotākas sugu izplatības modelēšanai, tomēr šeit uzturēta vienota plūsma un iespējami unificēta pieeja. Tas arī nozīmē, ka šeit iegūtos rezultātus primāri ir paredzēts vērtēt kopumā, nevis individuālu vietu individuālām sugām izšķirtspējā, jo sevišķi, domājot par vietas aizņemtību, tomēr tie siendz nozīmīgu pamatu šādu un līdzīgu varbūtību risināšanai. copy/paste gatavs produkts. Lai gan komandu rindu lietošana un publiskošana ir ar tendenci būt šiem mērķiem paredzētai, situācijā, kad darbam izmantoti liela apjoma un vismaz daļēji - ierobežotas pieejamības dati, tas gluži vienkārši nav iespējams. Tomēr, nodrošinot datu pieejamību un izvietojumu atbilstoši šī projekta failu struktūrai (demonstrēta zemāk), komandu rindas būs atkārtotas un radīs tos pašus rezultātus. Kas ir šis materiāls un kā to lietot? Šis materiāls ir sagatavots, lai sniegtu reproducējamu darba gaitu, aprakstot pieņemtos lēmumus un ieviestos risinājumus putnu sugu izplatības (dzīvotņu piemērotības) modelēšanai biodaudzveidības aizsardzības plānošanai. Mazākā mērā arī rezultātu demonstrēšanai un to pieejamības nodrošināšanai. Lielākoties šis materiāls sastāv no: paskaidrojošā teksta, kas ir atpazīstams kā teksts; komandu rindām, kas pēc noklusējuma ir noslēptas, lai atvieglotu teksta lasāmību. Vietas, kurās ir koamndu rindas ir atpazīstamas pēc lapas kreisajā pusē redzama “|&gt; Code”, kā tieši zem šīs rindkopas. Uz tā uzraksta uzklikšķinot, atvērsies koda apgabals, kurā uz pelēka fona esošie teksta apgabali ir komandu rindas, piemēram,: Code objekts=funkcija(arguments1,arguments2, ceļš=&quot;./ceļš/failu/kokā/objekts.paplašinājums&quot;) # komentārs Augstāk esošajā piemērā pirmajā rindā ir izveidots objekts (“objekts”), kurš ir funkcijas (“funkcija()”) rezultāts. Funkcijai ir trīs argumenti (“arguments1”, “arguments2” un “ceļš”), kas ir atdalīti ar komantu (kā visu funkciju argumenti R). Trešais arguments ir ceļš failu kokā (tas atrodas jaunā rindā, bet ir turpinājums iepriekšējās rindas funkcijai, jo iekavas nav noslēgtas), kuram aiz vienādības zīmes (un pēdiņās) ir norādīts šis ceļš (uzmanība vēršama sākumam “./”, kurš apzīmē relatīvo ceļu - novietojums failu kokā ir relatīvs projekta atrašanās vietai). Augstāk esošā piemēra otrā rinda ir komentārs - viss aiz “#” ir komentārs. Jebkam komandu rindā pirms “#” ir jābūt izpildāmai funkcijai vai objektam. Komentārs var saturēt jebko un atrasties vienā rindā ar izpildāmu funkciju (tās beigās). Komandu rindas ir nozīmīgākā šī materiāla sastāvdaļa reproducējamībai. Tomēr personai, kas tās lieto, pašai ir jānodrošina ievades datu pieejamība un jāuztur korketi ceļi failu kokā. Komandu rindas var atrasties arī tekstā, piemēram, # komentārs kā komandu rinda tekstā. Reizēm tekstā atsaukšos uz R pakotnēm, tās likšu figūriekavās, piemēram, {pakotne}. grafikām - dažādām diagrammām, kas raksturo darba plūsmu vai datu īpašības, bet lielākoties, kartēm; saitēm uz citiem resursiem, jo sevišķi uz augstāka līmeņa produktiem un rezultātiem, kas radīti projekta ietvaros, bet arī ievades datiem, ja tie ir publiski pieejami. Rezultāti ir paredzēti izmantošanai praksē. Saprāta robežās, materiālā ir raksturotas visas izmantotās datu kopas un sniegti to metadati, kas attiecas uz reproducējamības nodrošināšanu. Tā kā ne visas datu kopas ir brīvi pieejamas, tās pašas par sevi nav publiskotas, tomēr visos gadījumos ir sniegta informācija par to ieguvi šī projekta izstrādei. Direktoriju koks Direktoriju koku vislabāk iegūt klonējot projekta github repozitoriju - tas nodrošinās gan komandu rindu failus, gan tos izvietos tam atbilstošās vietās direktoriju kokā, gan sagatavos pašu koku. Tomēr, ja ir vēlme izvērst savas darbības, sekojošais koda apgabals atkārto direktoriju koka izveidi lietotāja norādītā vietā un īsi skaidro tajā ievietojamos datus. Code # references slāņiem ---- dir.create(&quot;./Templates&quot;) # virsmape projekta direktorijā dir.create(&quot;./Templates/TemplateGrids&quot;) # vektordatiem, režģiem dir.create(&quot;./Templates/TemplateGrids/lapas&quot;) # vektordatiem (režģiem) karšu lapās dir.create(&quot;./Templates/TemplateGridPoints&quot;) # vektordatu režģu centriem dir.create(&quot;./Templates/TemplateGridPoints/lapas&quot;) # vektordatu režģu centriem karšu lapās dir.create(&quot;./Templates/TemplateRasters&quot;) # rastra (harmonizēšanas) slāņiem # ievades datu produkti (10 m) ---- dir.create(&quot;./Rastri_10m&quot;) ---- # ievades datu produkti (500 m) ---- dir.create(&quot;./Rastri_500m&quot;) # Ekoģeogrāfiskie mainīgie (ar apakšmapēm) ---- dir.create(&quot;./Rastri_100m&quot;) dir.create(&quot;./Rastri_100m/RAW&quot;) # tiešie rezultāti. Ne visi ir harmoniski dir.create(&quot;./Rastri_100m/Proj&quot;) # harmonizēti pārklājumi dir.create(&quot;./Rastri_100m/Scaled&quot;) # centrāti un mērogoti harmonizētie pārklājumi # VidesParmainas ---- # - direktorija vides pārmaiņu aprēķināšanai dir.create(&quot;./VidesParmainas&quot;) dir.create(&quot;./VidesParmainas/Parmainam&quot;) # DynamicWorld ikgadējie slāņi pēc apstrādes, kas raksturota atsevišķā nodaļā # Ievades dati ---- # - sarežģīta struktūra! Ietver gan datu izvietojumu, gan apstrādi. Haoss. dir.create(&quot;./IevadesDati&quot;) ## Ainava ---- dir.create(&quot;./IevadesDati/ainava&quot;) ## šajā direktorijā norisinās ievērojama daļa EGV sagatavošanas, tādēļ ir daudz ## skriptu un apakšdirektoriju ### Malas ---- dir.create(&quot;./IevadesDati/ainava/Malas&quot;) ### malas raksturojošo slāņu sagatavošanai ### Klases platība ---- dir.create(&quot;./IevadesDati/ainava/ClassArea&quot;) ### klases platību raksturojošo slāņu sagatavošanai ### Šenona daudzveidības indeksi ---- dir.create(&quot;./IevadesDati/ainava/Daudzveidibai&quot;) ### Šenona daudzveidības indeksu aprēķiniem ## Atkritumi ---- dir.create(&quot;./IevadesDati/atkritumi&quot;) # šeit ievieto infromāciju par atkritumu poligoniem, glabātuvēm, šķirotavām utml ## Augsnes ---- dir.create(&quot;./IevadesDati/Augsnes&quot;) dir.create(&quot;./IevadesDati/Augsnes/noIvo&quot;) # EU JRC augšņu slāņi ## CLC ---- dir.create(&quot;./IevadesDati/CLC&quot;) ## CorineLandCover 2018 informācija ## distances ---- dir.create(&quot;./IevadesDati/distances&quot;) ## Komandu rindas EGV veidošanai ## DynamicWorld ---- dir.create(&quot;./IevadesDati/DynamicWorld&quot;) ## Šeit ir veikta resursa izpēta, radot visai plašu struktūru dir.create(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam&quot;) ### Apakšmapes ---- dir.create(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_float&quot;) ### ^ šeit ievieto GEE lejupielādi dir.create(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic&quot;) ### ^ šeit ievieto DWE_float apstrādi dir.create(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_missing&quot;) ### ^ šeit aprēķina informācijas seguma robus ## klimats ---- dir.create(&quot;./IevadesDati/klimats&quot;) ## ar apakšmapēm ### RAW ---- dir.create(&quot;./IevadesDati/klimats/RAW&quot;) ### ^ šeit ievieto lejupielādi no GEE ### mozaikas ---- dir.create(&quot;./IevadesDati/klimats/mozaikas&quot;) ### ^ šeit ievieto apstrādes rezultātu ## koki ---- dir.create(&quot;./IevadesDati/koki&quot;) ## Zemes novērošanas dati par kokiem un mežiem ## ar apakšmapēm ### RAW ---- dir.create(&quot;./IevadesDati/koki/RAW&quot;) ### ^ šeit ievieto lejupielādi no GEE ## LAD ---- dir.create(&quot;./IevadesDati/LAD&quot;) ## ^ šeit novieto un apstrādā LAD datus ## LV_EEZ ---- dir.create(&quot;./IevadesDati/LV_EEZ&quot;) ## ^ šeit novieto un slāni ar Latvijas Ekskluzīvās Ekonomiskās zonas ūdeņiem ## LVM_AtvertieDati ---- dir.create(&quot;./IevadesDati/LVM_AtvertieDati&quot;) dir.create(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades&quot;) ## ^ šeit ievietos no atvērto datu portāla lejupielādētos ## valsts akciju sabiedŗibas &quot;Latvijas valsts meži&quot; datus ## MKIS ---- dir.create(&quot;./IevadesDati/MKIS&quot;) ## ^ šeit ievietos meliorācijas kadastra informācijas sistēmas datus ## MVR ---- dir.create(&quot;./IevadesDati/MVR&quot;) ## ^ šeit ievietos Valsts Meža dienesta MEža Valsts reģistra datus ## Noverojumi ---- dir.create(&quot;./IevadesDati/Noverojumi&quot;) ## ^ šeit ievietos apkopotos putnu novērojumus ## reljefs ---- dir.create(&quot;./IevadesDati/reljefs&quot;) ## ar DEM saistītās procedūras un dati. Satur apakšmapes ### meanDEM_1mOLD ---- dir.create(&quot;./IevadesDati/reljefs/meanDEM_1mOLD&quot;) ### ^ šeit ievieto ievades DEM 1m ### meanDEM_10mOLD ---- dir.create(&quot;./IevadesDati/reljefs/meanDEM_10mOLD&quot;) ### ^ šeit ir cits starprezultāts, kas gatavots LU ### Nartiss_visa_Latvija ---- dir.create(&quot;./IevadesDati/reljefs/Nartiss_visa_Latvija&quot;) ### ^ šeit ievieto aizpildīšanas 10 m DEM. Mēs izmantojām Māra Nartiša izstrādāto ### meanDEM_10m ---- dir.create(&quot;./IevadesDati/reljefs/meanDEM_10m&quot;) ### ^ šeit ievieto sagatavoto 10 m DEM bez robiem ### Reljefa ainavas līmeņa parametru sagatavošas direktorijas: dir.create(&quot;./IevadesDati/reljefs/DiS_area_r500&quot;) dir.create(&quot;./IevadesDati/reljefs/DiS_area_r1250&quot;) dir.create(&quot;./IevadesDati/reljefs/DiS_area_r3000&quot;) dir.create(&quot;./IevadesDati/reljefs/DiS_area_r10000&quot;) ## S2indices ---- dir.create(&quot;./IevadesDati/S2indices&quot;) dir.create(&quot;./IevadesDati/S2indices/RAW&quot;) ### ^ lejupielāde no GEE dir.create(&quot;./IevadesDati/S2indices/mozaikas&quot;) ### ^ apstrādes rezultāts ## topo ---- dir.create(&quot;./IevadesDati/topo&quot;) ## ^ šeit ievieto Latvijas Ģeotelpiskās Infromācijas Aaģentūras topogrāfiskās ## kartes (M:10000) datus Satura izklāsts (orientācijai) Vispārīgā darba un informācijas plūsma projektā ir ilustrēta sekojošajā attēlā 0.1. Tā ir izmantota par pamatu šī materiāla dalījumam nodaļās (nosauktas un īsi raksturotas zemāk), kuru nosaukumi vispārīgi sakrīt ar uzdevumiem (etapiem) darba plūsmas vizualizācijā. Figure 0.1: Darba plūsma un saistība starp šī dokumenta nodaļām Katrai no šī materiāla nodaļām (tātad, uzdevumiem darba plūsmā) būt vairāku līmeņu apakšnodaļas (apakšuzdevumi). Tos vislabāk apskatīt konkrētajās nodaļās, tomēr vismaz sākotnēji sekojot secībai iepriekšējā attēlā. Nodaļas ar galvenajiem izstrādātājiem: Sugu saraksts un pamata apraksti (A. Avotiņš, A. Auniņš, J. Butkeviča, A. Baumane) Ar modeļiem aptveramā (analīzes) telpa un standartizācijas faili (A. Avotiņš) Ievades ģeodati (A. Avotiņš, I. Vinogradovs, A. Auniņš) Dynamic World izpēte (A. Avotiņš, B. Rubene) Ekoģeogrāfiskie mainīgie (A. Avotiņš, A. Auniņš) Novērojumu atlase (A. Avotiņš) Sugu izplatības (dzīvotņu piemērotības) modeļi (A. Avotiņš, A. Auniņš) Modeļu pēcapstrāde (A. Avotiņš) Vietu prioritizēšana aizsardzībai (A. Avotiņš, I. Vinogradovs, A. Auniņš) Rezultāti (A. Avotiņš) "],["Chapter1.html", "1 Sugu saraksts un pamata apraksti 1.1 Analizējamo sugu izvēle 1.2 Pamata apraksti analīzei 1.3 Pamata apraksti novērojumu atlasei 1.4 Pamata apraksti starpsugu svarošanai", " 1 Sugu saraksts un pamata apraksti Šajā nodaļā sniegts analīzei izvēlēto sugu saraksta pamatojums un demonstrēta informācijas apkopošanas gaita sugu bioloģijas un ekoloģijas aprakstiem, kas tālāk izmantoti modelēšanā. Saskaņā ar projekta pieteikumu, uzdevums ir izstrādāt vismaz 70 slāņus ar dzīvotņu piemērotības analīzes rezultātiem. Sākotnēji analīzei izvēlēto sugu loks ir 116, lai samazinātu spriedzi ap ik sugas rezultāta uzticamību un pielietojamību mērķim. 1.1 Analizējamo sugu izvēle No 375 Latvijā jebkad konstatētajām putnu sugām (Celmiņš, 2024), 335 ir uzskatāmas par (šobrīd vai vismaz vienu desmitgadi kopš 1900. gada) ligzdotājām (Avotiņš et al., 2024). Tomēr tas nebūt nenozīmē, ka visām par ligzdotājām uzskatāmajām putnu sugām ir pieejami dati (un projektam - resursi) modelēšanai. Tādēļ vaikta tālāka sugu atlase. No visām ligzdojošo putnu sugām atlasītas jeb modelēšanai paredzētas: Putnu Direktīvas (Eiropas Parlamenta un Padomes Direktīva 2009/147/EK ( 2009. gada 30. novembris ) par savvaļas putnu aizsardzību) 1. pielikumā iekļautās sugas; Life for Species projektā (LU, 2024) par aizsargājamām klasificētās; Life for Species projektā (LU, 2024) par apdraudētām klasificētās; ES aizsargājamo biotopu rokasgrāmatā iekļautās sugas (Auniņš, 2013); Bioloģiski vērtīgo zālāju indikatorsugas (Lārmanis, 2013); Lauku putnu indeksā iekļautās sugas (Auniņš and Mārdega, 2020); Latvijas vai boreālā reģiona meža putnu indeksā iekļautās sugas (Auniņš and Mārdega, 2020); Sugas, kurām ir izstrādāti aizsardzības plāni, kuros iekļauta dzīvotņu piemērotības modelēšana (Avotiņš, 2019a), (Bergmanis et al., 2021); Pēc primārā saraksta, kurš raksturo vispārēju nepieciešamību (vai iespējas) modelēšanai, sagatavošanas, tas papildināts ar izslēgšanas kritērijiem: Sugas ekoloģiskā niša ir saistīta ar dzīvotnēm, kuru raksturošanai nepieciešami sevišķi specifiski ekoģeogrāfiskie mainīgie, kuru izstrādei ir sevišķi ierobežota ģeodatu pieejamība. Šeit uzsveram, ka šī projekta uzdevums nav aptvert visas putnu sugas, tas arī nav atrisināt valsts līmenī iztrūkstošu ģeoreferencētu informāciju par specifiskiem vides apstākļiem; Ar ligzdošanu (sugai specifiskiem ligzdošanas ticamības kategorijas sliekšņiem) saistītu novērojumu indikatīvā pieejamība. Šai indikācijai izmantojām Life for Species (LU, 2024) projektā veiktās datu tīrīšanas rezultātus, kas aptvēra laika periodu no 2012. līdz 2021. gadam, kurus agregējām 1 km Latvijas koordinātu sistēmas kvadrātos. Par minimālo indikatīvo novērojumu apjoma slieksmi pieņēmām 20 kvadrātus ar vismaz iespējamu ligzdošanu sugām, kuras vides datu pieejamības dēļ netika izslēgtas. Tik zems slieksnis izvēlēts, lai gadījumā, ja daļai sugu neizdotos sasniegt izmantošanas vērtu modeļa sniegumu, vēl joprojām būtu sasniegts projekta mērķis (70 slāņi). Sākotnējais modelēšanai izvēlēto sugu saraksts (ar nomenklatūru un saīsinājumu kodiem) un iekļaušanas pamatojums ir sniegts sekojošajā tabulā 1.1. Table 1.1: Sākotnējais sugu saraksts (sugas kods; nosaukums; atbilstība iekļaušanas kritērijiem un 1 km kvadrātu, kuros projekta Life for Species atlasē saglabājusies sugas klātbūtne, skaits) Kods Nosaukums Putnu Direktīvas 1. pielikums Aizsargājama suga Apdraudēta suga Biotopu rokasgrāmatas suga BVZ indikatorsuga Lauku putnu indekss Meža putnu ikdekss Aizsardzības plāns Kvadrāti COTCOT paipala Coturnix coturnix 1 1 349 PERPER laukirbe Perdix perdix 1 612 BONBON mežirbe Bonasa bonasia 1 1 1 1 1 1917 TETURO mednis Tetrao urogallus 1 1 1 1 487 LYRTET rubenis Lyrurus tetrix 1 1 1 1180 CYGCYG ziemeļu gulbis Cygnus cygnus 1 1 1 1365 ANSANS meža zoss Anser anser 1 1 222 TADTAD Sāmsalas dižpīle Tadorna tadorna 1 1 278 AYTFER brūnkaklis Aythya ferina 1 1 138 AYTFUL cekulpīle Aythya fuligula 1 1 212 SPAQUE prīkšķe Spatula querquedula 1 1 1 174 SPACLY platknābis Spatula clypeata 1 1 1 96 MARSTR pelēkā pīle Mareca strepera 1 1 1 152 MARPEN baltvēderis Mareca penelope 1 1 75 TACRUF mazais dūkuris Tachybaptus ruficollis 1 125 PODGRI pelēkvaigu dūkuris Podiceps grisegena 1 1 179 PODCRI cekuldūkuris Podiceps cristatus 1 1 1155 STRTUR parastā ūbele Streptopelia turtur 1 1 1 607 CAPEUR vakarlēpis Caprimulgus europaeus 1 1 1269 RALAQU dumbrcālis Rallus aquaticus 1 261 CRECRE grieze Crex crex 1 1 1 1 1 4270 PORPOR ormanītis Porzana porzana 1 1 1 165 ZAPPAR mazais ormanītis Zapornia parva 1 1 1 114 FULATR laucis Fulica atra 1 705 GRUGRU dzērve Grus grus 1 1 5115 CICNIG melnais stārķis Ciconia nigra 1 1 1 255 CICCIC baltais stārķis Ciconia ciconia 1 1 1 1 10648 BOTSTE lielais dumpis Botaurus stellaris 1 1 1 1 592 IXOMIN mazais dumpis Ixobrychus minutus 1 1 1 24 HAEOST jūrasžagata Haematopus ostralegus 1 1 1 1 103 PLUAPR dzeltenais tārtiņš Pluvialis apricaria 1 1 1 1 210 CHAHIA smilšu tārtiņš Charadrius hiaticula 1 1 59 CHADUB upes tārtiņš Charadrius dubius 1 1 604 VANVAN ķīvīte Vanellus vanellus 1 1 1 1 1 4284 NUMPHA lietuvainis Numenius phaeopus 1 1 1 44 NUMARQ kuitala Numenius arquata 1 1 1 1 171 LIMLIM melnā puskuitala Limosa limosa 1 1 1 1 43 GALMED ķikuts Gallinago media 1 1 1 1 43 GALGAL mērkaziņa Gallinago gallinago 1 1 2000 TRINEB lielā tilbīte Tringa nebularia 1 1 25 TRITOT pļavu tilbīte Tringa totanus 1 1 1 172 TRIGLA purva tilbīte Tringa glareola 1 1 1 1 188 GLAPAS apodziņš Glaucidium passerinum 1 1 1 1 889 AEGFUN bikšainais apogs Aegolius funereus 1 1 1 1 129 ASIOTU ausainā pūce Asio otus 1 1 1 486 STRALU meža pūce Strix aluco 1 2669 STRURA urālpūce Strix uralensis 1 1 1 582 BUBBUB ūpis Bubo bubo 1 1 1 1 33 PANHAL zivjērglis Pandion haliaetus 1 1 1 501 PERAPI ķīķis Pernis apivorus 1 1 1 850 CLAPOM mazais ērglis Clanga pomarina 1 1 1953 CIRAER niedru lija Circus aeruginosus 1 1 1 1 1950 ACCNIS zvirbuļvanags Accipiter nisus 1 792 ACCGEN vistu vanags Accipiter gentilis 1 1 1 679 HALALB jūras ērglis Haliaeetus albicilla 1 1 1 505 MILMIL sarkanā klija Milvus milvus 1 1 1 75 MILMIG melnā klija Milvus migrans 1 1 125 BUTBUT peļu klijāns Buteo buteo 1 1 5323 UPUEPO pupuķis Upupa epops 1 853 CORGAR zaļā vārna Coracias garrulus 1 1 1 66 JYNTOR tītiņš Jynx torquilla 1 1 1292 PICCAN pelēkā dzilna Picus canus 1 1 1 1 2038 DRYMAR melnā dzilna Dryocopus martius 1 1 1 1 1 4234 PICTRI trīspirkstu dzenis Picoides tridactylus 1 1 1 1 1 1 233 LEIMED vidējais dzenis Leiopicus medius 1 1 1 1 1853 DRYMIN mazais dzenis Dryobates minor 1 1 1 1 1458 DENLEU baltmugurdzenis Dendrocopos leucotos 1 1 1 1 1 1273 DENMAJ dižraibais dzenis Dendrocopos major 1 7064 FALTIN lauku piekūns Falco tinnunculus 1 1 325 FALCOL purva piekūns Falco columbarius 1 1 1 56 ORIORI vālodze Oriolus oriolus 1 3320 LANCOL brūnā čakste Lanius collurio 1 1 1 1 1 3623 LANEXC lielā čakste Lanius excubitor 1 1 492 NUCCAR riekstrozis Nucifraga caryocatactes 1 1 1 608 PERATE meža zīlīte Periparus ater 1 2475 LOPCRI cekulzīlīte Lophophanes cristatus 1 3292 POEPAL purva zīlīte Poecile palustris 1 1 1 2465 POEMON pelēkā zīlīte Poecile montanus 1 1 1 3278 LULARB sila cīrulis Lullula arborea 1 1 1 2747 ALAARV lauku cīrulis Alauda arvensis 1 7409 IDUCAL klusais ķauķis Iduna caligata 1 85 ACRRIS purva ķauķis Acrocephalus palustris 1 2842 ACRARU niedru strazds Acrocephalus arundinaceus 1 1538 LOCFLU upes ķauķis Locustella fluviatilis 1 1 1659 LOCNAE kārklu ķauķis Locustella naevia 1 1 1 1492 HIRRUS bezdelīga Hirundo rustica 1 4224 PHYSIB svirlītis Phylloscopus sibilatrix 1 1 5918 AEGCAU garastīte Aegithalos caudatus 1 1 1414 CURNIS svītrainais ķauķis Curruca nisoria 1 1 385 CURCOM brūnspārnu ķauķis Curruca communis 1 6415 CERFAM mizložņa Certhia familiaris 1 3425 SITEUR dzilnītis Sitta europaea 1 5063 STUVUL mājas strazds Sturnus vulgaris 1 6633 TURVIS sila strazds Turdus viscivorus 1 3075 TURILI plukšķis Turdus iliacus 1 1 1115 CYASVE zilrīklīte Cyanecula svecica 1 1 1 77 LUSLUS lakstīgala Luscinia luscinia 1 1 4529 FICPAR mazais mušķērājs Ficedula parva 1 1 1 1 2415 FICHYP melnais mušķērājs Ficedula hypoleuca 1 4072 SAXRUB lukstu čakstīte Saxicola rubetra 1 1 1 5301 REGREG zeltgalvītis Regulus regulus 1 4246 REGIGN sārtgalvītis Regulus ignicapilla 1 523 PASMON lauku zvirbulis Passer montanus 1 3441 ANTPRA pļavu čipste Anthus pratensis 1 1 2143 ANTCAM stepes čipste Anthus campestris 1 1 1 1 1 162 MOTFLA dzeltenā cielava Motacilla flava 1 1 1 1 1393 MOTCIT citroncielava Motacilla citreola 1 1 100 COCCOC dižknābis Coccothraustes coccothraustes 1 2010 CARERY mazais svilpis Carpodacus erythrinus 1 1 1 3949 PYRPYR svilpis Pyrrhula pyrrhula 1 3323 CHLCHL zaļžubīte Chloris chloris 1 4350 LINCAN kaņepītis Linaria cannabina 1 2007 LOXCUR egļu krustknābis Loxia curvirostra 1 640 CARCAR dadzītis Carduelis carduelis 1 4212 EMBHOR dārza stērste Emberiza hortulana 1 1 1 117 EMBCIT dzeltenā stērste Emberiza citrinella 1 9517 1.2 Pamata apraksti analīzei Analīzes plānošanai - potenciālo vidi raksturojošo ekoģeogrāfisko mainīgo (EGV) sagatavošanai, to sugām specifisko telpisko mērogu identificēšanai un sugu saistīšanai ar vispārīgām ekosistēmas grupām gan EGV sākotnējai izvēlei, gan kompleksas biodaudzveidības aizsardzības telpiskajai plānošanai - sugas iedalītas principiālās tām raksturīgajās ekosistēmās un, balstoties literatūras analīzē, piešķirtas tām raksturīgās izmantotās ainavas telpas. Kā principiālās ekosistēmas izvēlētas plašas grupas: meži, lauksaimniecības ainava (lauki), mitrāji un ūdeņi, tomēr daļai sugu raksturīga kāda šaura specifiskāka vide, tādēļ tām izdalīta atsevišķa kategorija - “cita”. Mozaīkveida ainavu apdzīvojošām sugām un sugām ar kompleksu ekoloģisko nišu, piemēram, atšķirīgu ligzdošanas un barošanās ekosistēmu, vienlaikus piešķirtas vairākas grupas. Ekosistēmu grupu piešķiršanai izmantota vispārīgā literatūra un projekta ornitologu (A. Avotiņa un A. Auniņa) ekspertīze. Par raksturīgo izmantoto ainavas telpu visbiežāk uzskatāma ligzdošanas iecirkņa platība. Tomēr, atkarībā no sugas ligzdošanas ekoloģijas, var būt telpiski apjomīga atšķirība starp ligzdas aizsardzības zonu un barošanās iecirkni. Turklāt katras šīs teritorijas platība mainās līdz ar vides apstākļiem (dzīvotņu piemērotību). Visuzticamākā informācija būtu, izmantojot Latvijā veiktus telemetrijas pētījumus, tomēr sugu loks, kurām šādi dati ir pieejami ir ārkārtīgi ierobežots un tas ir gandrīz neeksistējošs publicētu datu veidā. Tādēļ pieņemts lēmums veikt literatūras analīzi (resursu ierobežotības un mērķa vispārības jeb zemās nepieciešamības pret augstu precizitāti dēļ, ne sistemātiska pārskata ik sugai veidā), kas ierobežota nosacījumiem (prioritārā secībā): meklēt informāciju par ligzdošanas iecirkņa (home range) platību vismaz pieciem Eiropā (Latvijai iespējami līdzīgākos apstākļos) veiktiem telemetrijas pētījumiem; paplašināt meklējumus ārpus Eiropas veiktiem telemetrijas pētījumiem, tos kombinējot ar no sastopamības blīvuma izrietošiem teritorijas lieluma aprēķiniem; apkopot Latvijai telpiski tuvāko un ekoloģiski līdzīgāko vidējo ligzdošans blīvumu rādītājus, kas pārrēķināti vidējai ligzdošanas iecirkņa platībai. Šī uzdevuma mērķis bija vispārīga sugu grupēšana izmantotās ainavas telpās un sagatavojamo EGV apjoma ierobežana, iegūtais rezultāts nepretendē uz sistemātiskā pārskata statusu. Kopējais aptverto informācijas avotu skaits ir 232 (vidēji sugai informācija no 5.86 (IQR: 4 - 7) avotiem, vidēji sugai ir 16.97 (IQR: 9 - 22) ieraksti), tomēr izmantojot apkopojošos darbus (piemēram, monogrāfijas un pārskata rakstus) nav mēģināts referencēt ik oriģinālo darbu - atsauce sniegta uz izmantoto pārskatu. Darba gaitas vienkāršošanai, situācijās, kad sniegta informācija gan par centrālo tendenci, gan variabilitāti, izmantots tikai centrālās tendences mērs. Situācijās, kurās pieejama informācija tikai par robežlielumiem (piemēram, minimālais un maksimālais), aprēķināts ģeometriskais vidējais. Visi ligzdošanas iecirkņu raksturojumi izteikti hektāros un ik ierakstam aprēķināts rādiuss metros, pieņemot, ka ligzdošanas iecirknis ir aplis. Lai gan šis pieņēmums ir nenoliedzami aplams gandrīz jebkurā situācijā, iegūtais rezultāts ļauj vispārīgi plānot analīzes gaitu un grupēt sugas ligzdošanas iecirkņu grupās, tādā veidā limitējot sagatavojamo EGV skaitu. Sugām raksturīgo ekosistēmu dalījums un izdalītās ligzdošanas iecirkņu grupas ir redzamas sekojošajā attēlā 1.1. Visas sugas iedalītas kādā no trīs ligzdošanas iecirkņa rādiusa grupām pēc vērtības mediānā un trešajā kvartilē: līdz/ap 500 m, līdz/ap 1250 m, līdz/ap 3000 m. Katrai ligzdošanas iecirkņa platībai piešķirts plašāks ainavas telpas mērogs (EGV sagatavošanai un modelēšanai), tie attiecīgi ir: 1250 m, 3000 m, 10 000 m. Atsevišķos gadījumos - komunāli riestojošajām sugām - ligzdošanas iecirkņa rādiuss palielināts par vienu soli (un atbilstoši arī ainavas telpa) sugas vairošanās bioloģijas - nepieciešamības spēt uzturēt vairākus iecirkņus, kuru indivīdiem satikties uz riestu - dēļ. Līdzīgi arī sugām ar izteikti plašiem medību iecirkņiem, mērogi pieņemti par vienas grupas soli uz augšu. Gadījumos, kad telemetrijas rezultāti ierosināja atšķirīgu ligzdošanas iecirkņa rādiusa grupu nekā vidējā blīvuma pārrēķins, lēmums pieņemts, balstoties telemetrijas pētījumos. Figure 1.1: Sugu dalījums ekosistēmās un ainavas platībās (sugu kodi ar zvaigznīti, raksturo telemetrijas pētījumu rezultātus; telemetrijas pētījumu un citiem rezultātiem ir atšķirīgi simboli; sugu kodi kā 2.1. tabulā) 1.3 Pamata apraksti novērojumu atlasei Vispārīgi, tomēr strukturēti, apraksti sagatavoti arī modelēšanā izmantojamo novērojumu atlasei. Šie apraksti ietver divas daļas: sugai nepiemērotā vide (Corine Land Cover klase, CLC) un ligzdošanas sezonas robežas. Novērojumu atlases procedūra detalizēti izklāstīta nodaļā Novērojumu atlase, sugām specifiskie kritēriji sniegti šajā tabulā, zemāk raksturota to izstrādes gaita. 1.3.1 Nepiemērota vide Tā kā ievērojama daļa modelēšanai potenciāli izmantojamo novērojumu ir sabiedrības zinātnes ceļā iegūti, tiem ir sagaidāmas ievērojamas novietojuma telpā neprecizitātes. No tām nav pasargātas arī profesionāļu ievāktās ziņas, piemēram, mērierīcas kļūdas dēļ. Ņemot vērā datu apjomu (skatīt, piemēram, https://dabasdati.lv/lv/article/dabasdatilv-zinojumu-apkopojums-2024-gada-aprilis-junijs/2024/), nav iespējams apskatīt un izvērtēt novērojuma lokācijas kļūdu katram vienam novērojumam. Tomēr pat idealizējot situācijām, kad tas būtu iespējams, ir nepieciešami skaidri kritēriji nosacījumiem, kad lokācija nav uzskatāma par drošu. Tā kā vide ir heterogēna, loģiski ir novērojumus pārbaudīt attiecībā pret zemes seguma vai zemes lietojuma (LULC) veidiem. Tomēr, lai cik intuitīvi pareizi tas nešķistu, nav jēgas tos vērtēt attiecībā pret piemērotajām LULC klasēm, jo piemērotība ir gradients un bez papildu analīzēm, kuru veikšana ir šī projekta uzdevums, nav iespējams pietiekoši uzticami nodalīt dažādas šī piemērotības gradienta daļas. Tomēr gandrīz jebkurai sugai ir iespējams definēt vidi (LULC klasi), kas nekādā gadījumā nav tieši saistāma ar ligzdošanu, jo sevišķi, ja telpiski šī klase ir tik plaša, lai daudzkārt pārsniegtu vispārīgo labas veiktspējas mērierīces precizitāti (zem 10 m labos apstākļos). Šādu iespēju nodrošina, piemēram, Corine Land Cover dati, kuru minimālā kartēšanas izšķirtspēja ir plankums ar laukumu vismaz 25 ha un ne šaurāks par 100 m (https://land.copernicus.eu/en/products/corine-land-cover). Lai gan šobrīd aktuālākā CLC versija raksturo 2018. gadu, bet modelēšanā aptvertais laika periods ir līdz 2023. gadam (ieskaitot), tomēr tā nav uzskatāma par problēmu, jo plašas (no 25 ha) pārmaiņas starp diametrāli atšķirīgām klasēm (no piemērotas vai suboptimās uz noteikti nepierētoru) nav sagaidāmas par biežām, bet vēl vairāk - datu atlasē vides pārmaiņas tik iekļautas kā atsevišķs solis. Tā kā šajā uzdevumā svarīgas ir plašas LULC kategorijas, izmantots CLC pirmā līmeņa dalījums (pirmais cipars no trīsciparu LULC klases koda). Tātad, novērojumi attiecināti pret CLC kategorijām: mākslīgās virsmas (CLC 1; pazīme “Maksligie”), izņemot pilsētu zaļās zonas, kas pievienotas kokiem klātām platībām (CLC 141 -&gt; CLC 3); lauksaimniecības zemes, dabiskie zālāji, virsāji, kāpas un smiltāji (CLC 2, CLC 321, CLC 322, CLC 331; pazīme “Atvertie”); meži un pus-dabiskās platības, kurām pievienotas pilsētu zaļās zonas un izslēgtas klases dabiskie zālāji, virsāji un kāpas un smiltāji (CLC 3 un CLC 141, bet CLC 321 -&gt; CLC 2, CLC 322 -&gt; CLC 2, CLC 331 -&gt; CLC 2; pazīme “Koki”); mitrāji (CLC 4; pazīme “Mitraji”); ūdeņi (CLC 5; pazīme “Udeni”). Vidē, kurā ar ligzdošanu saistīta sugas sastopamība ir sevišķi nesagaidāma, atbilstošajā pazīmē ir ievietota vērtība “-1”. Šo vērtību piešķiršanas gaitā domāts arī par plankumu izmēriem - ja sugai ir neliels ligzdošanas iecirknis (Fig. 1.1), kura platība var būt mazāka par CLC kartēšanas vienību, var nebūt atzīmju nevienā pazīmē. Līdzīgi, atzīmes va rnebūt situācijās, kad sugai ir raksturīgi dažādi robežbiotopi, piemēram, suga neligzdo ūdeņos, bet apdzīvo to visdažādākās to malas - CLC kartēšanas robežkļūdas dēļ, nav pamata veikt atzīmi nevienā no pazīmēm. 1.3.2 Ligzdošanas sezona Ligzdošanas sezonas raksturošanai izmantota detalizētākā pieejamā informācija no Eiropas (Cramp et al., 1994d), (Cramp et al., 1982), (Cramp et al., 1990), (Cramp et al., 1994a), (Cramp et al., 1988), (Cramp et al., 1992), (Cramp et al., 1993), (Cramp et al., 1994b), (Cramp et al., 1994c). Lai gan šī informācija ir uzskatāma par vismaz pusgadsmitu senu un gandrīz nekad ne Latvijā iegūtu, tā tomēr spēj raksturot laiku, kad sugām principā ir sagaidāmi ar ligzdošanu saistāmi novērojumi. Ievērojama daļa aprakstu nāko no Eiropas reģioniem ar okeāniskāku klimatu vai vairāk uz dienvidiem, kas saistībā ar klimata pārmaiņām vairāk asociējas ar situāciju Latvijā šobrīd (salīdznot ar laiku pirms vairāk nekā pusgadsimta), tomēr plaši izplatītām sugām ar lielu informācijas apjomu, šie dati var būt iegūti arī Ziemeļāfrikā kā aiz Ziemeļu polārā loka. Tādēļ priekšroka dota (sekojošajā secībā) datiem no Centrāleiropas (1); platlapju un jauktu koku mežu reģiona (2); boreālās zonas (3); vai kopumā sugu raksturojošie neatkarīgi no reģiona. Ligzdošanas sezonas sākums noteikts pēc agrākā minētā olu dēšanas sākuma, ligzdošanas sezonas beigas rēķinātas, ņemot vērā tekstā norādīto ligzdošanas laiku (vēlāko ligzdošans uzsākšanu), olu inkubācijas ilgumu, laiku starp izdētām olām, inkubācijas uzsākšanu attiecībā pret dējuma pilnību, perēšanas ilgumu, mazuļu ligzdā pavadīto laiku, laiku līdz lidspējai, atkārtotos dējumus u. tml. 1.4 Pamata apraksti starpsugu svarošanai Veicot vietu prioritizēšanu sugu aizsardzībai (nodaļa Vietu prioritizēšana aizsardzībai) ik sugai individuāli, a priori nav nepieciešama nekāda informācija papildus dzīvotņu piemērotības slāņiem. Tomēr, plānojot dabas vai biodaudaudzveidības aizsardzību plašākā kontekstā, ņemot vērā dažādos telpas ierobežojumus un telpiskās pārklāšanās un atšķirības starp sugu dzīvotnēm kā arī faktu, ka dāžādām sugām ir atšķirīga nozīme dabas aizsardzībā, ir nepieciešams veidot kompleksāku pieeju. Pieejas pamatā ir atšķirīgu nozīmes svaru piešķiršana ik sugai projicētajiem dzīvotņu piemērotības slāņiem. Šos svaru var iegūt dažādi, tomēr labāk to darīt ir izmantojot iespējami salīdzināmas kvantitātes, kurās apkopota gan sugas bioloģija un ekoloģija, gan dažādi politiskie vai juridiskie un sociālie apsvērumi. Sociālos apsvērumus ir labi risināt, piemēram, ar ekosistēmu pakalpojumu pieeju, ko visērtāk iestrādāt vietu hierarhiskā prioritizācijā kā atsevišķu latento faktoru, vai pielietot prioritizācijas rezultātu komunikācijā. Šajā materiālā tie tiešā viedā nav iestrādāti. Ar politiskajiem un juridiskajiem apsvērumiem var saprast, piemēram, likumdošanu - ar sugām var būt saistīti dažādi apsaimniekošanas ierobežojumi vai būt regulēta pati apsaimniekošana. Tomēr nereti šie dokumenti ir novecojuši, salīdzinot ar populāciju ekoloģijas atziņām, piemēram, relatīvi neilgā laikā (pat mazāk kā desmitgadē), sugu populācijas no stabilām vai pieaugošām var kļūst par sarūkošām un pat līdz tādam līmenim, ka kļūst apdraudētas, bet normatīvie akti tam nespēj izsekot. Neiedziļinoties jautājumu par nepieciešamību ik gadu pārskatīt nacionālos un starptautiskos tiesību aktus, šo aspektu tiešā veidā (citādi kā sugu loka izvēlē) sugu svarošanā neiekļāvām. Tā vietā izmantojām kvantitatīvu sugu bioloģijas un ekoloģijas informāciju, kas varētu būt pamatā juridiskajiem statusiem un to atšķirībām. Ir skaidrs, ka mažakas populācijas ir vairāk apdraudētas un tām var būt nepieciešama stingrāka aizsardzība. Tāpat arī ir skaidrs, ka par sugām, kuru populācijas ir proporcionāli vairāk koncentrētas Lativjā, ir augstāka nacionālā atbildība. Kā arī, stingrāka aizsardzība ir nepieciešama saŗukošām populāicjām un sugām ar retāku vairošanos un zemāku mūža reproduktīvo sasniegumu. Šī ir sugu pamata bioloģijas un ekoloģijas informācija, kas ir iegūstama ar literatūras analīzes palīdzību (skaidrota sekojošajās apakšnodaļās) un izmantojama kā dāla no nepieciešamajiem datiem starpsugu svarošanai vietu prioritizēšanai. Sagatavotie apraksti ir apskatāmi šajā tabulā, zemāk skaidrota to izstrādes gaita un izmantotie informācijas avoti. 1.4.1 Populācijas lielums un pārmaiņas Dati par putnu sugu populāciju lielumiem un to pārmaiņām Eiropas Savienībā un tās dalībvalstīs ir pieejami un regulāri atjaunoti Putnu Direktīvas (Eiropas Parlamenta un Padomes Direktīva 2009/147/EK ( 2009. gada 30. novembris ) par savvaļas putnu aizsardzību) 12. panta ziņojumu ietvaros. Šajā pārskatā izmantoti 2012.-2018. gada pārskata perioda rezultāti (sugu kopsavilkumi par katru dalībvalsti: https://nature-art12.eionet.europa.eu/article12/report?period=3&amp;country= ; sugu kopsavilkumi Eiropā kopumā: https://nature-art12.eionet.europa.eu/article12/summary?period=3&amp;subject=&amp;reported_name=). Apkopojumā ir sekojoši svarošanai izmantojamie lauki: Populacija_LV, kurā raksturots sugas Latvijas populācijas lielums. Sugām, kurām ziņoti intervāli, aprēķināts ģeometriskais vidējais, pārējos gadījumos, izmantots ziņojumā sniegtais putnka vērtējums; Populacija_Eiropa, kurā raksturots sugas Eiropas populāicjas lielums. Tas aprēķināts kā ģeometriskais vidējais no minimālā un maksimālā rādītāja; PopProp_LV, kurā raksturtos Latvijā ligzdojošās populācijas īpatsvars (Populacija_LV) no Eiropas populāicjas (Populacija_Eiropa); Parmainas_proc, kurā norādīts populācijas pārmaiņu apjoms (izteikts procentos). Kad iespējams, izmantots īstermiņa pārmaiņu punkta vērtējums Latvijā; kad tas nebija pieejams, tas aprēķināts no intervāla robežām. Ja nebija pieejams īstermiņa pārmaiņu vērtējums, izmantots iltermiņa vērtētjums ar to pašu pieeju. Vienai sugai (kuitalai) nebija pieejami Latvijas populācijas pārmaiņu vērtējumi, tādēļ izmantots Igaunijas ziņotais; Parmainu_periods, kurā raksturots izmantotā populācijas pārmaiņu apjoma (Parmainas_proc) aprēķinu periods; Parmainu_gadi, kurā raksturots pārmaiņu ilgums, kas nepieciešams multiplikatīvā pārmaiņu rādītāja aprēķināšanai; Valsts, kurā raksturota valsts, kuras dati populācijas pārmaiņu raksturošanai; Parmainas_mult, kurā ievietots aprēķinātais eksponenciālo populāicja spārmaiņu raksturojums. Aprēķiniem izmantota formula \\((\\frac{100+\\Delta}{100})^\\frac{1}{T},\\) kur \\(\\Delta\\) ir populācijas pārmaiņu apjoms un \\(T\\) ir pārmaiņu ilgums gados. 1.4.2 Mūža reproduktīvais ieguldījums Pilnvērtīgam mūža reproduktīvā ieguldījuma aprēķinam būtu nepieciešama vismaz informācija par individiem raksturīgo reproduktīvā mūža ilgumu, izdēto olu skaitu, izšķīlušos un izvesto mazuļu skaitu, varbūtību tiem sasniegt ligzdošanas uzsākšanas vecumu un varbūtību ligzdot ik gadu turpmāk. Diemžēl visa šī informācija nav pieejama par katru no sugām, tādēļ izvēlēta apkopojoša pieeja, kur izmantojot vispārīgo informāicju un monitoringu rezultātus, apkopots minimālais informācijas apjoms ik ligzdošanas iecirkņa (kuru aizsardzības plānošanai šis tiek darīts) atšķirību starp sugām indikāciju raksturošanai. Zemāk skaidrota apkopotā informācija (datu tabulas lauki): Paaudzes_garums, kurā norādīts sugai raksturīgais dzīves ilgums (dzīves gados). Informāicja iegūta no BirdLife International European Red List of Birds (http://datazone.birdlife.org/info/euroredlist2021) [skatīts: 2023-10-08]; Pirmas_ligzdosanas_vecums, kurā raksturots pirmās ligzdošanass vecums (kalendārais gads). Informācija apkopota no (Cramp et al., 1994d), (Cramp et al., 1982), (Cramp et al., 1990), (Cramp et al., 1994a), (Cramp et al., 1988), (Cramp et al., 1992), (Cramp et al., 1993), (Cramp et al., 1994b), (Cramp et al., 1994c). Atsevišķos gadījumos šī informācija izmantotajos avotos nebija pieejama, tad tā pielīdzināta no ekoloģiski un pēc dzīves ilguma līdzīgajām sugām, kas skaidrots saistītajā laukā Vecuma_piezimes; Vecuma_piezimes, kurā skaidroti apsvērumi pieņemtajam lirmās ligzdošanas vecumam, kad tas nav norādīts izmantotajos literatūras avotos. Saistīts ar lauku Pirmas_ligzdosanas_vecums; Olu_skaits, kurā norādīts raksturīgais vidējais izdēto olu skaits. Visbiežāk informācija apkopota no (Cramp et al., 1994d), (Cramp et al., 1982), (Cramp et al., 1990), (Cramp et al., 1994a), (Cramp et al., 1988), (Cramp et al., 1992), (Cramp et al., 1993), (Cramp et al., 1994b), (Cramp et al., 1994c). Atsevišķos gadījumos izmantoti citi avoti, kas individuāli norādīti sekojošajā laukā (Avots), šie avoti ir: (Avotins et al., 2023), (Meller et al., 2017), (Lipsbergs, 2011). Avots, kurā norādīts olu skaita informācijas avots, saistībā ar lauka Olu_skaits skaidrojumu; Dejumu_skaits, kurā norādīts sugai raksturīgais dējumu skaits (sekojot prioritātēm, kas aprakstītas nodaļā Ligzdošanas sezona), neieskaitot aizvietojošos dējumus. References Auniņš, A. (red.), 2013. Eiropas savienības aizsargājamie biotopi latvijā. Noteikšanas rokasgrāmata. 2. Precizēts izdevums. Latvijas Dabas fonds, Vides aizsardzības un reģionālās attīstības ministrija, Rīga, Latvija. Auniņš, A., Mārdega, I., 2020. Dienas putnu fona monitorings. Gala atskaite par 2020. gadu. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Avotins, A., Avotins, A., Ķerus, V., Auniņš, A., 2023. Numerical response of owls to the dampening of small mammal population cycles in Latvia, Life. https://doi.org/10.3390/life13020572 Avotiņš, A., 2019a. Apodziņa Glaucidium passerinum, bikšainā apoga Aegolius funereus, meža pūces Strix aluco, urālpūces Strix uralensis, ausainās pūces Asio otus un ūpja Bubo bubo aizsardzības plāns. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Avotiņš, A., Auniņš, A., Stīpniece, A., Ķerus, V., 2024. Little and a lot of data, both with their own challenges: Approaches used for the red listing of birds in latvia, in: Butkauskas, D., Čekstere-Muižniece, G., Degtjarenko, P., Jankevica, L., Jansson, N., Ķerus, V., Pilāts, V., Telnov, D. (Eds.), Safeguarding Biodiversity: Red Lists and Beyond. Institute of Biology, Faculty of Medicine; Life Sciences, University of Latvia, p. 14. Bergmanis, M., Priednieks, J., Avotiņš, A., Priedniece, I., 2021. Mazā dzeņa Dryobates minor, vidējā dzeņa Leiopicus medius, baltmugurdzeņa Dendrocopos leucotos, dižraibā dzeņa Dendrocopos major, trīspirkstu dzeņa Picoides tridactylus, melnās dzilnas Dryocopus martius un pelēkās dzilnas Picus canus aizsardzības plāns. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Celmiņš, A., 2024. Putni.lv. Cramp, S., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hollom, P.A.D., Nicholson, E.M., Ogilvie, M.A., Roselaar, C.S., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1992. Handbook of the birds of Europe, the Middle East and North Africa: Volume 6 - Warblers. Oxford University Press, Hong Kong. Cramp, S., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hollom, P.A.D., Nicholson, E.M., Ogilvie, M.A., Roselaar, C.S., Sellar, P.J., Simmons, K.E.L., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1988. Handbook of the birds of Europe, the Middle East and North Africa: Volume 5 - Tyrant Flycatchers to Thrushes. Oxford University Press, Hong Kong. Cramp, S., Brooks, D.J., Dunn, E., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Roselaar, C.S., Simmons, K.E.L., Voous, K.H., Wallace, D.I.M., Wattel, J., Wilson, M.G., 1994a. Handbook of the birds of Europe, the Middle East and North Africa: Volume 4 - Terns to Woodpeckers. Oxford University Press, Hong Kong. Cramp, S., Perrins, C.M., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hillcoat, B., Hollom, P.A.D., Nicholson, E.M., Roselaar, C.S., Seale, W.T.C., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1994b. Handbook of the birds of Europe, the Middle East and North Africa: Volume 8 - Crows to Finches. Oxford University Press, Hong Kong. Cramp, S., Perrins, C.M., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hillcoat, B., Hollom, P.A.D., Nicholson, E.M., Roselaar, C.S., Seale, W.T.C., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1994c. Handbook of the birds of Europe, the Middle East and North Africa: Volume 9 - Buntings to New World Warblers. Oxford University Press, Hong Kong. Cramp, S., Perrins, C.M., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hillcoat, B., Hollom, P.A.D., Nicholson, E.M., Roselaar, C.S., Seale, W.T.C., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1993. Handbook of the birds of Europe, the Middle East and North Africa: Volume 7 - Flycatchers to Shrikes. Oxford University Press, Hong Kong. Cramp, S., Simmons, K.E.L., Brooks, D.J., Collar, N.J., Dunn, E., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Roselaar, C.S., Voous, K.H., Wallace, D.I.M., Wattel, J., Wilson, M.G., 1990. Handbook of the birds of Europe, the Middle East and North Africa: Volume 3 - Waders to Gulls. Oxford University Press, Hong Kong. Cramp, S., Simmons, K.E.L., Ferguson-Lees, I.J., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Voous, K.H., Wattel, J., 1994d. Handbook of the birds of Europe, the Middle East and North Africa: Volume 1 - Ostrich to Ducks. Oxford University Press, New York, United States. Cramp, S., Simmons, K.E.L., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Roselaar, P.S., Voous, K.H., Wallace, D.I.M., Wattel, J., 1982. Handbook of the birds of Europe, the Middle East and North Africa: Volume 2 - Hawks to Bustards. Oxford University Press, Hong Kong. Lārmanis, V. (red.), 2013. Bioloģiski vērtīgo zālāju kartēšanas metodika. Dabas aizsardzības pārvalde, Sigulda, Latvija. Lipsbergs, J., 2011. Kas notiek ar ūpi Latvijā, Putni Dabā. LU, 2024. Threatened species in latvia: Improved knowledge, capacity, data and awareness (LIFE FOR SPECIES, LIFE19 GIE/LV/000857). Meller, K., Björklund, H., Saurola, P., Valkama, J., 2017. Petolintuvuosi 2016, pesimistulokset ja kannankehitykset, Linnut-vuosikirja 2016. "],["Chapter2.html", "2 Ar modeļiem aptveramā (analīzes) telpa un standartizācijas faili 2.1 Vektordatu režģi 2.2 References rastri", " 2 Ar modeļiem aptveramā (analīzes) telpa un standartizācijas faili Lai definētu analīzes telpu, nodrošinātu slāņu savstarpēju atbilstību un atvieglotu savienošanu ar citiem Latvijas ģeodatiem, izmantoti atvērto datu portālā esošie ģeoreferencētie slāņi: Latvijas teritoriju (iekšzemes un jūras) aptverošs režģis ar šūnas malas garumu 100 m (https://data.gov.lv/dati/lv/dataset/rezgis) [skatīts: 2024-01-20]; Latvijas teritoriju (iekšzemes un jūras) aptverošs režģis ar šūnas malas garumu 1000 m (https://data.gov.lv/dati/lv/dataset/rezgis) [skatīts: 2024-01-20]; Latvijas administratīvās teritorijas pēc 2021. gada reformas (atbilstoši Administratīvo teritoriju un apdzīvoto vietu likuma redakcijai, kas stājās spēkā 2021. gada 3. jūnijā) (https://data.gov.lv/dati/lv/dataset/atr) [skatīts: 2024-01-20]. Šie slāņi savā starpā savienoti un tālāk apstrādāti ērtākai lietošanai. 2.1 Vektordatu režģi Tā kā lejupielādētie vektordatu režģis ietver arī Latvijas Ekskluzīvās Ekonomiskās Zonas ūdeņus, no tiem atlasīti tikai tie kvadrāti, kas pārklājas ar administratīvajām teritorijām. Rezultējošie objekti saglabāti {sf} tieši atbalstītā geoparquet formātā turpmāko darbu paātrināšanai un geopackage formātā plašākam lietojumam un pārbaudītai stabilitātei. Lai samazinātu faila apjomu un to izmantotu Zemes novērošanas sistēmas datu filtrēšanai, sagatavots ESRI shapefile slānis, kurā visi sauszemes 100 m kvadrāti apvienoti vienā ģeometrijā. Līdzīga atlase veikta 1km režģim - tikai tie, kas saskarās ar Latvijas administratīvajām robežām. Dažādu ainavas metriku aprēķināšanai, sagatavoti arī 300 m un 500 m režģi. To nepieciešamības pamatojums sniegts Procesēšanas atvieglošana. Katram no iepriekš minētajiem režģiem aprēķinātas centroīdas, no kurām sagatavoti slāņi ar ģeometrijām “punkts”. Šie punkti saistīti ar Envirotech izplatīto 1993. gada topogrāfisko karšu sistēmas M:50000 rāmi (tks93_50km). Ik punktam atbilstošais tks93_50km lapas numurs pievienots tā tīklam un katra tīkla identifikatori pievienoti 100 m tīklam. Code # Pakotnes if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} # Administratīvās teritorijas adm_ter=read_sf(&quot;./Administrativas_teritorijas_2021.shp&quot;) # režģis 100 m tikls100=read_sf(&quot;./grid_lv_100.gpkg&quot;,layer=&quot;grid_lv_100&quot;) tikls100$yes=1 tikls100=st_transform(tikls100,crs=3059) tikls100_sauszeme=tikls100[adm_ter,,] st_write_parquet(tikls100_sauszeme,&quot;./Templates/TemplateGrids/tikls100_sauzeme.parquet&quot;) # 100 m režģa apvienošana tikls100_apvienots=tikls100_sauszeme %&gt;% group_by(yes) %&gt;% summarise() st_write(tikls100_apvienots,&quot;./Templates/TemplateGrids/tikls100_apvienots.shp&quot;) # 100 m režģa centri centri100=st_centroid(tikls100_sauszeme) st_write_parquet(centri100,&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) # 100 m režģa centri tks93_50km tks50km=st_read_parquet(&quot;./Templates/TemplateGrids/tks93_50km.parquet&quot;) savienots=st_join(centri100,tks50km) savienots=savienots %&gt;% mutate(tks50km=NUMURS) %&gt;% dplyr::select(id,yes,tks50km) st_write_parquet(savienots,&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) # 1000 m tikls1000=read_sf(&quot;./grid_lv_1k/Grid_LV_1k.shp&quot;) tikls1000$yes=1 tikls1000_sauszeme=tikls1000[adm_ter,,] sfarrow::st_write_parquet(tikls1000_sauszeme,&quot;./Templates/TemplateGrids/tikls1k_sauzeme.parquet&quot;) # 1000 m identifikatoru pievienošana 100 m režģim tikls1000_sauszeme$ID1km=tikls1000_sauszeme$ID punkti=st_read_parquet(&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) savienots=st_join(punkti,tikls1000_sauszeme[,&quot;ID1km&quot;]) st_write_parquet(savienots,&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) pievienosanai=data.frame(savienots) %&gt;% dplyr::select(id,ID1km) tikls100=tikls100 %&gt;% left_join(pievienosanai,by=&quot;id&quot;) st_write_parquet(tikls100,&quot;./Templates/TemplateGrids/tikls100_sauzeme.parquet&quot;) # 1000 m saistīšana ar tks93_50km tks50km=st_read_parquet(&quot;./Templates/TemplateGrids/tks93_50km.parquet&quot;) centri1000=st_centroid(tikls1000_sauszeme) centri1000=st_join(centri1000,tks50km) centri1000=centri1000 %&gt;% mutate(tks50km=NUMURS) %&gt;% dplyr::select(ID1km,tks50km) st_write_parquet(centri1000,&quot;./Templates/TemplateGridPoints/pts1000_sauzeme.parquet&quot;) # 300 m režģis # izveidošana tikls300=st_make_grid(tikls100,cellsize=c(300,300)) tikls300_LV=tikls300[tikls100,,] tikls300_LV=st_as_sf(tikls300_LV) tikls300_LV$rinda300=rownames(tikls300_LV) st_write_parquet(tikls300_LV,&quot;./Templates/TemplateGrids/tikls300_sauzeme.parquet&quot;) # 300 m centra punkti tikls300_LV=st_read_parquet(&quot;./Templates/TemplateGrids/tikls300_sauzeme.parquet&quot;) centri300=st_centroid(tikls300_LV) st_write_parquet(centri300,&quot;./Templates/TemplateGridPoints/pts300_sauzeme.parquet&quot;) # 300 m saistīšana ar tks93_50km tks50km=st_read_parquet(&quot;./Templates/TemplateGrids/tks93_50km.parquet&quot;) centri300=st_join(centri300,tks50km) centri300b=centri300 %&gt;% mutate(tks50km=NUMURS) %&gt;% dplyr::select(rinda300,tks50km) st_write_parquet(centri300b,&quot;./Templates/TemplateGridPoints/pts300_sauzeme.parquet&quot;) # 300 m identificēšana 100 m punktos punkti=st_read_parquet(&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) savienots=st_join(punkti,tikls300_LV) st_write_parquet(savienots,&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) # 300 m identificēšana 100 m režģī pievienosanai=data.frame(savienots) %&gt;% dplyr::select(id,rinda300) tikls100=tikls100 %&gt;% left_join(pievienosanai,by=&quot;id&quot;) st_write_parquet(tikls100,&quot;./Templates/TemplateGrids/tikls100_sauzeme.parquet&quot;) # 500 m # sagatavošana tikls500=st_make_grid(tikls100,cellsize = 500,crs=3059) t500=st_as_sf(tikls500) t500$rinda500=rownames(t500) sfarrow::st_write_parquet(t500,&quot;./Templates/TemplateGrids/tikls500_sauzeme.parquet&quot;) # 500 m centru punkti centri500=st_centroid(tikls500) st_write_parquet(centri500,&quot;./Templates/TemplateGridPoints/pts500_sauzeme.parquet&quot;) # 500 m savienošana ar tks93_50km tks50km=st_read_parquet(&quot;./Templates/TemplateGrids/tks93_50km.parquet&quot;) savienots=st_join(centri500,tks50km) savienots=savienots %&gt;% mutate(tks50km=NUMURS) %&gt;% dplyr::select(rinda500,tks50km) st_write_parquet(savienots,&quot;./Templates/TemplateGridPoints/pts500_sauzeme.parquet&quot;) pievienosanai=data.frame(savienots) %&gt;% dplyr::select(rinda500,tks50km) tikls500=tikls500 %&gt;% left_join(pievienosanai,by=&quot;rinda500&quot;) st_write_parquet(tikls500,&quot;./Templates/TemplateGrids/tikls500_sauzeme.parquet&quot;) # 500 m identificēšana 100 m punktos savienots=st_join(punkti,tikls500) st_write_parquet(savienots,&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) # 500 m identificēšana 100 m režģī pievienosanai=data.frame(savienots) %&gt;% dplyr::select(id,rinda500) tikls100=tikls100 %&gt;% left_join(pievienosanai,by=&quot;id&quot;) st_write_parquet(tikls100,&quot;./Templates/TemplateGrids/tikls100_sauzeme.parquet&quot;) # visus sagatavotos slāņus ievieto ģeosainī (geopackage) st_write(tikls100,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;tikls100_sauzeme&quot;) st_write(tikls300,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;tikls300_sauzeme&quot;) st_write(tikls500,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;tikls500_sauzeme&quot;) st_write(tikls1000,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;tikls1km_sauzeme&quot;) st_write(centri100,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;pts100_sauzeme&quot;) st_write(centri300,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;pts300_sauzeme&quot;) st_write(centri500,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;pts500_sauzeme&quot;) st_write(centri1000,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;pts1000_sauzeme&quot;) st_write(tks50km,&quot;./Templates/vector_grids.gpkg&quot;,layer=&quot;tks93_50km&quot;) 2.1.1 Stratificēšana ģeoprocesēšanas paralelizācijai Lai atvieglotu un paātrinātu ģeoprocesēšanu, analīzes telpu ir nepieciešams sadalīt mazākās daļās. Tam izmantotas tks93_50km lapas. Dažādu ainavas metriku aprēķināšanai un sagatavošanās darbu veikšanai sugu ligzdošanas iecirkņu un tiem atbilstošo ainavu mērogos, sagatavots 100 m režģa centra punktu slānis un, ik TKS karšu lapai atsevišķā failā, atbilstoši buferētu laukumu slāņi. Code if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} # Nepieciešamais slānis rc=st_read_parquet(&quot;./Templates/TemplateGridPoints/pts100_sauzeme.parquet&quot;) # karšu lapas karsu_lapas=levels(factor(rezgis$tks50km)) # Buferēšana un saglabāšana ik 100 m punktam for(i in seq_along(karsu_lapas)){ lapa=karsu_lapas[i] punkti=rc %&gt;% filter(tks50km == lapa) rcbuff500=st_buffer(punkti,dist=500) st_write_parquet(rcbuff500,paste0(&quot;./Templates/TemplateGridPoints/lapas/pts100_r500_&quot;,lapa,&quot;.parquet&quot;)) rcbuff1250=st_buffer(punkti,dist=1250) st_write_parquet(rcbuff1250,paste0(&quot;./Templates/TemplateGridPoints/lapas/pts100_r1250_&quot;,lapa,&quot;.parquet&quot;)) rcbuff3000=st_buffer(punkti,dist=3000) st_write_parquet(rcbuff3000,paste0(&quot;./Templates/TemplateGridPoints/lapas/pts100_r3000_&quot;,lapa,&quot;.parquet&quot;)) rcbuff10000=st_buffer(punkti,dist=10000) st_write_parquet(rcbuff10000,paste0(&quot;./Templates/TemplateGridPoints/lapas/pts100_r10000_&quot;,lapa,&quot;.parquet&quot;)) } Papildus tam, ģeoprocesēšanas paātrināšanai, sagatavoti 3000 m buferi ap 300 m tīkla centriem un 10000 m buferi ap 1 km centriem un saglabāti ik tks93_50km lapā. Atsevišķi faili ik lapai sagatavoti arī 100 m tīklam. Code # pakotnes if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} # punkti 300 m centri300b=st_read_parquet(&quot;./Templates/TemplateGridPoints/pts300_sauzeme.parquet&quot;) numuri=levels(factor(centri300b$tks50km)) for(i in 1:length(numuri)){ numurs=numuri[i] lapa=centri300b %&gt;% filter(tks50km==numurs) buferi=st_buffer(lapa,dist=3000) st_write_parquet(buferi,paste0(&quot;./Templates/TemplateGridPoints/lapas/pts300_r3000_&quot;,numurs,&quot;.parquet&quot;)) } # punkti 1000 m centri1km=st_read_parquet(&quot;./Templates/TemplateGridPoints/pts1000_sauzeme.parquet&quot;) numuri=levels(factor(centri1km$tks50km)) for(i in 1:length(numuri)){ numurs=numuri[i] lapa=centri1km %&gt;% filter(tks50km==numurs) buferi=st_buffer(lapa,dist=10000) st_write_parquet(buferi,paste0(&quot;./Templates/TemplateGridPoints/lapas/pts1km_r10000_&quot;,numurs,&quot;.parquet&quot;)) } # režģis 100 m tikls100=st_read_parquet(&quot;./Templates/TemplateGrids/tikls100_sauzeme.parquet&quot;) numuri=levels(factor(tikls100$tks50km)) for(i in 1:length(numuri)){ numurs=numuri[i] lapa=tikls100 %&gt;% filter(tks50km==numurs) st_write_parquet(lapa,paste0(&quot;./Templates/TemplateGrids/lapas/tikls100_&quot;,numurs,&quot;.parquet&quot;)) } 2.2 References rastri Lai nodrošinātu ievades datu (to pirmapstrādes produktu) telpisko harmonizētību un tai iespējami tuvotos attiecībā pret ekoģeogrāfiskajiem mainīgajiem, sagatavoti references rastri. Tie saglabāti kā Geotiff faili ar trīs šūnas izmēriem - 10 m (ievades datiem), 100 m (analīzes šūna) un 500 m (daļa starprezultātu). Katra rastra telpiskais pārklājums ir par 10 km plašāks nekā Latvijas sauszemes 100 m tīkls, lai nodrošinātu iespēju ainavmetriku aprēķiniem. Sagatavojot 10 m rastru, izmantotas tās šūnas, kuru centri atrodas Latvijas administratīvajās teritorijās. Savukārt rastriem ar šūnas izmēru 100 m un 500 m kā nosacījums izmantota pieskaršanās Latvijas administratīvajām teritorijām. Code if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # Nepieciešamie slāņi tikls100=st_read_parquet(&quot;./Templates/TemplateGrids/tikls100_sauzeme.parquet&quot;) b=terra::crs(tikls100) adm_ter=read_sf(&quot;./Administrativas_teritorijas_2021.shp&quot;) adm_ter$yes=1 # 10 m rastrs=terra::rast(xmin=302800,xmax=772800,ymin=162900,ymax=448900, resolution=10,crs=b) rast_LV=rasterize(vect(adm_ter),rastrs) terra::writeRaster(rast_LV,&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # 100 m rastrs100=terra::rast(xmin=302800,xmax=772800,ymin=162900,ymax=448900, resolution=100,crs=b) rast_LV100=rasterize(vect(adm_ter),rastrs100,touches=TRUE) terra::writeRaster(rast_LV100,&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) # 500 m rastrs500=terra::rast(xmin=302800,xmax=772800,ymin=162900,ymax=448900,resolution=500,crs=b) rast_LV500=rasterize(vect(adm_ter),rastrs500,touches=TRUE) terra::writeRaster(rast_LV500,&quot;./Templates/TemplateRasters/LV500m_10km.tif&quot;) "],["Chapter3.html", "3 Ievades ģeodati 3.1 Ievades jēldati 3.2 Ievades produkti", " 3 Ievades ģeodati Nozīmīgs solis sugu izplatības modelēšanā ir ģeogrāfiskajai telpai piesaistītu (ģeoreferencētu) vidi raksturojošu un ekoloģiski pamatotu mainīgo jeb ekoģeogrāfisko mainīgo (EGV) sagatavošana. Visbiežāk eksistējošie ģeodati (ģeoreferencēti vides raksturojumi) paši par sevi nespēj raksturot sugu ekoloģiskās vajadzības, gandrīz nekad to noformējums precīzi neatbilst analīzes uzstādījumiem. Tādēļ ģeodatu ir nepieciešams dažādi pārveidot, strukturēt un kombinēt. Šajā nodaļā ir raksturoti izmantotie ģeodati un to pirmās apstrādes soļi (harmonizēšana EGV sagatavošanai) raksturota apakšnodaļā Ievades jēldati, un augstāka līmeņa šo datu apstrāde, kas vēl joprojām uzskatāma par soli pirms EGV sagatavošanas, raksturota apakšnodaļā Ievades produkti. 3.1 Ievades jēldati Izmantotie ģeodatu avoti, to raksturojums un harmonizēšanas procedūru apraksts. 3.1.1 Valsts meža dienesta Meža valsts reģistrs Meža nogabalus raksturojošos rādītājus un telpiskos datus apkopojošā Valsts meža dienesta Meža valsts reģistra datubāzes (ESRI failu ģeodatubāze) 2024. gada 07. jānvāra versija ir 2024. gada janvārī saņemta Latvijas Universitātē studiju un pētniecības procesu nodrošināšanai. Saņemtās datubāzes versijas struktūra sakrīt ar Meža valsts reģistra Meža inventarizācijas failu struktūru, bet lauku nosaukumos ir lietoti mazie burti. Pēc lejupielādes nodrošinātas ģeometrijas, tās pārbaudītas un saglabātas geoparquet formātā. Code # libs if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(gdalUtilities)) {install.packages(&quot;gdalUtilities&quot;); require(gdalUtilities)} # datubāze nog=read_sf(&quot;./IevadesDati/MVR/VMD.gdb/&quot;,layer=&quot;Nogabali_pilna_datubaze&quot;) # ģeometriju nodrošināšana ensure_multipolygons &lt;- function(X) { tmp1 &lt;- tempfile(fileext = &quot;.gpkg&quot;) tmp2 &lt;- tempfile(fileext = &quot;.gpkg&quot;) st_write(X, tmp1) ogr2ogr(tmp1, tmp2, f = &quot;GPKG&quot;, nlt = &quot;MULTIPOLYGON&quot;) Y &lt;- st_read(tmp2) st_sf(st_drop_geometry(X), geom = st_geometry(Y)) } nogabali &lt;- ensure_multipolygons(nog) # ģeometriju pārbaudes nogabali2 = nogabali[!st_is_empty(nogabali),,drop=FALSE] # 108 tukšas ģeometrijas validity=st_is_valid(nogabali2) table(validity) # 1733 invalid ģeometrijas nogabali3=st_make_valid(nogabali2) # saglabāšana sfarrow::st_write_parquet(nogabali3, &quot;./IevadesDati/MVR/nogabali.parquet&quot;) 3.1.2 Lauku Atbalsta Dienesta lauku informācija Lauku Atbalsta Dienests uztur regulāri aktualizētu informāciju atvērto datu portālā. Tajā ir pieejams arī arhīvs (kopš 2015. gada), izmantojamās datu kopas satur atslēgvārdu “deklarētās platības”. Šī projekta ietvaros izmantots WFS pieslēgums datu lejupielādei (2023-11-14). Pēc lejupielādes nodrošinātas ģeometrijas, tās pārbaudītas, dzēšot tukšās un validējot pārējās, un saglabātas geoparquet formātā. Code # libs if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(gdalUtilities)) {install.packages(&quot;gdalUtilities&quot;); require(gdalUtilities)} if(!require(httr)) {install.packages(&quot;httr&quot;); require(httr)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(ows4R)) {install.packages(&quot;ows4R&quot;); require(ows4R)} # lejupielāde wfs_bwk &lt;- &quot;https://karte.lad.gov.lv/arcgis/services/lauki/MapServer/WFSServer&quot; url &lt;- parse_url(wfs_bwk) url$query &lt;- list(service = &quot;wfs&quot;, #version = &quot;2.0.0&quot;, # fakultatīvi request = &quot;GetCapabilities&quot; ) vaicajums &lt;- build_url(url) bwk_client &lt;- WFSClient$new(wfs_bwk, serviceVersion = &quot;2.0.0&quot;) bwk_client$getFeatureTypes() %&gt;% map_chr(function(x){x$getTitle()}) dati &lt;- read_sf(vaicajums) # multipoligoni ensure_multipolygons &lt;- function(X) { tmp1 &lt;- tempfile(fileext = &quot;.gpkg&quot;) tmp2 &lt;- tempfile(fileext = &quot;.gpkg&quot;) st_write(X, tmp1) ogr2ogr(tmp1, tmp2, f = &quot;GPKG&quot;, nlt = &quot;MULTIPOLYGON&quot;) Y &lt;- st_read(tmp2) st_sf(st_drop_geometry(X), geom = st_geometry(Y)) } dati2 &lt;- ensure_multipolygons(dati) # pārbaudes dati3 = dati2[!st_is_empty(dati2),,drop=FALSE] # OK validity=st_is_valid(dati3) table(validity) # OK # saglabāšana sfarrow::st_write_parquet(dati3, &quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) 3.1.3 LĢIA topogrāfiskā karte Latvijas Ģeotelpiskās informācijas aģentūras topogrāfiskās kartes M:10000 vekotrodatu ģeodatubāze studiju un pētniecības procesu nodrošināšanai Latvijas Universitātē saņemta 2016. gada jūlijā pēc licences līguma noslēgšanas. Tās aktālizēta (tas ir nepārtraukts process) versija ir pieejama publiskai apskatei, bet vektordatu pieejamība ir ierobežota. Šajā projektā izmantoti sekojoši slāņi: bride_L, kurā raksturoti 3928 tilti kā linijveida objekti; bridge_P, kurā raksturoti 4551 tilti kā punktveida objekti hidro_A, kurā raksturoti 264439 ūdensobjektu plankumi; hidro_L, kurā raksturots grāvju tīkls un mazās upes; landus_A, kurā raksturots zemes segums un lietojums ar 1291781 laukumveida ģeometriju; road_A, kurā raksturoti 32094 ceļi, kas atzīmēti ar laukumu; road_L, kurā raksturoti dažāda platuma, tajā skaitā relatīvi šauri ceļi un takas; swamp_A, kurā raksturoti augstie purvi ar 48105 laukumveida objektu; flora_L, kurā raksturoti līnijveida koku un krūmu objekti, kuri pārveidoti par geoparquet. Failu formāta maiņas ietvaros pārbaudītas ģeometrijas (tukšās, to validitāte, kas nepieciešamības gadījumā labota). Code # libs if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} # flora_L flora_L=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;flora_L&quot;) flora2 = flora_L[!st_is_empty(flora_L),,drop=FALSE] # OK validity=st_is_valid(flora2) table(validity) # 12 invalid geometrijas sfarrow::st_write_parquet(flora2, &quot;./IevadesDati/topo/Topo_floraL.parquet&quot;) # hidro A hidro_A=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;hidro_A&quot;) hidro2 = hidro_A[!st_is_empty(hidro_A),,drop=FALSE] # OK validity=st_is_valid(hidro2) table(validity) # 12 invalid geometrijas hidro3=st_make_valid(hidro2) sfarrow::st_write_parquet(hidro3, &quot;./IevadesDati/topo/Topo_hidroA.parquet&quot;) # hidro L hidro_L=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;hidro_L&quot;) table(hidro_L$FNAME,useNA=&quot;always&quot;) hidro_Lx=hidro_L %&gt;% filter(FNAME==&quot;Ūdenstece līdz 3m&quot;) # grāvji hidro_Lx2 = hidro_Lx[!st_is_empty(hidro_Lx),,drop=FALSE] # OK validity=st_is_valid(hidro_Lx) table(validity) # OK sfarrow::st_write_parquet(hidro_Lx, &quot;./IevadesDati/topo/Topo_hidroL.parquet&quot;) # road A road_A=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;road_A&quot;) road2 = road_A[!st_is_empty(road_A),,drop=FALSE] # OK validity=st_is_valid(road2) table(validity) # 28 invalid geometrijas road3=st_make_valid(road2) sfarrow::st_write_parquet(road3, &quot;./IevadesDati/topo/Topo_roadA.parquet&quot;) # road L road_L=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;road_L&quot;) table(road_L$FNAME,useNA=&quot;always&quot;) road_Lx=road_L %&gt;% filter(FNAME!=&quot;Gājēju celiņš līdz 3m&quot;) %&gt;% # ne pavisam sīkie filter(FNAME!=&quot;Gājēju celiņš mērogā&quot;) %&gt;% filter(FNAME!=&quot;Taka&quot;) roadL2 = road_Lx[!st_is_empty(road_Lx),,drop=FALSE] # OK validity=st_is_valid(roadL2) table(validity) # OK sfarrow::st_write_parquet(roadL2, &quot;./IevadesDati/topo/Topo_roadL.parquet&quot;) # swamp A swamp_A=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;swamp_A&quot;) swamp2 = swamp_A[!st_is_empty(swamp_A),,drop=FALSE] # OK validity=st_is_valid(swamp2) table(validity) # 17 invalid geometrijas swamp3=st_make_valid(swamp2) sfarrow::st_write_parquet(swamp3, &quot;./IevadesDati/topo/Topo_swampA.parquet&quot;) # bridge_L bridge_L=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;bridge_L&quot;) bridgeL2 = bridge_L[!st_is_empty(bridge_L),,drop=FALSE] # OK validity=st_is_valid(bridgeL2) table(validity) # OK sfarrow::st_write_parquet(bridgeL2, &quot;./IevadesDati/topo/Topo_bridgeL.parquet&quot;) # bridge_P bridge_P=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;bridge_P&quot;) bridgeP2 = bridge_P[!st_is_empty(bridge_P),,drop=FALSE] # OK validity=st_is_valid(bridgeP2) table(validity) # OK sfarrow::st_write_parquet(bridgeP2, &quot;./IevadesDati/topo/Topo_bridgeP.parquet&quot;) # landus A landus_A=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;landus_A&quot;) landus2 = landus_A[!st_is_empty(landus_A),,drop=FALSE] # OK validity=st_is_valid(landus2) table(validity) # 5734 invalid geometrijas landus3=st_make_valid(landus2) sfarrow::st_write_parquet(landus3, &quot;./IevadesDati/topo/Topo_landusA.parquet&quot;) 3.1.4 Meliorācijas Kadastra Informācijas Sistēmas datubāze Meliorācijas Kadastra Informācijas Sistēmas datubāze 2018. gada jūnijā pēc pieprasījuma no Latvijas Universitātes studiju un pētniecības procesu nodrošināšanai saņemta no Zemkopības ministrijas nekustamo īpašumu daļas. Tās saturs pieejams publiskai apskatei. Sākotnēji papildus apstrāde šiem datiem nav veikta. Tie izmantoti Ievades produkti sagatavošanai - gan Reljefa produkti, gan Ainava sagatavošanai. 3.1.5 LVM atvērtie dati AS “Latvijas valsts meži” meža infrastruktūras ģeotelpiskie dati un to apraksts. No šīs datu kopas projektā izmantoti: ceļi: meža ceļi; attīstāmie meža ceļi; apgriešanās laukumi; izmainīšanās vietas; nobrauktuves; meliorācijas sistēmas: grāvji; meliorācijas sistēmas; atjaunojamie meliorācijas objekti. Sākotnēji papildus apstrāde šiem datiem nav veikta. Tie izmantoti Ievades produkti (specifiskāk, Ainava) sagatavošanai. 3.1.6 Corine Land Cover Corine Land Cover ir publiski pieejami ģeodati, kas raksturo zemes seguma un lietojuma veidu (LULC) visā aptverot visu Eiropu ilgā laika periodā ar kopumā nemainīgu (salīdzināmu) metodiku (https://land.copernicus.eu/content/corine-land-cover-nomenclature-guidelines/docs/pdf/CLC2018_Nomenclature_illustrated_guide_20190510.pdf), sniedzot rezultātus atsevišķiem gadiem - 1990., 2000., 2006., 2012., 2018. (https://land.copernicus.eu/en/products/corine-land-cover). Lai gan datu kopa ir rupjas izšķirtspēja - kartējamā vienība ir 25 ha laukumi, kas ir vismaz 100 m plati, tā sniedz pietiekošu informāciju vispārīgam lietojumam, piemēram, novērojumu atlasei plašās ainavas klasēs (vairāk nodaļā Novērojumu atlase). Šajā projektā izmantoti 2018. gada dati. Lejupielādētā datu kopa transformēta Latvijas koordinātu sistēmā (EPSG:3059), turpmākā darba atvieglošanai un paātrināšanai failu formāts mainīts uz geoparquet. Failu formāta maiņas ietvaros pārbaudītas ģeometrijas (tukšās, validitāte). Code # libs if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} # lejupielādētie dati clcLV=st_read(&quot;./IevadesDati/CLC/clcLV.gpkg&quot;,layer=&quot;clcLV&quot;) # tukšās ģeometrijas clcLV2 = clcLV[!st_is_empty(clcLV),,drop=FALSE] # OK # ģeometriju validēšana validity=st_is_valid(clcLV2) table(validity) # 3 non-valid clcLV3=st_make_valid(clcLV2) # koordinātu sistēma clcLV3=st_transform(clcLV3,crs=3059) # saglabāšana sfarrow::st_write_parquet(clcLV3, &quot;./IevadesDati/CLC/CLC_LV_2018.parquet&quot;) 3.1.7 Sentinel-2 Eiropas Kosmosa Aģentūras (ESA) Copernicus programmas Sentinel-2 misija ir divu (trīs kopš 2024-09-05) identisku satelītu, kas riņo tajā pašā orbītā, konstellācija. Pirmais satelīts - Sentinel-2A savu orbītu ieņēma un izgāja kalibrācijas testus 2015-06-23, otrais (Sentinel-2B) - 2017-03-07, pirmie attēli bija pieejami jau iepriekš. Katrs satelīts uzņem augstas izšķirtspējas (no 10 m (pie ekvatora) pikseļa izšķirtspējas) attēlus 13 spektrālajos kanālos ar atgriešanās laiku līdz 5 dienām (tuvāk poliem - biežāk) (https://www.esa.int/Applications/Observing_the_Earth/Copernicus/Sentinel-2). Šīs misijas dati ir brīvi pieejami, tajā skaitā Google Earth Engine platformā (Gorelick et al., 2017) dažādas liela apjoma priekšapstrādes un analīžu veikšanai. Šī projekta ietvaros izmantots harmonizētais otrā līmeņa (Level-2A; https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S2_SR_HARMONIZED#description) produkts, pielietojot mākoņu masku, kura iekļauj ne tikai mākoņu, bet arī to ēnu filtrēšanu, lai katrai pēc filtrēšanas (mākoņu un sezonas - no aprīļa līdz oktobrim un no 2017. līdz 2023. gadam) pieejamajai satelītainais aprēķinātu normalizēto starpības veģetācijas indeksu (NDVI, ) un normalizēto starpības ūdens indeksu (NDWI, ) kā arī dažādas to metrikas. Datu sagatavošanai izmantojams replicēšanas skripts. Lai izmantotu šo skriptu, ir nepieciešams GEE konts un projekts un pietiekošs apjoms vietas Google Drive diskā. Izpildot komandrindas tiks piedāvāta lejuplāde sekojošiem failiem: NDVI_p25 - aprīļa līdz oktobra ik pikseļa NDVI 25. procentiles vērtību katram gadam no 2017. līdz 2023. mediāna; NDVI_p75 - aprīļa līdz oktobra ik pikseļa NDVI 75. procentiles vērtību katram gadam no 2017. līdz 2023. mediāna; NDVI_median - aprīļa līdz oktobra ik pikseļa NDVI mediānas vērtību katram gadam no 2017. līdz 2023. mediāna; NDVI_2023_median - 2023. gada aprīļa līdz oktobra ik pikseļa NDVI vērtību mediāna; NDVI_IQR - aprīļa līdz oktobra ik pikseļa NDVI starpkvartiļu apgabala vērtību katram gadam no 2017. līdz 2023. mediāna; NDWI_p25 - aprīļa līdz oktobra ik pikseļa NDWI 25. procentiles vērtību katram gadam no 2017. līdz 2023. mediāna; NDWI_p75 - aprīļa līdz oktobra ik pikseļa NDWI 75. procentiles vērtību katram gadam no 2017. līdz 2023. mediāna; NDWI_median - aprīļa līdz oktobra ik pikseļa NDWI mediānas vērtību katram gadam no 2017. līdz 2023. mediāna; NDWI_2023_median - 2023. gada aprīļa līdz oktobra ik pikseļa NDWI vērtību mediāna; NDWI_IQR - aprīļa līdz oktobra ik pikseļa NDWI starpkvartiļu apgabala vērtību katram gadam no 2017. līdz 2023. mediāna. Pēc komandrindu izpildes un rezultātu sagatavošanas Google Drive diskā, ir redzams, ka katrs visu Latviju aptverošais slānis ir sadalīts vairākās lapās. Tas ir tādēļ, ka slāņi kodēti kā Float un pirms komprecijas GeoTIFF pārsniedz 4 GB izmēru. Visas šīs lapas ir nepieciešams lejuplādēt, sekojošās R komandrindas tās apvieno, nodrošinot koordinātu sistēmas un pikseļu atbilstību references rastram. Code if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # reference paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # saraksts ar lejupielādētajiem failiem, pieņemot, ka tie atrodas direktorijas # &quot;S2indices&quot; apakšdirektorijā &quot;RAW&quot; faili=data.frame(fails=list.files(&quot;./IevadesDati/S2indices/RAW/&quot;)) faili$celi_sakums=paste0(&quot;./IevadesDati/S2indices/RAW/&quot;,faili$fails) # Korekti projektētu mozaīku sagatavošana # failu nosaukumi un ceļš saglabāšanai faili=faili %&gt;% separate(fails,into=c(&quot;nosaukums&quot;,&quot;vidus&quot;,&quot;beigas&quot;),sep=&quot;-&quot;,remove = FALSE) %&gt;% mutate(mosaic_name=paste0(nosaukums,&quot;.tif&quot;), masaic_cels=paste0(&quot;./IevadesDati/S2indices/mozaikas/&quot;,mosaic_name)) # unikālie failu nosaukumi cikla vadībai unikalie=levels(factor(faili$nosaukums)) # cikls uzdevuma veikšanai for(i in seq_along(unikalie)){ unikalais=faili %&gt;% filter(nosaukums==unikalie[i]) beigu_cels=unique(unikalais$masaic_cels) # ik slānis sastāv no divām lapām viens=rast(unikalais$celi_sakums[1]) divi=rast(unikalais$celi_sakums[2]) viens2=terra::project(viens,paraugs) divi2=terra::project(divi,paraugs) mozaika=terra::merge(viens2,divi2) maskets=mask(mozaika,paraugs,filename=beigu_cels,overwrite=TRUE) } 3.1.8 Dynamic World Dynamic World (DW) ir relatīvi nesens Zemes novērošanas sistēmu produkts, kurš klasificē zemes segumu un lietojumu (LULC) deviņās kategorijās (0=water, 1=trees, 2=grass, 3=flooded_vegetation, 4=crops, 5=shrub_and_scrub, 6=built, 7=bare, 8=snow_and_ice), katram ESA Copernicus Sentinel-2 attēlam ar identificēto mākoņainību \\(\\le35%\\), pieļaujot filtrēšanu un dažādu agregāciju veidošanu (Brown et al., 2022) (nedaudz vairāk nodaļā Dynamic World izpēte). DW ievades informācija - rastra slānis katrai sezonai katrā gadā - sagtavots Google Earth Engine platformā (Gorelick et al., 2017), izmantojot replicēšanas skriptu. Lai izmantotu šo skriptu, ir nepieciešams GEE konts un projekts un pietiekošs apjoms vietas Google Drive diskā. Izpildot komandrindas tiks piedāvāta lejuplāde failam, kas aptver laika periodu no vērtības 7. rindā līdz vērtībai 8. rindā (faila nosaukums norādāms 32. rindā, tā apraksts - 33. rindā un direktorija Google diskā - 31. rindā vai tas viss norādāms apstiprinot saglabāšanau) - šis skripts nav optimizēts visu sezonālo griezumu visiem gadiem sagatavošanai, lai reproducētu vai paplašinātu šo izpēti, tās nepieciešams manuāli izmainīt. Pēc komandrindu izpildes un rezultātu sagatavošanas Google Drive diskā, ir redzams, ka katrs visu Latviju aptverošais slānis ir sadalīts vairākās lapās. Tas ir tādēļ, ka, lai nodrošinātu nulles patieso vērtību (klase “water”, nevis fons), slāņi kodēti kā Float, nevis veselie skaitļi. Visas šīs lapas ir nepieciešams lejuplādēt, sekojošās R komandrindas tās apvieno, nodrošinot koordinātu sistēmas un pikseļu atbilstību references rastram. Code if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # reference paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # saraksts ar lejupielādētajiem failiem, pieņemot, ka tie atrodas direktorijā # &quot;DWE_float&quot; faili=data.frame(faili=list.files(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_float/&quot;)) faili$celi_sakums=paste0(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_float/&quot;,faili$faili) # Korekti projektētu mozaīku sagatavošana # failu nosaukumi un ceļš saglabāšanai faili=faili %&gt;% separate(faili,into=c(&quot;DW&quot;,&quot;gads&quot;,&quot;periods&quot;,&quot;parejais&quot;),sep=&quot;_&quot;,remove = FALSE) %&gt;% mutate(unikalais=paste0(DW,&quot;_&quot;,gads,&quot;_&quot;,periods), mosaic_name=paste0(unikalais,&quot;.tif&quot;), masaic_cels=paste0(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/&quot;,mosaic_name)) # unikālie failu nosaukumi cikla vadībai unikalie=levels(factor(faili$unikalais)) # cikls uzdevuma veikšanai for(i in seq_along(unikalie)){ unikalais=faili %&gt;% filter(unikalais==unikalie[i]) beigu_cels=unique(unikalais$masaic_cels) # ik slānis sastāv no divām lapām viens=rast(unikalais$celi_sakums[1]) divi=rast(unikalais$celi_sakums[2]) viens2=project(viens,paraugs) divi2=project(divi,paraugs) mozaika=mosaic(viens2,divi2,fun=&quot;first&quot;) maskets=mask(mozaika,paraugs,filename=beigu_cels,overwrite=TRUE) } 3.1.9 The Global Forest Watch The Global Forest Watch (GFW) ir plaši pazīstam produkts, kurš raksturo koku vainagu segumu 2000. gadā, tā ikgadējo pieaugumu no 2001. gada līdz 2012. gadam un zudumu katrā gadā kopš 2001. gada līdz aktuālajai versijai, kas ik gadu tiek papildināta (Hansen et al., 2013). Dati ir pieejami gan projekta mājaslapā, gan GEE, kurā tie ir izstrādāti. Šajā projektā izmantota v1.11, kurā pēdējais koku izzušanas datēšanas gads ir 2023, to sagatavojot lejupielādei GEE platformā ar šo replicēšanas skriptu. Lai izmantotu šo skriptu, ir nepieciešams GEE konts un projekts un pietiekošs apjoms vietas Google Drive diskā. Izpildot komandrindas tiks piedāvāta lejuplāde failam, kuru nepieciešams saglabāt Google diskā. Pēc komandrindu izpildes un rezultātu sagatavošanas Google Drive diskā, darba cietajā diskā ir lejupielādējams viens fails un tas pielāgojams references rastram. Code if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # reference paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # TreeCoverLoss treecoverloss=rast(&quot;./IevadesDati/koki/RAW/TreeCoverLoss.tif&quot;) # Fona aivietošana ar iztrūkstošajām vērtībām tcl=ifel(treecoverloss&lt;1,NA,treecoverloss) # projektēšana un maskēšana ar faila saglabāšanu tcl2=terra::project(tcl,paraugs) tcl3=mask(tcl2,paraugs,filename=&quot;./IevadesDati/koki/TreeCoverLossYear.tif&quot;,overwrite=TRUE) 3.1.10 Palsar Forests Palsar Forests resurss ir balstīts PALSAR-2 sintētiskās aprertūras radara (SAR) atstarojumu klasifikācijā meža un nemeža zemēs ar 25 m pikseļa izšķirtspēju. Par mežu tiek klasificētas vismaz 0.5 ha plašas ar kokiem klātas teritorijas, kurās koku (vismaz 5 m augstu) seguma ir vismaz 10% (Shimada et al., 2013). Dati ir pieejami GEE. Šajā projektā izmantota 4-klašu versija (1=Dense Forest, 2=Non-dense Forest, 3=Non-Forest, 4=Water), kurā pēdējais koku seguma datēšanas gads ir 2020, to sagatavojot lejupielādei GEE platformā ar šo replicēšanas skriptu. Lai izmantotu šo skriptu, ir nepieciešams GEE konts un projekts un pietiekošs apjoms vietas Google Drive diskā. Izpildot komandrindas tiks piedāvāta lejuplāde failam, kuru nepieciešams saglabāt Google diskā. Pēc komandrindu izpildes un rezultātu sagatavošanas Google Drive diskā, ir lejupielādējami četri faili. Tos nepieciešams projektēt atbilstībai references rastram un apvienot. Šajā resursā koki ir kodēti divās grupās: 1=Dense Forest un 2=Non-dense Forest, kuras nepieciešams apvienot un pārējo pārvērst par iztrūkstošajām vērtībām. Lai gan šī resursa dati raksturo situāciju 2020. nevis 2023. gadā, tie ir izmantoti, jo koku vainagu seguma izzušanu raksturošanai ir pieejami The Global Forest Watch dati, bet vainagu parādīšanās nav tik strauja, lai būtu nozīmīgas izmaiņas trīs gadu laikā, un šis gads atrodas pa vidu ar novērojumiem aptvertajam laika periodam (2017.-2023. gadi). Code if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # reference paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # Palsar Trees fnf1=rast(&quot;./IevadesDati/koki/RAW/ForestNonForest-0000023296-0000023296.tif&quot;) fnf2=rast(&quot;./IevadesDati/koki/RAW/ForestNonForest-0000023296-0000000000.tif&quot;) fnf3=rast(&quot;./IevadesDati/koki/RAW/ForestNonForest-0000000000-0000023296.tif&quot;) fnf4=rast(&quot;./IevadesDati/koki/RAW/ForestNonForest-0000000000-0000000000.tif&quot;) # projektēšana fnf1p=terra::project(fnf1,paraugs) fnf2p=terra::project(fnf2,paraugs) fnf3p=terra::project(fnf3,paraugs) fnf4p=terra::project(fnf4,paraugs) # Apvienošana fnfA=terra::merge(fnf1p,fnf2p) fnfB=terra::merge(fnfA,fnf3p) fnfC=terra::merge(fnfB,fnf4p) # Reklasificēšana fnf_X=ifel(fnfC&lt;=2&amp;fnfC&gt;=1,1,NA) # Maskēšana un saglabāšana fnf_XX=mask(fnf_X,paraugs,filename=&quot;./IevadesDati/koki/Palsar_Forests.tif&quot;,overwrite=TRUE) 3.1.11 ERA5 Land ERA5-Land ir sauszemei veikta klimata (laika apstākļu) pazīmju reanalīze sauszemei 0.1° izšķirtspējā un aptver laika periodu kopš 1950. gada janvāra līdz mūsdienām (datu kopa tiek nepārtraukti papildināta) ar stundas temporālo izšķirtspēju (Sabater, n.d.). Oriģināldati lejupielādei ir pieejami ESA Copernicus Clima Data Store (https://cds.climate.copernicus.eu/datasets/reanalysis-era5-land?tab=download), tie pieejami arī Google Earth Engine platformā (Gorelick et al., 2017) kā dienas un mēneša līmeņu agregāti. Šie agregāti izmantoti sugu izplatības modelēšanai nepieciešamo pazīmju jēladatu sagatavošanai - izmantotās komandu rindas. Piedāvātais skripts aprēķina vairākas pazīmes un piedāvā to lejupielādi Google Drive direktorijā. Lai izmantotu šo skriptu, ir nepieciešams GEE konts un projekts un pietiekošs apjoms vietas Google Drive diskā. Skripta izpildīšana lejupielādei piedāvās sekojošus failus: FebPrec, kas raksturo ik pikseļa mediānu starp ik februāra (gada aukstākais mēnesis Latvijā) kopējo nokrišņu summām ik gadā no 2015. līdz 2023.; FebTempSum, kas raksturo ik pikseļa mediānu starp ik februāra (gada aukstākais mēnesis Latvijā) ikdienas vidējo gaisa temperatūru (2 m virs zemes) summām ik gadā no 2015. līdz 2023.; JulPrec, kas raksturo ik pikseļa mediānu starp ik jūlija (gada siltākais mēnesis Latvijā) kopējo nokrišņu summām ik gadā no 2015. līdz 2023.; PosTempDays, kas raksturo ik pikseļa mediānu starp dienu, kuru vidējā gaisa temperatūra (2 m virs zemes) ir vismaz 275°K (~0°C), skaitu ik gadā no 2015. līdz 2023.; VegTempSums, kas raksturo ik pikseļa mediānu starp ik dienas, kuras vidējā gaisa temperatūra (2 m virs zemes) ir vismaz 279°K (~5°C), summu ik gadā no 2015. līdz 2023.; YearPrecSum, kas raksturo ik pikseļa mediānu starp ik mēneša kopējo nokrišņu daudzuma summām ik gadā no 2015. līdz 2023.. Tā kā klimata datu kodējums ir Float, tie tiek sagatavoti kā no četrām lapām (katram slānim) sastāvoši GeoTIFF faili, kurua nepieciešams lejupielādēt darba cietajā diskā. Sekojošās komandu rindas nodrošina šo lapu apvienošanu un projektēšu atbilstībai references rastram. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)){install.packages(&quot;exactextractr&quot;);require(exactextractr)} # reference template=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # DW export no GEE faili=data.frame(fails=list.files(&quot;./IevadesDati/klimats/RAW/&quot;)) faili$celi_sakums=paste0(&quot;./IevadesDati/klimats/RAW/&quot;,faili$fails) # Sagatavošana faili=faili %&gt;% separate(fails,into=c(&quot;nosaukums&quot;,&quot;vidus&quot;,&quot;beigas&quot;),sep=&quot;-&quot;,remove = FALSE) %&gt;% mutate(mosaic_name=paste0(nosaukums,&quot;.tif&quot;), masaic_cels=paste0(&quot;./IevadesDati/klimats/mozaikas/&quot;,mosaic_name)) unikalie=levels(factor(faili$nosaukums)) for(i in seq_along(unikalie)){ unikalais=faili %&gt;% filter(nosaukums==unikalie[i]) beigu_cels=unique(unikalais$masaic_cels) # katrs slānis sastāv no četrām lapām viens=rast(unikalais$celi_sakums[1]) divi=rast(unikalais$celi_sakums[2]) tris=rast(unikalais$celi_sakums[3]) cetri=rast(unikalais$celi_sakums[4]) viens2=terra::project(viens,paraugs) divi2=terra::project(divi,paraugs) tris2=terra::project(tris,paraugs) cetri2=terra::project(cetri,paraugs) mozaika=terra::merge(viens2,divi2,tris2,cetri2) maskets=mask(mozaika,paraugs,filename=beigu_cels,overwrite=TRUE) } 3.1.12 Augsnes auglīgums Latvijas Universitātē GeoTIFF fails (EPSG:3857, 100 m) ar organiskā oglekļa līmeni augsnes virsējā slāni saņemts 2024. gada februārī no Eiropas vienotā pētījumu centra (European Joint Research Center). Šis slānis tālāk projektēts atbilstībai references rastram un izmantots EGV sagatavošanā. Code if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # reference template=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # slanis oc=rast(&quot;./IevadesDati/Augsnes/noIvo/LV_OC.tif&quot;) # projektēšana oc2=project(oc,template_100m,use_gdal=TRUE,method=&quot;bilinear&quot;) writeRaster(oc2,&quot;./IevadesDati/Augsnes/noIvo/OrganicCarbon.tif&quot;) 3.1.13 Digitālie reljefa modeļi Līdz ar Latvijas teritorijas vienlaidus aerolāzerskenēšanas datu publiskošanu (https://www.lgia.gov.lv/lv/digitalie-augstuma-modeli-0) ir izstrādāti dažādi augstas izšķirtspējas (1 m un augstāka) digitālie virsmas modeļi (DSM) un digitālie reljefa modeļi (DEM). Tā kā ievades dati visos gadījumos ir vieni un tie paši, gandrīz visā valsts teritorijā šo (atbilstošo) modeļu vērtības ir vienādas. Tomēr, ne visai valsts teritorijai ir pieejami aerolāzerskenēšanas dati (1), starp modeļiem ir novērojamas atšķirības aizpildījumā (vērtību pieejamībā) ārpus iekšzemes ūdeņiem (2) un pašu ūdensobjektu aizpildījums (3), tomēr, attiecībā uz ar datiem nosegtajām vietām uz sauszemes, vērtības ir gandrīz identiskas (Pīrsona korelācijas koeficienti starp LU ĢZZF, LVMI Silava un LĢIA izstrādātajiem DEM ir lielāki par 0.999999). Kā pamata DEM izmantots LU projektā “Ilgtspējīgas augsnes resursu pārvaldības uzlabošana lauksaimniecībā” sagatavotais vidējais aritmētiskais starp LU ĢZZF un LVMI Silava izstrādātajiem DEM. Šī DEM izšķirtspēja ir 1 m, kas nav nepieciešama sugu izplatības modelēšanas ievades datiem, tādēļ slānis projektēts atbilstībai references 10 m rastram. Salīdzinot projektēto DEM ar referenci, ir skaidri izdalāmas vietas, kurās nav datu. Tas risināts, izmantojot Māra Nartiša (LU ĢZZF) 2018. gadā izstrādāto visu Latvijas teritoriju bez pārrāvumiem aptverošais DEM ar 10 m izšķirtspēju. Lai novērstu asu malu veidošanās aizpildījuma vietās (izlīdzinātu pārejas), veidots vidējais aritmētiskais slānis, kurš aptver visu Latvijas teritoriju un sakrīt ar references rastru. No šī rastra izveidots arī nogāžu slīpuma slānis, kurš projektēts atbilstoši referencei. Slīpums izteikts grādos un rēķināts ar 8-kaimiņu pieeju. Tāpat arī aspekts jev nogāzes virziens. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)){install.packages(&quot;exactextractr&quot;);require(exactextractr)} # reference template=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # LiDAR DEM uz 10 m lapas_1m=data.frame(faili=list.files(&quot;./IevadesDati/reljefs/meanDEM_1mOLD/&quot;,pattern=&quot;*.tif$&quot;)) lapas_1m$numurs=substr(lapas_1m$faili,10,13) lapas_1m$cels1=paste0(&quot;./IevadesDati/reljefs/meanDEM_1mOLD/&quot;,lapas_1m$faili) lapas_1m$cels2=paste0(&quot;./IevadesDati/reljefs/meanDEM_10mOLD/&quot;,lapas_1m$faili) kvadrati=st_read(dsn=&quot;GIS_Latvija10.2.gdb&quot;,layer=&quot;tks93_50000&quot;) kvadrati$name=as.character(kvadrati$num50tk) moz2=rast(&quot;./IevadesDati/reljefs/Nartiss_visa_Latvija/dem10_20_kopa.tif&quot;) for(i in 1:length(kvadrati$name)){ kvadrats=kvadrati[i,] nosaukums=kvadrats$name telpa=terra::ext(kvadrats) paraugs=crop(template,telpa) nart=crop(moz2,telpa) nart2=project(nart,paraugs,mask=TRUE) dem1m=lapas_1m[lapas_1m$numurs==kvadrats$name,] if(nrow(dem1m)&gt;0){ sakumcels=dem1m$cels1 dem=rast(sakumcels) reproj=project(dem,paraugs,mask=TRUE,method=&quot;bilinear&quot;,use_gdal=TRUE) videjais &lt;- ifel(is.na(nart2),nart2,ifel(is.na(reproj),nart2, app(c(nart2,reproj), mean))) writeRaster(videjais,overwrite=TRUE, filename=paste0(&quot;./IevadesDati/reljefs/meanDEM_10m/&quot;,&quot;vidDEM_&quot;, nosaukums,&quot;.tif&quot;)) } else{ writeRaster(nart2,overwrite=TRUE, filename=paste0(&quot;./IevadesDati/reljefs/meanDEM_10m/&quot;,&quot;vidDEM_&quot;, nosaukums,&quot;.tif&quot;)) } } # vrt un mozaika lapas_10=data.frame(faili=list.files(&quot;./IevadesDati/reljefs/meanDEM_10m/&quot;,pattern=&quot;*.tif$&quot;)) lapas_10$celi1=paste0(&quot;./IevadesDati/reljefs/meanDEM_10m/&quot;,lapas_10$faili) mozaikai=vrt(lapas_10$celi1,overwrite=TRUE, filename=&quot;./IevadesDati/reljefs/vrtDEM_10m.tif&quot;) mozaika=rast(&quot;./IevadesDati/reljefs/vrtDEM_10m.tif&quot;) writeRaster(mozaika,&quot;./IevadesDati/reljefs/mozDEM_10m.tif&quot;) ## slope reljefs=rast(&quot;./IevadesDati/reljefs/mozDEM_10m.tif&quot;) slipumi=terrain(reljefs, v=&quot;slope&quot;, neighbors=8, unit=&quot;degrees&quot;, filename=&quot;./Rastri_10m/Slope_10m.tif&quot;, overwrite=TRUE) ## aspect reljefs=rast(&quot;./IevadesDati/reljefs/mozDEM_10m.tif&quot;) virzieni=terrain(reljefs, v=&quot;aspect&quot;, neighbors=8, unit=&quot;degrees&quot;, filename=&quot;./Rastri_10m/Aspect_10m.tif&quot;, overwrite=TRUE) 3.1.14 Atkritumu poligoni, glabātavas un šķirošanas laukumi Daļas putnu sugu sastopamības ir netieši saistīta ar cilvēku radīto atkritumu koncentrāciju vietām. Sevišķi tas attiecas uz plēsīgajiem putniem, kuru potenciālie barības objekti (upuri) tās izmanto par savām barošanās vietām un tajās koncentrējas lielā skaitā visa gada garumā. Tas var būt sevišķi svarīgi ziemojošajām sugām laikā, kad tipisko barības objektu pieejamība ir apgrūtināta, piemēram, sērsnas dēļ. Informācija par atkritumu poligoniem apkopota no VARAM un Latvijas Vides, ģeoloģijas un meteoroloģijas centra “Pārskats par atkritumu poligoniem Latvijā 2023. gadā” uzskaitītajiem poligoniem, to adresēm. Ekoģeogrāfisko mainīgo sagatavošanai nepieciešamās koordinātes meklētas kombinējot https://www.google.com/maps un https://balticmaps.eu/ resursus. Iepriekš minētajos resursos minētajiem, pievienots objekts adresē “Dardedzes C, Mārupes pag., Mārupes nov., Latvija, LV-2166”. Papildus tam, izmantota Valsts vides dienesta informācija par dalīto atkritumu un depozīta iepakojuma nodošanas vietām, to eksportējot Excel failā. Abas datu kopas apvienotas vienā failā un pievienotas šim materiālam. 3.1.15 Latvijas Ekskluzīvās Ekonomiskās Zonas ūdeņi Latvijas Ekskluzīvās Ekonomiskās Zonas ūdeņu teritorija iegūta no HELCOM karšu un datu servisa. Pēc lejupielādes šis līniju fails analogi savienots ar tajā pašā resursā iegūtu krasta līnijas failu. 3.2 Ievades produkti Atsevišķos gadījumos ievades datiem veikta relatīvi apjomīga apstrāde (sagatavojot ievades produktus), kas nepieciešama turpmākajam darbam - ekoģeogrāfisko mainīgu sagatavošanai un novērojumu filtrēšanai. Šie produkti un to izstrādes gaita raksturota atbilstošajās apakšnodaļās. Ievades produkti veidoti kā rastri atbilstoši standartizācijas failiem. Visvairāk rastra (ievades līmeņa) produktu radīts 10 m izšķirstpējā, bet daļa arī saistīta ar citām izšķirtspējām vai jau agregācijām vektordatos. Visi references rastri ir savā starpā saistīti pēc pikseļu izvietojuma. Ievades jēldatu rasterizēšana veikta, lai risinātu topoloģiskos, topogrāfiskos un savstarpējā novietojuma izaicinājumus, kas raksturīgi atšķirīgos un dažādos mērogos izstrādātiem un uzturētiem vektordatiem. Rasterizēšana ļauj ne tikai telpiski harmonizēt šos datus, tā arī atvieglo to apstrādi, gan attiecībā uz ainavas objektu sasvstarpējo novietojumu, gan apstrādei nepieciešamajiem resursiem (instrukciju sarežģītība, to procesēšanas kopējais laiks un procesor-stundu izmaksas). Sekojošajās apakšnodaļās raksturoti izaicinājumi, to risināšanai pieņemtie lēmumi un ar komandu rindām ieviestie risinājumi. 3.2.1 Reljefa produkti Lai izstrādātu daļu ar reljefu saistīto EGV, piemēram, topogrāfisko mitruma indeksu (TWI) un beznoteces depresijas, ir nepieciešams risināt ūdens plūsmu vidē. Tā ir vairāku soļu procedūra, kas ir loģiska un uzticama kalnu apvidos un vidē ar maz ietekmētu hidroloģiju. Tātad, Latvijas apstākļos tas ir izaicinoši. Šos izaicinājumus var risināt dažādi, piemēram, ja būtu pieejama uzticama (precīza) informācija par upju un grāvju precīzām atrašanās vietām, to varētu iestrādāt reljefā. Diemžēl, pietiekoši precīzas informācijas nav. Tādēļ izaicinājumu risināšanai izmantota informācija par transporta būvēm no Meliorācijas Kadastra Informācijas Sistēmas datubāze un tiltiem no LĢIA topogrāfiskā karte - 30 m buferī ap šīm vietām iestrādāta minimālā augstuma virs jūras līmeņa informācija tālāk izmantojamajā DEM. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)){install.packages(&quot;exactextractr&quot;);require(exactextractr)} # reference template=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # reljefs reljefs=rast(&quot;./IevadesDati/reljefs/mozDEM_10m.tif&quot;) # caurtekas caurtekas=st_read(dsn=&quot;./IevadesDati/MKIS/MKIS_20180612.gdb/&quot;,layer=&quot;TransportStructures&quot;) caurtekas_buffer=st_buffer(caurtekas,dist=30) # tilti tiltiL=st_read(dsn=&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;bridge_L&quot;) tiltiL_buffer=st_buffer(tiltiL,dist=30) tiltiP=st_read(dsn=&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;,layer=&quot;bridge_P&quot;) tiltiP_buffer=st_buffer(tiltiP,dist=30) # visi buferi caurtekas_buffer=caurtekas_buffer[,&quot;Shape&quot;] tiltiL_buffer=tiltiL_buffer[,&quot;Shape&quot;] tiltiP_buffer=tiltiP_buffer[,&quot;Shape&quot;] visi_buferi=rbind(caurtekas_buffer,tiltiL_buffer,tiltiP_buffer) # caurumosana visi_buferi$vertiba=exactextractr::exact_extract(reljefs,visi_buferi,&quot;min&quot;) templis=raster::raster(template) caurumi=fasterize::fasterize(visi_buferi,templis,field=&quot;vertiba&quot;) caurumi2=rast(caurumi) caurumains=app(c(reljefs,caurumi2),fun=&quot;min&quot;,na.rm=TRUE, overwrite=TRUE, filename=&quot;./IevadesDati/reljefs/caurtDEM_10m.tif&quot;) Ar šo DEM tālāk veikta ģeoprocesēšana reljefa depresiju atrašanai un topogrāfiskā mitruma indeksa (TWI) noteikšanai. Sākumā aprēķinātas reljefa depresijas, pieņemot, kas visas noteces, par kurām būtu jāzina, ir zināmas un ņemtas vērā (koriģētas DEM vērtības - iepriekšējais koda apgabals). Tad, sagatavots topogrāfiskā mitruma indekss un atkārtota beznoteces depresiju meklēšana: topogrāfiskā mitruma indeksa aprēķināšanai, pārskatītas reljefa beznoteces depresijas, pieļaujot līdz desmit šūnu pārrāvumiem mazākās pretestības vietās, pārējās aizpildītas; sagatavoti precizēti beznoteces depresiju un to dziļuma slāņi pēc plūsmas pārrāvumu iestrādāšanas; papildus drošībai, pirmā soļa rezultātam atkārtota reljefa depresiju meklēšana un aizpildīšana (Wang and Liu, 2006); trešā soļa rezultāts izmantots specifiskā sateces baseina noteikšanai, izmantojot d-infinity plūsmas dalīšanos; kombinējot specifiskā sateces baseina slāni ar nogāžu slīpumu slāni, aprēķināts topogrāfiskā mitruma indekss. To grafiski izvērtējot ir konstatētas atsevišķas ekstrēmas vērtības, kuras ierobežotas līdz 20. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)){install.packages(&quot;exactextractr&quot;);require(exactextractr)} if(!require(whitebox)){install.packages(&quot;whitebox&quot;);require(whitebox)} # reference template=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # DEM caurumainis=rast(&quot;./IevadesDati/reljefs/caurtDEM_10m.tif&quot;) # Sinks wbt_sink(input = &quot;./IevadesDati/reljefs/caurtDEM_10m.tif&quot;, output = &quot;./IevadesDati/reljefs/Sink_10m.tif&quot;, verbose_mode = FALSE,zero_background = TRUE) sinks=rast(&quot;./IevadesDati/reljefs/Sink_10m.tif&quot;) sinks2 &lt;- ifel(sinks &gt;= 1, 1, sinks, filename=&quot;./IevadesDati/reljefs/SinkYN_10m.tif&quot;) # Depth-in-Sink wbt_depth_in_sink(dem=&quot;./IevadesDati/reljefs/caurtDEM_10m.tif&quot;, output=&quot;./IevadesDati/reljefs/DiS_10m.tif&quot;, zero_background = TRUE) dis=rast(&quot;./IevadesDati/reljefs/DiS_10m.tif&quot;) # TWI ## breaching wbt_breach_depressions_least_cost( dem = &quot;./IevadesDati/reljefs/caurtDEM_10m.tif&quot;, output = &quot;./IevadesDati/reljefs/caurtDEM_breachedF.tif&quot;, dist = 10, fill = TRUE) ## breached sinks un depth in sinks wbt_breach_depressions_least_cost( dem = &quot;./IevadesDati/reljefs/caurtDEM_10m.tif&quot;, output = &quot;./IevadesDati/reljefs/caurtDEM_breachedNF.tif&quot;, dist = 10, fill = FALSE) wbt_depth_in_sink(dem=&quot;./IevadesDati/reljefs/caurtDEM_breachedNF.tif&quot;, output=&quot;./IevadesDati/reljefs/DiS_breached_10m.tif&quot;, zero_background = TRUE) wbt_sink(input = &quot;./IevadesDati/reljefs/caurtDEM_breachedNF.tif&quot;, output = &quot;./IevadesDati/reljefs/Sink_breached_10m.tif&quot;, verbose_mode = FALSE,zero_background = TRUE) sinks=rast(&quot;./IevadesDati/reljefs/Sink_breached_10m.tif&quot;) plot(sinks) sinks2 &lt;- ifel(sinks &gt;= 1, 1, sinks, filename=&quot;./IevadesDati/reljefs/SinkYN_breached_10m.tif&quot;) ### filling wbt_fill_depressions_wang_and_liu( dem = &quot;./IevadesDati/reljefs/caurtDEM_breachedF.tif&quot;, output = &quot;./IevadesDati/reljefs/caurtDEM_BreachFill.tif&quot; ) ### (d inf) flow direction wbt_d_inf_flow_accumulation(input = &quot;./IevadesDati/reljefs/caurtDEM_BreachFill.tif&quot;, output = &quot;./IevadesDati/reljefs/caurtDEM_DInfAccu_SCA.tif&quot;, out_type = &quot;Specific Contributing Area&quot;) ### twi wbt_wetness_index(sca = &quot;./IevadesDati/reljefs/caurtDEM_DInfAccu_SCA.tif&quot;, slope = &quot;./IevadesDati/reljefs/Slope_10m.tif&quot;, output = &quot;./IevadesDati/reljefs/TWI_caurtDEM.tif&quot;) twi=rast(&quot;./IevadesDati/reljefs/TWI_caurtDEM.tif&quot;) hist(twi) # vietumis ir sevišķi ekscesīvas vērtības twi2=ifel(twi&gt;20,20,twi) twi2x=ifel(is.na(twi2)&amp;!is.na(template),20,twi2) writeRaster(twi2x,filename=&quot;./IevadesDati/reljefs/TWI_lim20_caurtDEM.tif&quot;) Tā kā sākotnējos ievades DEM ir bijusi veikta ūdeņu aizpildīšana ar interpolācijas pieejām, ūdensobjektos ir redzams izteikts reljefs, no kura ir nepieciešams atbrīvoties. Tas darīts ar vidējās vērtības ievietošanu šajos daudzstūros. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)){install.packages(&quot;exactextractr&quot;);require(exactextractr)} if(!require(whitebox)){install.packages(&quot;whitebox&quot;);require(whitebox)} # reference template=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) # ūdeņu sakārtošana udeni=st_read(&quot;./IevadesDati/topo/Topo10_v3_12_07_2016.gdb/&quot;, layer=&quot;hidro_A&quot;) slope=rast(&quot;./Rastri_10m/Slope_10m.tif&quot;) aspect=rast(&quot;./Rastri_10m/Aspect_10m.tif&quot;) twi=rast(&quot;./IevadesDati/reljefs/TWI_lim20_caurtDEM.tif&quot;) dis=rast(&quot;./IevadesDati/reljefs/DiS_breached_10m.tif&quot;) templis=raster::raster(template) udeni$slopes=exactextractr::exact_extract(slope,udeni,&quot;mean&quot;) caurumi_slope=fasterize::fasterize(udeni,templis,field=&quot;slopes&quot;) udeni$aspect=exactextractr::exact_extract(aspect,udeni,&quot;mean&quot;) caurumi_aspect=fasterize::fasterize(udeni,templis,field=&quot;aspect&quot;) udeni$twis=exactextractr::exact_extract(twi,udeni,&quot;mean&quot;) caurumi_TWI=fasterize::fasterize(udeni,templis,field=&quot;twis&quot;) udeni$disi=exactextractr::exact_extract(dis,udeni,&quot;mean&quot;) caurumi_DiS=fasterize::fasterize(udeni,templis,field=&quot;disi&quot;) caurumi_slope2=rast(caurumi_slope) caurumains_slope=app(c(caurumi_slope2,slope),fun=&quot;first&quot;,na.rm=TRUE, overwrite=TRUE, filename=&quot;./IevadesDati/reljefs/Slope_udeni_10m.tif&quot;) caurumains_slope=terra::rast(&quot;./IevadesDati/reljefs/Slope_udeni_10m.tif&quot;) caurumains_slope2=terra::mask(caurumains_slope,template, overwrite=TRUE, filename=&quot;./Rastri_10m/Slope_udeni2_10m.tif&quot;) caurumi_aspect2=rast(caurumi_aspect) caurumi_aspect=app(c(caurumi_aspect2,aspect),fun=&quot;first&quot;,na.rm=TRUE, overwrite=TRUE, filename=&quot;./IevadesDati/reljefs/Aspect_udeni_10m.tif&quot;) caurumains_aspect=terra::rast(&quot;./IevadesDati/reljefs/Aspect_udeni_10m.tif&quot;) caurumains_aspect2=terra::mask(caurumains_aspect,template, overwrite=TRUE, filename=&quot;./Rastri_10m/Aspect_udeni2_10m.tif&quot;) caurumi_DiS2=rast(caurumi_DiS) caurumains_DiS=app(c(caurumi_DiS2,dis),fun=&quot;first&quot;,na.rm=TRUE, overwrite=TRUE, filename=&quot;./IevadesDati/reljefs/DiS_udeni_10m.tif&quot;) caurumains_DiS=terra::rast(&quot;./IevadesDati/reljefs/DiS_udeni_10m.tif&quot;) caurumains_DiS2=terra::mask(caurumains_DiS,template, overwrite=TRUE, filename=&quot;./Rastri_10m/DiS_udeni2_10m.tif&quot;) caurumi_TWI2=rast(caurumi_TWI) caurumains_TWI=app(c(caurumi_TWI2,twi),fun=&quot;first&quot;,na.rm=TRUE, overwrite=TRUE, filename=&quot;./IevadesDati/reljefs/TWI_udeni_10m.tif&quot;) caurumains_TWI=terra::rast(&quot;./IevadesDati/reljefs/TWI_udeni_10m.tif&quot;) caurumains_TWI2=terra::mask(caurumains_TWI,template, overwrite=TRUE, filename=&quot;./Rastri_10m/TWI_udeni2_10m.tif&quot;) 3.2.2 Ainava Šajā vingrinājumā “ainava” ir dažādu zemes seguma un lietojuma veidu klašu pārstāvniecība, kurā svarīga ir šo klašu zīmēšanas secība, jo nereti dažādu avotu telpiskajiem datiem ir savstarpēja robežu neatbilstība, kas liek risināt gan to savstarpējo pārklāšanos (1), gan aizpildīt robus vietām, par kurām nav datubāzu informāicja (2), un izvēle par objektu uzsvēršanu ar kādu apstrādi, piemēram, buferēšanu, jo daļa vides raksturošanai (jo sevišķi, malas efektu) nozīmīgu elementu var būt ar tik mazu laukumu vai tādu novietojumu, ka rasterizāicjas procesā tie pazūd (3). Pamata ainavas slānim nozīme ir arī kalpot kā maskai turpmāko vides aprakstu sagatavošanā. Šeit raksturota pamata (vienkāršas) ainavas izstrāde un sekojošajās apakšnodaļās tās bagātināšana ar klasēm specifiskākiem vides ekoģeogrāfiskajiem mainīgajiem. Vienkāršā ainava saglabāta failā Ainava_vienk_mask.tif, kurā esošās klases un to izveidošanas procedūra raksturota sekojošajā uzskaitījumā: klase 100 - ceļi: dažādu avotu ceļi, aizpildīta secībā - dominē pār klasēm ar lielāku vērtību, lai nepazustu relatīvi neliela izmēra objekti un nodrošinātu informāciju par malām. Šīs klases izveidošanai apvienoti: – topogrāfiskās kartes slāņi road_A un road_L (izņemot mazāko platuma grupu, kura visbiežāk neveido vienlaidus pārrāvumu vainagu klājā, skatīt atlasi), pirms rasterizēšanas tos buferējot par 10 m; – LVM atvērto datu slāņi LVM_MEZA_AUTOCELI, LVM_ATTISTAMIE_AUTOCELI, LVM_APGRIESANAS_LAUKUMI, LVM_IZMAINISANAS_VIETAS un LVM_NOBRAUKTUVES, tās buferējot par 10 m. – nav izmantota Meža valsts reģistra informācija par dabiskajām brauktuvēm, jo tās visbiežāk neveido vienlaidus pārrāvumu vainagu klājā. Šī reģistra informācija par ceļiem ir arī pārējos resursos, tā nav dublēta. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 100, kuru failā 100_celi.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) #poly celi_topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_road_A.parquet&quot;) celi_topo=celi_topo %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) ctb=st_buffer(celi_topo,dist=10) r_celi_topo=fasterize(ctb,template_r,field=&quot;yes&quot;) # pts nobrauktuves=st_read(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades/LVM_NOBRAUKTUVES/LVM_NOBRAUKTUVES_Shape.shp&quot;) nobrauktuves=nobrauktuves %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) izmainisanas=st_read(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades/LVM_IZMAINISANAS_VIETAS/LVM_IZMAINISANAS_VIETAS_Shape.shp&quot;) izmainisanas=izmainisanas %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) apgriesanas=st_read(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades/LVM_APGRIESANAS_LAUKUMI/LVM_APGRIESANAS_LAUKUMI_Shape.shp&quot;) apgriesanas=apgriesanas %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) cp=rbind(nobrauktuves,izmainisanas,apgriesanas) cpb=st_buffer(cp,dist=10) r_celi_pts=fasterize(cpb,template_r,field=&quot;yes&quot;) # lines meza_autoceli=st_read(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades/LVM_MEZA_AUTOCELI/LVM_MEZA_AUTOCELI_Shape.shp&quot;) meza_autoceli=meza_autoceli %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) attistamie=st_read(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades/LVM_ATTISTAMIE_AUTOCELI/LVM_ATTISTAMIE_AUTOCELI_Shape.shp&quot;) attistamie=attistamie %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) topo_lines=st_read_parquet(&quot;./IevadesDati/topo/Topo_roadL.parquet&quot;) topo_lines=topo_lines %&gt;% mutate(yes=100) %&gt;% dplyr::select(yes) cl=bind_rows(meza_autoceli,attistamie,topo_lines) cl=cl %&gt;% dplyr::select(yes) clb=st_buffer(cl,dist=10) r_celi_lines=fasterize(clb,template_r,field=&quot;yes&quot;) # liekā aizvākšana rm(apgriesanas) rm(attistamie) rm(celi_topo) rm(topo_lines) rm(ctb) rm(cl) rm(clb) rm(cp) rm(cpb) rm(izmainisanas) rm(meza_autoceli) rm(nobrauktuves) # ģeometriju rasterizēšana t_celi_topo=rast(r_celi_topo) writeRaster(t_celi_topo,&quot;./100a.tif&quot;) t_celi_pts=rast(r_celi_pts) writeRaster(t_celi_pts,&quot;./100b.tif&quot;) t_celi_lines=rast(r_celi_lines) writeRaster(t_celi_lines,&quot;./100c.tif&quot;) # liekā aizvākšana rm(r_celi_lines) rm(r_celi_pts) rm(r_celi_topo) rm(t_celi_lines) rm(t_celi_pts) rm(t_celi_topo) # apvienošana a100=rast(&quot;./IevadesDati/ainava/100a.tif&quot;) b100=rast(&quot;./IevadesDati/ainava/100b.tif&quot;) c100=rast(&quot;./IevadesDati/ainava/100c.tif&quot;) rastri=sprc(a100,b100,c100) rastrs_celi=terra::merge(rastri, filename=&quot;./IevadesDati/ainava/100_celi.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(a100) rm(b100) rm(c100) rm(rastri) rm(rastrs_celi) klase 200 - ūdeņi: dažādu avotu ūdensobjekti, aizpildīta secībā - dominē pār klasēm ar lielāku vērtību, lai nepazustu relatīvi neliela izmēra objekti un nodrošinātu informāciju par malām. Šīs klases izveidošanai apvienoti: – topogrāfiskās kartes slāņi hidro_A un hidro_L (buferēts par 5 m); – MKIS slānis Ditches, to buferējot par 3 m; – LVM atvērto datu slāņi LVM_GRAVJI, tās buferējot par 5 m. – nav izmantota Meža valsts reģistra informācija par grāvjiem, jo tai ir arī pārējos resursos, vai tik nelielai, ka nerada vienlaidus pārrāvumu koku vainagu klājā. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 200, kuru failā 200_udens_premask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) # topo topo_udens_poly=st_read_parquet(&quot;./IevadesDati/topo/Topo_hidroA.parquet&quot;) topo_udens_poly=topo_udens_poly %&gt;% mutate(yes=200) %&gt;% dplyr::select(yes) %&gt;% st_transform(crs=3059) topo_udens_lines=st_read_parquet(&quot;./IevadesDati/topo/Topo_hidroL.parquet&quot;) topo_udens_lines=topo_udens_lines %&gt;% mutate(yes=200) %&gt;% st_buffer(dist=5) %&gt;% dplyr::select(yes) %&gt;% st_transform(crs=3059) topo_udens=rbind(topo_udens_poly,topo_udens_lines) r_topo_udens=fasterize(topo_udens,template_r,field=&quot;yes&quot;) raster::writeRaster(r_topo_udens, &quot;./200_topo.tif&quot;, progress=&quot;text&quot;) # liekā aizvākšana rm(topo_udens_lines) rm(topo_udens_poly) rm(topo_udens) rm(r_topo_udens) # mkis mkis_gravji=st_read(&quot;./IevadesDati/MKIS/MKIS_20180612.gdb/&quot;,layer=&quot;Ditches&quot;) ensure_MULTILINESTRING &lt;- function(X) { tmp1 &lt;- tempfile(fileext = &quot;.gpkg&quot;) tmp2 &lt;- tempfile(fileext = &quot;.gpkg&quot;) st_write(X, tmp1) ogr2ogr(tmp1, tmp2, f = &quot;GPKG&quot;, nlt = &quot;MULTILINESTRING&quot;) Y &lt;- st_read(tmp2) st_sf(st_drop_geometry(X), geom = st_geometry(Y)) } mkis_gravji2 &lt;- ensure_MULTILINESTRING(mkis_gravji) mkis_gravji3 = mkis_gravji2[!st_is_empty(mkis_gravji2),,drop=FALSE] # 2 geom validity=st_is_valid(mkis_gravji3) table(validity) # OK mkis_gravji=mkis_gravji3 %&gt;% mutate(yes=200) %&gt;% st_buffer(dist=3) %&gt;% dplyr::select(yes) r_mkis_udens=fasterize(mkis_gravji,template_r,field=&quot;yes&quot;) raster::writeRaster(r_mkis_udens, &quot;./IevadesDati/ainava/200_mkis.tif&quot;, progress=&quot;text&quot;) # liekā aizvākšana rm(mkis_gravji) rm(mkis_gravji2) rm(mkis_gravji3) rm(r_mkis_udens) rm(validity) # lvm lvm_gravji=st_read(&quot;./IevadesDati/LVM_AtvertieDati/lejupielades/LVM_GRAVJI/LVM_GRAVJI_Shape.shp&quot;) lvm_gravji=lvm_gravji %&gt;% mutate(yes=200) %&gt;% st_buffer(dist=5) %&gt;% dplyr::select(yes) r_lvm_gravji=fasterize(lvm_gravji,template_r,field=&quot;yes&quot;) raster::writeRaster(r_lvm_gravji, &quot;./IevadesDati/ainava/200_lvm.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(lvm_gravji) rm(r_lvm_gravji) # apvienojums a200=rast(&quot;./IevadesDati/ainava/200_topo.tif&quot;) b200=rast(&quot;./IevadesDati/ainava/200_mkis.tif&quot;) c200=rast(&quot;./IevadesDati/ainava/200_lvm.tif&quot;) rastri_udens=sprc(a200,b200,c200) rastrs_udens=terra::merge(rastri_udens, filename=&quot;./IevadesDati/ainava/200_udens_premask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(a200) rm(b200) rm(c200) rm(rastri_udens) rm(rastrs_udens) klase 300 - lauki: lauksaimniecības zemes LAD lauku blokos aizpildīta secībā - dominē pār klasēm ar lielāku vērtību, tomēr pēc pamata klašu izveidošanas, robu aizpildīšanā papildināta ar informāciju no Dynamic World. Šīs klases izveidošanai apvienoti: – LAD lauku informācijas slānis, kurš, sekojot pieņemtajam lēmumam par grupējumu (nedaudz plašāk šeit, klases apskatāmas šeit), dalīts trīs plašās grupās (pārklāšanās secībā): – aramzemes ar klases kodu 310; – papuves ar klases kodu 320; – zālāji ar klases kodu 330; – pamata ainavā augļudārzi un ilggadīgie krūmveida stādījumi ievietoti citās ainavas klasēs. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 300 ar tās apakšklasēm, kuru failā 300_lauki_premask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) # lad lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) ## aramzemes amazemem=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;aramz&quot;)) aramzemes=lad %&gt;% filter(PRODUCT_CODE %in% amazemem$kods) %&gt;% mutate(yes=310) %&gt;% dplyr::select(yes) r_aramzemes_lad=fasterize(aramzemes,template_r,field=&quot;yes&quot;) raster::writeRaster(r_aramzemes_lad, &quot;./IevadesDati/ainava/310_aramzemes_lad.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(amazemem) rm(aramzemes) rm(r_aramzemes_lad) ## papuves papuvem=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;papuv&quot;)) papuves=lad %&gt;% filter(PRODUCT_CODE %in% papuvem$kods) %&gt;% mutate(yes=320) %&gt;% dplyr::select(yes) r_papuves_lad=fasterize(papuves,template_r,field=&quot;yes&quot;) raster::writeRaster(r_papuves_lad, &quot;./IevadesDati/ainava/320_papuves_lad.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(papuvem) rm(papuves) rm(r_papuves_lad) ## zalaji zalajiem=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;zālā&quot;)) zalaji=lad %&gt;% filter(PRODUCT_CODE %in% zalajiem$kods) %&gt;% mutate(yes=330) %&gt;% dplyr::select(yes) r_zalaji_lad=fasterize(zalaji,template_r,field=&quot;yes&quot;) raster::writeRaster(r_zalaji_lad, &quot;./IevadesDati/ainava/330_zalaji_lad.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(zalajiem) rm(zalaji) rm(r_zalaji_lad) # apvienojums a300=rast(&quot;./IevadesDati/ainava/310_aramzemes_lad.tif&quot;) b300=rast(&quot;./IevadesDati/ainava/320_papuves_lad.tif&quot;) c300=rast(&quot;./IevadesDati/ainava/330_zalaji_lad.tif&quot;) rastri_laukiem=sprc(a300,b300,c300) rastrs_lauki=terra::merge(rastri_laukiem, filename=&quot;./IevadesDati/ainava/300_lauki_premask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(lad) rm(lad_klasem) rm(a300) rm(b300) rm(c300) rm(rastri_laukiem) rm(rastrs_lauki) klase 400 - mazdārziņi un augļudārzi, vasarnīcas, aizpildīta secībā - dominē pār klasēm ar lielāku vērtību. Šīs klases izveidošanai apvienoti (pārklāšanās secībā): – topogrāfiskās kartes slānis landus_A, kura rezultāts kodēts ar 410; – LAD lauku informācijas slāņa grupa (nedaudz plašāk par grupējumu šeit, klases apskatāmas šeit) “augļudārzi”, kura rezultāts kodēts ar 420. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 400, kuru failā 400_vasarnicas_premask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) # topo darzini_topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_landusA.parquet&quot;) table(darzini_topo$FNAME,useNA=&quot;always&quot;) darzini_topo=darzini_topo %&gt;% filter(FNAME %in% c(&quot;poligons_Augļudārzs&quot;,&quot;poligons_Sakņudārzs&quot;, &quot;poligons_Ogulājs&quot;)) %&gt;% mutate(yes=410) %&gt;% dplyr::select(yes) r_darzini_topo=fasterize(darzini_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_darzini_topo, &quot;./IevadesDati/ainava/410_darzini_topo.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(darzini_topo) rm(r_darzini_topo) # lad lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) table(lad_klasem$SDM_grupa_sakums,useNA=&quot;always&quot;) augludarziem=lad_klasem %&gt;% filter(SDM_grupa_sakums==&quot;augļudārzi&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad=lad %&gt;% filter(PRODUCT_CODE %in% augludarziem$kods) %&gt;% mutate(yes=420) %&gt;% dplyr::select(yes) r_darzini_lad=fasterize(lad,template_r,field=&quot;yes&quot;) raster::writeRaster(r_darzini_lad, &quot;./IevadesDati/ainava/420_darzini_lad.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(lad_klasem) rm(augludarziem) rm(lad) rm(r_darzini_lad) # apvienojums a400=rast(&quot;./IevadesDati/ainava/410_darzini_topo.tif&quot;) b400=rast(&quot;./IevadesDati/ainava/420_darzini_lad.tif&quot;) rastri_vasarnicam=sprc(a400,b400) rastrs_vasarnicas=terra::merge(rastri_vasarnicam, filename=&quot;./IevadesDati/ainava/400_varnicas_premask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(a400) rm(b400) rm(rastri_vasarnicam) rm(rastrs_vasarnicas) klase 500 - apbūve: apbūvētās platības, aizpildīta beigās, izmantojot informāciju no Dynamic World par vietām, kuras nav nosegtas ar citām klasēm. klase 600 - meži, krūmāji, izcirtumi: ar kokiem un krūmiem klātās platības un izcirtumi un iznīkušās mežaudzes, aizpildīta secībā - dominē pār klasēm ar lielāku vērtību. Šīs klases izveidošanai apvienoti (pārklāšanās secībā): – The Global Forest Watch slānī reģistrētās koku vainagu seguma izzušanas kopš 2020. gada, kura rezultāts kodēts ar 610; – Meža valsts reģistrā atzīmētie izcirtumi un iznīkušās audzes, kura rezultāts kodēts ar 610; – Meža valsts reģistrā atzīmētās mežaudzes, kas ir zemākas par 5 m un sēklu ieguves plantācijas, kura rezultāts kodēts ar 620; – topogrāfiskās kartes slāņa flora_L ar krūmiem saistītās klases, kas buferētas par 10 m, kura rezultāts kodēts ar 620; – topogrāfiskās kartes slāņi landus_A klase “poligons_Krūmājs”, kura rezultāts kodēts ar 620; – LAD lauku informācijas slāņa grupa (nedaudz plašāk par grupējumu šeit, klases apskatāmas šeit) “ilggadīgie krūmveida stādījumi”, kura rezultāts kodēts ar 620; – Meža valsts reģistrā atzīmētās mežaudzes augstumā no 5 m, rezultāts kodēts ar 630; – topogrāfiskās kartes slāņa landus_A klases “poligons_Parks”, “poligons_Meza_kapi”, “poligons_Kapi”, kura rezultāts kodēts ar 640; – topogrāfiskās kartes slāņa flora_L ar kokiem saistītās klases, kas buferētas par 10 m, kura rezultāts kodēts ar 640; – Palsar Forests slānis, kura rezultāts kodēts ar 630. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 600, kuru failā 600_meziem_premask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) # mvr mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) # izcirtumi izcirtumi=mvr %&gt;% filter(zkat %in% c(&quot;12&quot;,&quot;14&quot;)) %&gt;% mutate(yes=610) %&gt;% dplyr::select(yes) r_izcirtumi_mvr=fasterize(izcirtumi,template_r,field=&quot;yes&quot;) raster::writeRaster(r_izcirtumi_mvr, &quot;./IevadesDati/ainava/610_izcirtumi_mvr.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(izcirtumi) rm(r_izcirtumi_mvr) # zemās audzes # arī zkat 16 zemas_audzes=mvr %&gt;% filter((zkat ==&quot;10&quot; &amp; h10&lt;5)|zkat==&quot;16&quot;) %&gt;% mutate(yes=620) %&gt;% dplyr::select(yes) r_zemas_mvr=fasterize(zemas_audzes,template_r,field=&quot;yes&quot;) raster::writeRaster(r_zemas_mvr, &quot;./IevadesDati/ainava/620_zemas_mvr.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(zemas_audzes) rm(r_zemas_mvr) # augstās audzes augstas_audzes=mvr %&gt;% filter(zkat ==&quot;10&quot; &amp; h10&gt;=5) %&gt;% mutate(yes=630) %&gt;% dplyr::select(yes) r_augstas_mvr=fasterize(augstas_audzes,template_r,field=&quot;yes&quot;) raster::writeRaster(r_augstas_mvr, &quot;./IevadesDati/ainava/630_augstas_mvr.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(augstas_audzes) rm(r_augstas_mvr) rm(mvr) # tcl - kopš 2020 tcl=rast(&quot;./Rastri_10m/TreeCoverLossYear.tif&quot;) tcl2=ifel(tcl&lt;20,NA,610, filename=&quot;./IevadesDati/ainava/610_TCL.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(tcl) rm(tcl2) # palsar palsar=rast(&quot;./Rastri_10m/Palsar_Forests.tif&quot;) palsar2=ifel(palsar==1,630,NA, filename=&quot;./IevadesDati/ainava/630_Palsar.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(palsar) rm(palsar2) # lad lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) table(lad_klasem$SDM_grupa_sakums,useNA=&quot;always&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) krumiem=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;krūmv&quot;)) krumi=lad %&gt;% filter(PRODUCT_CODE %in% krumiem$kods) %&gt;% mutate(yes=620) %&gt;% dplyr::select(yes) r_krumi_lad=fasterize(krumi,template_r,field=&quot;yes&quot;) raster::writeRaster(r_krumi_lad, &quot;./IevadesDati/ainava/620_krumi_lad.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(lad_klasem) rm(lad) rm(krumiem) rm(krumi) rm(r_krumi_lad) # topo - pkk pkk_topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_landusA.parquet&quot;) table(pkk_topo$FNAME,useNA=&quot;always&quot;) pkk_topo=pkk_topo %&gt;% filter(FNAME %in% c(&quot;poligons_Parks&quot;,&quot;poligons_Meza_kapi&quot;,&quot;poligons_Kapi&quot;)) %&gt;% mutate(yes=640) %&gt;% dplyr::select(yes) r_pkk_topo=fasterize(pkk_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_pkk_topo, &quot;./IevadesDati/ainava/640_pkk_topo.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(pkk_topo) rm(r_pkk_topo) # topo - krūmi krumi_topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_landusA.parquet&quot;) table(krumi_topo$FNAME,useNA=&quot;always&quot;) krumi_topo=krumi_topo %&gt;% filter(FNAME %in% c(&quot;poligons_Krūmājs&quot;)) %&gt;% mutate(yes=620) %&gt;% dplyr::select(yes) r_krumi_topo=fasterize(krumi_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_krumi_topo, &quot;./IevadesDati/ainava/620_krumi_topo.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(krumi_topo) rm(r_krumi_topo) # topo - linijkrumi un linijkoki linijas_topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_floraL.parquet&quot;) # linijkrumi krumu_linijas_topo=linijas_topo %&gt;% filter(str_detect(FNAME,&quot;Krūmu&quot;)) %&gt;% mutate(yes=620) %&gt;% st_buffer(dist=10) %&gt;% dplyr::select(yes) r_krumu_linijas_topo=fasterize(krumu_linijas_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_krumu_linijas_topo, &quot;./IevadesDati/ainava/620_KrumuLinijas_topo.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(krumu_linijas_topo) rm(r_krumu_linijas_topo) # linijkoki koku_linijas_topo=linijas_topo %&gt;% filter(str_detect(FNAME,&quot;Koku&quot;)) %&gt;% mutate(yes=640) %&gt;% st_buffer(dist=10) %&gt;% dplyr::select(yes) r_koku_linijas_topo=fasterize(koku_linijas_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_koku_linijas_topo, &quot;./IevadesDati/ainava/640_KokuLinijas_topo.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(koku_linijas_topo) rm(r_koku_linijas_topo) rm(linijas_topo) # apvienosana r_krumi_lad=rast(&quot;./IevadesDati/ainava/620_krumi_lad.tif&quot;) r_pkk_topo=rast(&quot;./IevadesDati/ainava/640_pkk_topo.tif&quot;) r_krumi_topo=rast(&quot;./IevadesDati/ainava/620_krumi_topo.tif&quot;) r_krumu_linijas_topo=rast(&quot;./IevadesDati/ainava/620_KrumuLinijas_topo.tif&quot;) r_koku_linijas_topo=rast(&quot;./IevadesDati/ainava/640_KokuLinijas_topo.tif&quot;) r_palsar=rast(&quot;./IevadesDati/ainava/630_palsar.tif&quot;) r_tcl=rast(&quot;./IevadesDati/ainava/610_TCL.tif&quot;) r_augstas_mvr=rast(&quot;./IevadesDati/ainava/630_augstas_mvr.tif&quot;) r_zemas_mvr=rast(&quot;./IevadesDati/ainava/620_zemas_mvr.tif&quot;) r_izcirtumi_mvr=rast(&quot;./IevadesDati/ainava/610_izcirtumi_mvr.tif&quot;) rastri_meziem=sprc(r_tcl,r_izcirtumi_mvr, r_zemas_mvr,r_krumu_linijas_topo,r_krumi_topo,r_krumi_lad, r_augstas_mvr, r_pkk_topo,r_koku_linijas_topo, r_palsar) rastrs_mezi=terra::merge(rastri_meziem, filename=&quot;./IevadesDati/ainava/600_meziem_premask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(r_krumi_lad) rm(r_pkk_topo) rm(r_krumi_topo) rm(r_krumu_linijas_topo) rm(r_koku_linijas_topo) rm(r_palsar) rm(r_tcl) rm(r_augstas_mvr) rm(r_zemas_mvr) rm(r_izcirtumi_mvr) rm(rastri_meziem) rm(rastrs_mezi) klase 700 - mitrāji: apvienojot ar niedrājiem, purviem un bebrainēs saistītos ģeotelpiskos datus, aizpildīta secībā - dominē pār klasēm ar lielāku vērtību. Šīs klases izveidošanai apvienoti (pārklāšanās secībā): – topogrāfiskās kartes slāņa landus_A klases “Meldrājs_ūdenī_poligons”, “poligons_Grīslājs”, “poligons_Meldrājs”, “poligons_Nec_purvs_grīslājs”, “poligons_Nec_purvs_meldrājs”, “Sēklis_poligons”, kura rezultāts kodēts ar 720; – topogrāfiskās kartes slāņa landus_A klases “poligons_Nec_purvs_sūnājs”, “poligons_Sūnājs”, kuru rezultāts kodēts ar 710; – topogrāfiskās kartes slāņa swamp_A, kura rezultāts kodēts ar 710; – Meža valsts reģistrā atzīmētās zemes kategorijas “21”, “22”, “23”, kura rezultāts kodēts ar 710; – Meža valsts reģistrā atzīmētās zemes kategorijas “41”, “42”, kura rezultāts kodēts ar 730. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 700, kuru failā 700_mitraji_premask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) # topo topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_landusA.parquet&quot;) table(topo$FNAME,useNA=&quot;always&quot;) ## niedrāji niedraji_topo=topo %&gt;% filter(FNAME %in% c(&quot;Meldrājs_ūdenī_poligons&quot;,&quot;poligons_Grīslājs&quot;, &quot;poligons_Meldrājs&quot;,&quot;poligons_Nec_purvs_grīslājs&quot;, &quot;poligons_Nec_purvs_meldrājs&quot;,&quot;Sēklis_poligons&quot;)) %&gt;% mutate(yes=720) %&gt;% dplyr::select(yes) r_niedraji_topo=fasterize(niedraji_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_niedraji_topo, &quot;./IevadesDati/ainava/720_niedraji_topo.tif&quot;, progress=&quot;text&quot;) # liekā aizvākšana rm(niedraji_topo) rm(r_niedraji_topo) ## purvi purvi_topo=topo %&gt;% filter(FNAME %in% c(&quot;poligons_Nec_purvs_sūnājs&quot;,&quot;poligons_Sūnājs&quot;)) %&gt;% mutate(yes=710) %&gt;% dplyr::select(yes) topo_purvi=st_read_parquet(&quot;./IevadesDati/topo/Topo_swampA.parquet&quot;) topo_purvi=topo_purvi %&gt;% mutate(yes=710) %&gt;% dplyr::select(yes) purvi=rbind(purvi_topo,topo_purvi) r_purvi_topo=fasterize(purvi,template_r,field=&quot;yes&quot;) raster::writeRaster(r_purvi_topo, &quot;./IevadesDati/ainava/710_purvi_topo.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(purvi_topo) rm(topo_purvi) rm(purvi) rm(r_purvi_topo) # mvr mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) # sūnu, zālu pārejas purvi mvr_purvi=mvr %&gt;% filter(zkat %in% c(&quot;21&quot;,&quot;22&quot;,&quot;23&quot;)) %&gt;% mutate(yes=710) %&gt;% dplyr::select(yes) r_purvi_mvr=fasterize(mvr_purvi,template_r,field=&quot;yes&quot;) raster::writeRaster(r_purvi_mvr, &quot;./IevadesDati/ainava/710_purvi_mvr.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(mvr_purvi) rm(r_purvi_mvr) # bebraines un pārplūstoši klajumi mvr_bebri=mvr %&gt;% filter(zkat %in% c(&quot;41&quot;,&quot;42&quot;)) %&gt;% mutate(yes=730) %&gt;% dplyr::select(yes) r_bebri_mvr=fasterize(mvr_bebri,template_r,field=&quot;yes&quot;) raster::writeRaster(r_bebri_mvr, &quot;./IevadesDati/ainava/730_bebri_mvr.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(mvr_bebri) rm(r_bebri_mvr) rm(mvr) # apvienosana r_niedraji_topo=rast(&quot;./IevadesDati/ainava/720_niedraji_topo.tif&quot;) r_purvi_topo=rast(&quot;./IevadesDati/ainava/710_purvi_topo.tif&quot;) r_purvi_mvr=rast(&quot;./IevadesDati/ainava/710_purvi_mvr.tif&quot;) r_bebri_mvr=rast(&quot;./IevadesDati/ainava/730_bebri_mvr.tif&quot;) rastri_mitrajiem=sprc(r_niedraji_topo,r_purvi_topo,r_purvi_mvr,r_bebri_mvr) rastrs_mitraji=terra::merge(rastri_mitrajiem, filename=&quot;./IevadesDati/ainava/700_mitraji_premask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(r_niedraji_topo) rm(r_purvi_topo) rm(r_purvi_mvr) rm(r_bebri_mvr) rm(rastri_mitrajiem) rm(rastrs_mitraji) klase 800 - smiltāji un kūdras lauki: apvienojot ar smiltājiem, virsājiem un kūdras karjeriem saistītos slāņus, aizpildīta secībā - tā kā šī ir augstākā klase, tā dominē tikai pār robu aizpildīšanai izmantoto Dynamic World. Šīs klases izveidošanai apvienoti (pārklāšanās secībā): – topogrāfiskās kartes slāņa landus_A klases “poligons_Smiltājs”, “poligons_Kūdra”, kura rezultāts kodēts ar 800; – Meža valsts reģistrā atzīmētās zemes kategorijas “33”, “34”, kura rezultāts kodēts ar 730. Zemāk esošās komandu rindas izveido slāni ar ainavas klasi 800, kuru failā 800_smiltaji_premask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) smiltaji_topo=st_read_parquet(&quot;./IevadesDati/topo/Topo_landusA.parquet&quot;) table(smiltaji_topo$FNAME,useNA=&quot;always&quot;) smiltaji_topo=smiltaji_topo %&gt;% filter(FNAME %in% c(&quot;poligons_Smiltājs&quot;,&quot;poligons_Kūdra&quot;)) %&gt;% mutate(yes=800) %&gt;% dplyr::select(yes) r_smiltaji_topo=fasterize(smiltaji_topo,template_r,field=&quot;yes&quot;) raster::writeRaster(r_smiltaji_topo, &quot;./IevadesDati/ainava/800_SmiltajiKudra_topo.tif&quot;, progress=&quot;text&quot;) # liekā aizvākšana rm(smiltaji_topo) rm(r_smiltaji_topo) # mvr zkat 33 un 34 mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) smiltajiem=mvr %&gt;% filter(zkat %in% c(&quot;33&quot;,&quot;34&quot;)) %&gt;% mutate(yes=800) %&gt;% dplyr::select(yes) r_smiltaji_mvr=fasterize(smiltajiem,template_r,field=&quot;yes&quot;) raster::writeRaster(r_smiltaji_mvr, &quot;./IevadesDati/ainava/800_SmiltVirs_mvr.tif&quot;, progress=&quot;text&quot;, overwrite=TRUE) # liekā aizvākšana rm(mvr) rm(smiltajiem) rm(r_smiltaji_mvr) # apvienosana r_smiltaji_topo=rast(&quot;./IevadesDati/ainava/800_SmiltajiKudra_topo.tif&quot;) r_smiltaji_mvr=rast(&quot;./IevadesDati/ainava/800_SmiltVirs_mvr.tif&quot;) rastri_smiltajiem=sprc(r_smiltaji_topo,r_smiltaji_mvr) rastrs_smiltajiem=terra::merge(rastri_smiltajiem, filename=&quot;./IevadesDati/ainava/800_smiltaji_premask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(r_smiltaji_topo) rm(r_smiltaji_mvr) rm(rastri_smiltajiem) rm(rastrs_smiltajiem) Apvienošana un aizpildīšana. Zemāk esošās komandu rindas pareizā secībā apvieno iepriekš izveidotos slāņus ar ainavas klasēm un nodrošina robu aizpildīšanu ar atbilstoši klasificētu Dynamic World 2023. gada aprīļa-augusta kompozītu, kuru, pēc maskēšanas tikai analīzes telpai, failā Ainava_vienk_mask.tif saglabā turpmākam darbam. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(gdalUtilities)){install.packages(&quot;gdalUtilities&quot;);require(gdalUtilities)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) # DW pildījums dynworld=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2023_apraug.tif&quot;) klases=matrix(c(0,200, 1,620, 2,330, 3,720, 4,310, 5,710, 6,500, 7,800, 8,500),ncol=2,byrow=TRUE) dw2=terra::classify(dynworld,klases) writeRaster(dw2, &quot;./IevadesDati/ainava/DW_reclass.tif&quot;, overwrite=TRUE) celi=rast(&quot;./IevadesDati/ainava/100_celi.tif&quot;) udeni=rast(&quot;./IevadesDati/ainava/200_udens_premask.tif&quot;) lauki=rast(&quot;./IevadesDati/ainava/300_lauki_premask.tif&quot;) vasarnicas=rast(&quot;./IevadesDati/ainava/400_varnicas_premask.tif&quot;) mezi=rast(&quot;./IevadesDati/ainava/600_meziem_premask.tif&quot;) mitraji=rast(&quot;./IevadesDati/ainava/700_mitraji_premask.tif&quot;) smiltaji=rast(&quot;./IevadesDati/ainava/800_smiltaji_premask.tif&quot;) dw2=rast(&quot;./IevadesDati/ainava/DW_reclass.tif&quot;) rastri_ainavai=sprc(celi,udeni,lauki,vasarnicas,mezi,mitraji,smiltaji,dw2) rastrs_ainava=terra::merge(rastri_ainavai, filename=&quot;./IevadesDati/ainava/Ainava_vienkarsa.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(celi) rm(udeni) rm(lauki) rm(vasarnicas) rm(mezi) rm(mitraji) rm(smiltaji) rm(klases) rm(dynworld) rm(dw2) rm(rastri_ainavai) rm(rastrs_ainava) # maskēšana rastrs_ainava=rast(&quot;./IevadesDati/ainava/Ainava_vienkarsa.tif&quot;) masketa_ainava=terra::mask(rastrs_ainava, template_t, filename=&quot;./IevadesDati/ainava/Ainava_vienk_mask.tif&quot;, overwrite=TRUE) masketa_ainava2=terra::mask(rastrs_ainava, template_t, filename=&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;, overwrite=TRUE) # liekā aizvākšana rm(rastrs_ainava) rm(masketa_ainava) 3.2.2.1 Lauku ainava Šajā apakšnodaļā apkopoti ar lauku ainavu saistītie ievades produkti - 10 m izšķirtspējā sagatavoti rastra slāņi, kas cieši saistīti ar virsnodaļā aprakstīto ainavu un nepieciešami tālākai EGV sagatavošanai. Lai atvieglotu meklēšanu un atsaukšanos, tie iedalīti vēl zamāka līmeņa apakšnodaļās. Sekojošajās apakšnodaļās esošajos kodu apgabalos sākuma daļa atkārtojas. Nenoliedzami, tas nomāc svarīgo - slānim specifisko daļu. Tomēr tas ļauj katru no tiem uztvert un izpildīt kā neatkarīgu uzdevumu, ja ir pieejami izmantojamie zemāka līmeņa slāņi, uz kuriem atsauces sniegtas aprakstos. 3.2.2.1.1 Lauku bloki Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās ir lauka blokos iekļauti poligoni; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_BlokiYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # lauku bloki lauki1=fasterize::fasterize(lad,template_r,field=&quot;yes&quot;) lauki1=rast(lauki1) laukiYN=classify(lauki1, cbind(NA, NA, 0), right=FALSE) aizpildits=terra::cover(laukiYN,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_BlokiYN.tif&quot;, overwrite=TRUE) 3.2.2.1.2 Zālāji ārpus lauku blokiem, pieskaitot bezatbalsta Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti zālāji (klase 330), bet tie neatrodas lauku blokos, izņemot tās LAD klases, kuras iedalītas grupā (lauks SDM_grupa_sakums) “zālāji (ārpus lauku blokiem un bezatbalsta platības)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_ZalajiBezatbNELAD.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # ārpus lauku blokiem esoši zālāji zalaji=ifel(ainava_t==330,1,NA) bezatb=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;ārpus lauku blokiem&quot;)) piesk=lad %&gt;% filter(PRODUCT_CODE %in% bezatb$kods) piesk2=fasterize::fasterize(piesk,template_r,field=&quot;yes&quot;) piesk2=rast(piesk2) LaukuBloki=rast(&quot;./Rastri_10m/Lauki_BlokiYN.tif&quot;) zalaji2=ifel(!is.na(zalaji)&amp;LaukuBloki==0,1,0) zalaji3=merge(piesk2,zalaji2) aizpildits=terra::cover(zalaji3,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_ZalajiBezatbNELAD.tif&quot;, overwrite=TRUE) 3.2.2.1.3 Zālāji visi Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti zālāji (klase 330); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_zalajiYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # zālāji zalajiYN=ifel(ainava_t==330,1,0, filename=&quot;./Rastri_10m/Lauki_zalajiYN.tif&quot;, overwrite=TRUE) 3.2.2.1.4 Zālāji LAD ne ppg Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās atrodas Zālāji visi un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “zālāji (kultivētie)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_ZalajiKultivetie.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # kultivētie zālāji kultivetie=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;kulti&quot;)) lad_kultivetie=lad %&gt;% filter(lad$PRODUCT_CODE %in% kultivetie$kods) zalaji_kulti=fasterize::fasterize(lad_kultivetie,template_r,field=&quot;yes&quot;) zalaji_kulti=rast(zalaji_kulti) zalajiYN=rast(&quot;./Rastri_10m/Lauki_zalajiYN.tif&quot;) zalaji_kulti2=ifel(!is.na(zalaji_kulti)&amp;zalajiYN==1,1,0) aizpildits=terra::cover(zalaji_kulti2,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_ZalajiKultivetie.tif&quot;, overwrite=TRUE) 3.2.2.1.5 Zālāji ilglaicīgie Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās atrodas Zālāji visi un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “zālāji (kultivētie)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_ZalajiIlggadigie.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # ilggadīgie zālāji ppg=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;ilgg&quot;)) lad_ppg=lad %&gt;% filter(lad$PRODUCT_CODE %in% ppg$kods) zalaji_ppg=fasterize::fasterize(lad_ppg,template_r,field=&quot;yes&quot;) zalaji_ppg=rast(zalaji_ppg) zalajiYN=rast(&quot;./Rastri_10m/Lauki_zalajiYN.tif&quot;) zalaji_ppg2=ifel(!is.na(zalaji_ppg)&amp;zalajiYN==1,1,0) aizpildits=terra::cover(zalaji_ppg2,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_ZalajiIlggadigie.tif&quot;, overwrite=TRUE) 3.2.2.1.6 Papuves Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrētas papuves (klase 320); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_papuvesYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # papuves papuvesYN=ifel(ainava_t==320,1,0, filename=&quot;./Rastri_10m/Lauki_papuvesYN.tif&quot;, overwrite=TRUE) 3.2.2.1.7 Krūmveida stādījumi Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēta klase 620 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “krūmveida ilggadīgie stādījumi”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_KrumiLAD.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # krūmveida stādījumi stadijumi=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;krūmv&quot;)) lad_krumi=lad %&gt;% filter(lad$PRODUCT_CODE %in% stadijumi$kods) krumi_lad=fasterize::fasterize(lad_krumi,template_r,field=&quot;yes&quot;) krumi_lad=rast(krumi_lad) krumi_ainava=ifel(ainava_t==620,1,0) krumi_lad2=ifel(!is.na(krumi_lad)&amp;krumi_ainava==1,1,0) aizpildits=terra::cover(krumi_lad2,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_KrumiLAD.tif&quot;, overwrite=TRUE) 3.2.2.1.8 Augļudārzi LAD Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēta klase 420 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “augļudārzi”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AugludarziLAD.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # augļudārzi LAD augludarzi=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;augļud&quot;)) lad_augludarzi=lad %&gt;% filter(lad$PRODUCT_CODE %in% augludarzi$kods) augludarzi_lad=fasterize::fasterize(lad_augludarzi,template_r,field=&quot;yes&quot;) augludarzi_lad=rast(augludarzi_lad) vasarnicas=ifel(ainava_t==420,1,0) augludarzi_lad2=ifel(!is.na(augludarzi_lad)&amp;vasarnicas==1,1,0) aizpildits=terra::cover(augludarzi_lad2,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AugludarziLAD.tif&quot;, overwrite=TRUE) 3.2.2.1.9 Aramzemes visas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēta klase 310; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemesYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # aramzemes aramzemesYN=ifel(ainava_t==310,1,0, filename=&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;, overwrite=TRUE) 3.2.2.1.10 Aramzemes: ziemas rapsis un ripsis Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās Aramzemes visas ir reģistrēta klase 1 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “aramzemes (ziemas rapsis un ripsis)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemeZiemasRapsi.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # ziemas rapši, ripši utml lad_grupa=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;ziemas rapsis&quot;)) lad_atlase=lad %&gt;% filter(lad$PRODUCT_CODE %in% lad_grupa$kods) rastrs_lad=fasterize::fasterize(lad_atlase,template_r,field=&quot;yes&quot;) rastrs_lad=rast(rastrs_lad) ainavas_maska=rast(&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;) pirmsmaskas_rastrs=ifel(!is.na(rastrs_lad)&amp;ainavas_maska==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AramzemeZiemasRapsi.tif&quot;, overwrite=TRUE) 3.2.2.1.11 Aramzemes: vasaras rapsis un ripsis + kukurūza + pākšaugi Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās Aramzemes visas ir reģistrēta klase 1 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “aramzemes (vasaras rapsis un rispsis, kukurūzas, zirņi un pupas, soja, kaņepes)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemeVasarasRapsiUTML.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # Aramzemes: vasaras rapsis un ripsis + kukurūza + pākšaugi lad_grupa=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;vasaras rapsis&quot;)) lad_atlase=lad %&gt;% filter(lad$PRODUCT_CODE %in% lad_grupa$kods) rastrs_lad=fasterize::fasterize(lad_atlase,template_r,field=&quot;yes&quot;) rastrs_lad=rast(rastrs_lad) ainavas_maska=rast(&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;) pirmsmaskas_rastrs=ifel(!is.na(rastrs_lad)&amp;ainavas_maska==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AramzemeVasarasRapsiUTML.tif&quot;, overwrite=TRUE) 3.2.2.1.12 Aramzemes: vagu un rušināmkultūras Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās Aramzemes visas ir reģistrēta klase 1 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “aramzemes (vagu un rušināmkultūru)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemeVaguRusinamkulturas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # Aramzemes: vagu un rušināmkultūras lad_grupa=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;rušin&quot;)) lad_atlase=lad %&gt;% filter(lad$PRODUCT_CODE %in% lad_grupa$kods) rastrs_lad=fasterize::fasterize(lad_atlase,template_r,field=&quot;yes&quot;) rastrs_lad=rast(rastrs_lad) ainavas_maska=rast(&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;) pirmsmaskas_rastrs=ifel(!is.na(rastrs_lad)&amp;ainavas_maska==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AramzemeVaguRusinamkulturas.tif&quot;, overwrite=TRUE) 3.2.2.1.13 Aramzemes: ne- labības, rapši, kukurūzas, pākšaugi, vagu kultūras Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās Aramzemes visas ir reģistrēta klase 1 un LAD kultūru kodi nav grupās (lauks SDM_grupa_sakums), kuru nosaukumi satur frāzes “labīb”, “rušin”, “rapsis”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemeParejas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # Aramzemes: ne- labības, rapši, kukurūzas, pākšaugi, vagu kultūras lad_grupa=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;labīb&quot;)| str_detect(SDM_grupa_sakums,&quot;rušin&quot;)| str_detect(SDM_grupa_sakums,&quot;rapsis&quot;)) lad_atlase=lad %&gt;% filter(lad$PRODUCT_CODE %in% lad_grupa$kods) rastrs_lad=fasterize::fasterize(lad_atlase,template_r,field=&quot;yes&quot;) rastrs_lad=rast(rastrs_lad) ainavas_maska=rast(&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;) pirmsmaskas_rastrs=ifel(is.na(rastrs_lad)&amp;ainavas_maska==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AramzemeParejas.tif&quot;, overwrite=TRUE) 3.2.2.1.14 Aramzemes: labība ziemāji Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās Aramzemes visas ir reģistrēta klase 1 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “aramzemes (labība-ziemāji)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemeLabibaZiemaji.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # Aramzemes: labība ziemāji lad_grupa=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;labība-ziem&quot;)) lad_atlase=lad %&gt;% filter(lad$PRODUCT_CODE %in% lad_grupa$kods) rastrs_lad=fasterize::fasterize(lad_atlase,template_r,field=&quot;yes&quot;) rastrs_lad=rast(rastrs_lad) ainavas_maska=rast(&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;) pirmsmaskas_rastrs=ifel(!is.na(rastrs_lad)&amp;ainavas_maska==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AramzemeLabibaZiemaji.tif&quot;, overwrite=TRUE) 3.2.2.1.15 Aramzemes: labība vasarāji Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās Aramzemes visas ir reģistrēta klase 1 un LAD kultūru kodi ir grupā (lauks SDM_grupa_sakums) “aramzemes (labība-vasarāji)”; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Lauki_AramzemeLabibaVasaraji.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # Aramzemes: labība vasarāji lad_grupa=lad_klasem %&gt;% filter(str_detect(SDM_grupa_sakums,&quot;labība-vasar&quot;)) lad_atlase=lad %&gt;% filter(lad$PRODUCT_CODE %in% lad_grupa$kods) rastrs_lad=fasterize::fasterize(lad_atlase,template_r,field=&quot;yes&quot;) rastrs_lad=rast(rastrs_lad) ainavas_maska=rast(&quot;./Rastri_10m/Lauki_AramzemesYN.tif&quot;) pirmsmaskas_rastrs=ifel(!is.na(rastrs_lad)&amp;ainavas_maska==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Lauki_AramzemeLabibaVasaraji.tif&quot;, overwrite=TRUE) 3.2.2.1.16 Lauku daudzveidībai Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. To veido slāņi sekojošajā secībā ar norādītajiem kodiem: kods 311 satur Aramzemes: labība vasarāji kods 312 satur Aramzemes: labība ziemāji kods 313 satur Aramzemes: vasaras rapsis un ripsis + kukurūza + pākšaugi kods 314 satur Aramzemes: ziemas rapsis un ripsis kods 315 satur Aramzemes: vagu un rušināmkultūras kods 316 satur Aramzemes: citas kods 340 satur Augļudārzi LAD kods 350 satur Krūmveida stādījumi kods 320 satur Papuves kods 331 satur Zālāji LAD ne ppg kods 332 satur Zālāji ilglaicīgie kods 333 satur Zālāji ārpus lauku blokiem, pieskaitot bezatbalsta atlikušās vietas Latvijas teritorijā aizpildītas ar vērtību 1 Zemāk esošās komandu rindas izveido failu Ainava_LaukuDaudzveidibai.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) ### Lauku daudzveidībai ---- # Aramzemes: labība-vasarāji aram1=rast(&quot;./Rastri_10m/Lauki_AramzemeLabibaVasaraji.tif&quot;) aram1=ifel(aram1==1,311,NA) # Aramzemes: labība-ziemāji aram2=rast(&quot;./Rastri_10m/Lauki_AramzemeLabibaZiemaji.tif&quot;) aram2=ifel(aram2==1,312,NA) # Aramzemes: vasaras rapsi aram3=rast(&quot;./Rastri_10m/Lauki_AramzemeVasarasRapsiUTML.tif&quot;) aram3=ifel(aram3==1,313,NA) # Aramzemes: ziemas rapsi aram4=rast(&quot;./Rastri_10m/Lauki_AramzemeZiemasRapsi.tif&quot;) aram4=ifel(aram4==1,314,NA) # Aramzemes: rusinamkulturas aram5=rast(&quot;./Rastri_10m/Lauki_AramzemeVaguRusinamkulturas.tif&quot;) aram5=ifel(aram5==1,315,NA) # Aramzemes: citas aram6=rast(&quot;./Rastri_10m/Lauki_AramzemeParejas.tif&quot;) aram6=ifel(aram6==1,316,NA) # Augļudārzi augludarzi=rast(&quot;./Rastri_10m/Lauki_AugludarziLAD.tif&quot;) augludarzi=ifel(augludarzi==1,340,NA) # Ilggadīgie krūmi krumi_lad=rast(&quot;./Rastri_10m/Lauki_KrumiLAD.tif&quot;) krumi_lad=ifel(krumi_lad==1,350,NA) # Papuves papuves=rast(&quot;./Rastri_10m/Lauki_papuvesYN.tif&quot;) papuves=ifel(papuves==1,320,NA) # Zālāji kultivētie zal1=rast(&quot;./Rastri_10m/Lauki_ZalajiKultivetie.tif&quot;) zal1=ifel(zal1==1,331,NA) # Zālāji ilggadīgie zal2=rast(&quot;./Rastri_10m/Lauki_ZalajiIlggadigie.tif&quot;) zal2=ifel(zal2==1,332,NA) # Zālāji pārējie zal3=rast(&quot;./Rastri_10m/Lauki_ZalajiBezatbNELAD.tif&quot;) zal3=ifel(zal3==1,333,NA) lauku_ainavai=sprc(aram1,aram2,aram3,aram4,aram5,aram6,augludarzi,krumi_lad, papuves,zal1,zal2,zal3) lauku_ainava=terra::merge(lauku_ainavai) lauku_daudzveidibai=terra::cover(lauku_ainava,template_t, values=NA, filename=&quot;./Rastri_10m/Ainava_LaukuDaudzveidibai.tif&quot;, overwrite=TRUE) 3.2.2.2 Mežu ainava Šajā apakšnodaļā apkopoti ar mežu ainavu saistītie ievades produkti - 10 m izšķirtspējā sagatavoti rastra slāņi, kas cieši saistīti ar virsnodaļā aprakstīto ainavu un nepieciešami tālākai EGV sagatavošanai. Lai atvieglotu meklēšanu un atsaukšanos, tie iedalīti vēl zamāka līmeņa apakšnodaļās. Sekojošajās apakšnodaļās esošajos kodu apgabalos sākuma daļa atkārtojas. Nenoliedzami, tas nomāc svarīgo - slānim specifisko daļu. Tomēr tas ļauj katru no tiem uztvert un izpildīt kā neatkarīgu uzdevumu, ja ir pieejami izmantojamie zemāka līmeņa slāņi, uz kuriem atsauces sniegtas aprakstos. 3.2.2.2.1 Oligotrofi susinātie meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 656 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 17=viršu ārenis, 18=mētru ārenis, 22=viršu kūdrenis, 23=mētru kūdrenis; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_OligoSus.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Oligotrofi susinātie meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;17&quot;,&quot;18&quot;,&quot;22&quot;,&quot;23&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,656,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_OligoSus.tif&quot;, overwrite=TRUE) 3.2.2.2.2 Oligotrofi purvaiņu meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 654 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 12=purvājs, 14=niedrājs; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_OligoPurv.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # oligotrofi purvaiņu meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;12&quot;,&quot;14&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,654,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_OligoPurv.tif&quot;, overwrite=TRUE) 3.2.2.2.3 Oligotrofi sausieņu un slapjaiņu meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 651 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 1=sils, 2=mētrājs, 3=lāns, 7=grīnis, 8=slapjais mētrājs; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_OligoSaus.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Oligotrofi sausieņu un slapjaiņu meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;7&quot;,&quot;8&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,651,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_OligoSaus.tif&quot;, overwrite=TRUE) 3.2.2.2.4 Mezotrofi sausieņu un slapjaiņu meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 652 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 4=damaksnis, 9=slapjais damaksnis; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_MezoSaus.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Mezotrofi sausieņu un slapjaiņu meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;4&quot;,&quot;9&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,652,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_MezoSaus.tif&quot;, overwrite=TRUE) 3.2.2.2.5 Eitrofi susinātie meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 657 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 19=šaurlapju ārenis, 21=platlapju ārenis, 24=šaurlapju kūdrenis, 25=platlapju kūdrenis; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_EitrSus.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Eitrofi susinātie meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;19&quot;,&quot;21&quot;,&quot;24&quot;,&quot;25&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,657,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_EitrSus.tif&quot;, overwrite=TRUE) 3.2.2.2.6 Eitrofi purvaiņu meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 655 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 15=dumbrājs, 16=liekņa; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_EitrPurv.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Eitrofi purvaiņu meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;15&quot;,&quot;16&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,655,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_EitrPurv.tif&quot;, overwrite=TRUE) 3.2.2.2.7 Eitrofi sausieņu un slapjaiņu meži Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 653 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā mt norādītas vērtības: 5=vēris, 6=gārša, 10=slapjais vēris, 11=slapjā gārša; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_EitrSaus.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Eitrofi sausieņu un slapjaiņu meži nogabali=mvr %&gt;% filter(mt %in% c(&quot;5&quot;,&quot;6&quot;,&quot;10&quot;,&quot;11&quot;)) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,653,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_EitrSaus.tif&quot;, overwrite=TRUE) 3.2.2.2.8 Izcirtumi un jaunaudzes līdz 5 m Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 661 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un – Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “16” vai [“10” un valdošās sugas augstums ir līdz 5 m]; – vienkāršās ainavas maskā ir reģistrēta klase 610 (Global Forest Watch izzudušais koku vainagu segums kopš 2020. gada un izcirtumi un iznīkušās mežaudzes no Meža valsts reģistra); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_IzcUNzem5m.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Izcirtumi un jaunaudzes līdz 5 m nogabali=mvr %&gt;% filter((zkat==&quot;10&quot;&amp;h10&lt;5)|zkat==&quot;16&quot;) %&gt;% mutate(yes=661) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) klase_610=ifel(ainava_t==610,661,NA) klases=merge(klase_610,rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(klases)&amp;maska_meziem==1,661,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_IzcUNzem5m.tif&quot;, overwrite=TRUE) 3.2.2.2.9 Jaunaudzes no 5 m un krūmāji Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 662 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un – Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un valdošās sugas augstums ir no 5 m un vecuma grupa ir “1”; – vienkāršās ainavas maskā ir reģistrēta klase 620 (tās veidošanu skatīt klašu grupas 600 aprakstā un beigās pie robu aizpildīšanas); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_Jaunaudzes5mKrumaji.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 # Jaunaudzes no 5 m un krūmāji nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;h10&gt;=5&amp;vgr==&quot;1&quot;) %&gt;% mutate(yes=662) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) izcirtumi_zemas=rast(&quot;./Rastri_10m/Mezi_IzcUNzem5m.tif&quot;) klase_krumaji=ifel(ainava_t==620&amp;izcirtumi_zemas==0,662,NA) klases=merge(klase_krumaji,rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(klases)&amp;maska_meziem==1,662,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_Jaunaudzes5mKrumaji.tif&quot;, overwrite=TRUE) 3.2.2.2.10 Vidēja vecuma un briestaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 663 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un valdošās sugas augstums ir no 5 m un (vecuma grupa ir “2” vai “3”); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_VidejasBriestaudzes.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Vidēja vecuma un briestaudzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;h10&gt;=5&amp;(vgr==&quot;2&quot;|vgr==&quot;3&quot;)) %&gt;% mutate(yes=663) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,663,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_VidejasBriestaudzes.tif&quot;, overwrite=TRUE) 3.2.2.2.11 Pieaugušās un pāraugušās mežaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 664 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un valdošās sugas augstums ir no 5 m un (vecuma grupa ir “4” vai “5”); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_PieaugParaug.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # Pieaugušās un pāraugušās mežaudzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;h10&gt;=5&amp;(vgr==&quot;4&quot;|vgr==&quot;5&quot;)) %&gt;% mutate(yes=664) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,664,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_PieaugParaug.tif&quot;, overwrite=TRUE) 3.2.2.2.12 Skujkoku Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 671 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un kokaudzes pirmajā stāvā skujkoku sugu (s1* apzīmējumi: “1”,“3”,“13”,“14”,“15”,“22”,“23”) krāja veido vismaz 75% no kopējās krājas; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_Skujkoku.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Skujkoku nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;skujkoku&quot;) %&gt;% mutate(yes=671) # 954445 rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,671,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_Skujkoku.tif&quot;, overwrite=TRUE) 3.2.2.2.13 Šaurlapju Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 672 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un kokaudzes pirmajā stāvā šaurlapju sugu (s1* apzīmējumi: “4”,“6”,“8”,“9”,“19”,“20”,“21”,“32”,“35”,“50”,“68”) krāja veido vismaz 75% no kopējās krājas, pēc Skujkoku kritērija pielietošanas; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_Saurlapju.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Šaurlapju nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;saurlapju&quot;) %&gt;% mutate(yes=672) # 1298549 rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,672,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_Saurlapju.tif&quot;, overwrite=TRUE) 3.2.2.2.14 Platlapju Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 673 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un kokaudzes pirmajā stāvā platlapju sugu (s1* apzīmējumi: “10”,“11”,“12”,“16”,“17”,“18”,“24”,“25”,“26”,“27”,“28”,“29”, “61”,“62”,“63”,“64”,“65”,“66”,“67”,“69”) krāja veido vismaz 50% no kopējās krājas, pēc secīgas Skujkoku un Šaurlapju kritēriju pielietošanas; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_Platlapju.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Platlapju nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;platlapju&quot;) %&gt;% mutate(yes=673) # 28814 rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,673,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_Platlapju.tif&quot;, overwrite=TRUE) 3.2.2.2.15 Jauktu koku Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 674 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā zkat norādītas vērtības “10” un kokaudzes pirmā stāva krājas klasifikācija neatbilst secīgai Skujkoku, Šaurlapju un Platlapju kritēriju pielietošanai; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_Jauktukoku.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Jauktu koku nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;jauktu koku&quot;) %&gt;% mutate(yes=674) # 451964 rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,674,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_Jauktukoku.tif&quot;, overwrite=TRUE) 3.2.2.2.16 Skujkoku jaunaudzes, vidēja vecuma un briestaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 681 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “1”, “2” vai “3” un kokaudzes pirmā stāva krājas klasifikācija atbilst Skujkoku; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_SkujkokuJaunas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Skujkoku jaunaudzes, vidēja vecuma un briestaudzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;skujkoku&quot;&amp;(vgr==&quot;1&quot;|vgr==&quot;2&quot;|vgr==&quot;3&quot;)) %&gt;% mutate(yes=681) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,681,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_SkujkokuJaunas.tif&quot;, overwrite=TRUE) 3.2.2.2.17 Skujkoku pieaugušās un pāraugušās audzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 682 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “4” vai “5” un kokaudzes pirmā stāva krājas klasifikācija atbilst Skujkoku; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_SkujkokuVecas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Skujkoku pieaugušās un pāraugušās audzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;skujkoku&quot;&amp;(vgr==&quot;4&quot;|vgr==&quot;5&quot;)) %&gt;% mutate(yes=682) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,682,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_SkujkokuVecas.tif&quot;, overwrite=TRUE) 3.2.2.2.18 Šaurlapju jaunaudzes, vidēja vecuma un briestaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 683 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “1”, “2” vai “3” un kokaudzes pirmā stāva krājas klasifikācija atbilst Šaurlapju; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_SaurlapjuJaunas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Šaurlapju jaunaudzes, vidēja vecuma un briestaudzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;saurlapju&quot;&amp;(vgr==&quot;1&quot;|vgr==&quot;2&quot;|vgr==&quot;3&quot;)) %&gt;% mutate(yes=683) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,683,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_SaurlapjuJaunas.tif&quot;, overwrite=TRUE) 3.2.2.2.19 Šaurlapju pieaugušās un pāraugušās audzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 684 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “4” vai “5” un kokaudzes pirmā stāva krājas klasifikācija atbilst Šaurlapju; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_SaurlapjuVecas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Šaurlapju pieaugušās un pāraugušās audzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;saurlapju&quot;&amp;(vgr==&quot;4&quot;|vgr==&quot;5&quot;)) %&gt;% mutate(yes=684) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,684,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_SaurlapjuVecas.tif&quot;, overwrite=TRUE) 3.2.2.2.20 Platlapju jaunaudzes, vidēja vecuma un briestaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 685 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “1”, “2” vai “3” un kokaudzes pirmā stāva krājas klasifikācija atbilst Platlapju; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_PlatlapjuJaunas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Platlapju jaunaudzes, vidēja vecuma un briestaudzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;platlapju&quot;&amp;(vgr==&quot;1&quot;|vgr==&quot;2&quot;|vgr==&quot;3&quot;)) %&gt;% mutate(yes=685) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,685,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_PlatlapjuJaunas.tif&quot;, overwrite=TRUE) 3.2.2.2.21 Platlapju pieaugušās un pāraugušās audzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 686 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “4” vai “5” un kokaudzes pirmā stāva krājas klasifikācija atbilst Platlapju; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_PlatlapjuVecas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Platlapju pieaugušās un pāraugušās audzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;platlapju&quot;&amp;(vgr==&quot;4&quot;|vgr==&quot;5&quot;)) %&gt;% mutate(yes=686) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,686,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_PlatlapjuVecas.tif&quot;, overwrite=TRUE) 3.2.2.2.22 Jauktu koku jaunaudzes, vidēja vecuma un briestaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 687 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “1”, “2” vai “3” un kokaudzes pirmā stāva krājas klasifikācija atbilst Jauktu koku; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_JauktkokuJaunas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Jauktu koku jaunaudzes, vidēja vecuma un briestaudzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;jauktu koku&quot;&amp;(vgr==&quot;1&quot;|vgr==&quot;2&quot;|vgr==&quot;3&quot;)) %&gt;% mutate(yes=687) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,687,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_JauktkokuJaunas.tif&quot;, overwrite=TRUE) 3.2.2.2.23 Jauktu koku pieaugušās un pāraugušās audzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 688 apzīmē šūnas, kurās vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700 un Meža valsts reģistra Meža inventarizācijas failā laukā vgr norādītas vērtības “4” vai “5” un kokaudzes pirmā stāva krājas klasifikācija atbilst Jauktu koku; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Mezi_JauktkokuVecas.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 mvr=mvr %&gt;% mutate(kraja_skujkoku=ifelse(s10 %in% skujkoki,v10,0)+ ifelse(s11 %in% skujkoki,v11,0)+ifelse(s12 %in% skujkoki,v12,0)+ ifelse(s13 %in% skujkoki,v13,0)+ifelse(s14 %in% skujkoki,v14,0), kraja_saurlapju=ifelse(s10 %in% saurlapji,v10,0)+ ifelse(s11 %in% saurlapji,v11,0)+ifelse(s12 %in% saurlapji,v12,0)+ ifelse(s13 %in% saurlapji,v13,0)+ifelse(s14 %in% saurlapji,v14,0), kraja_platlapju=ifelse(s10 %in% platlapji,v10,0)+ ifelse(s11 %in% platlapji,v11,0)+ifelse(s12 %in% platlapji,v12,0)+ ifelse(s13 %in% platlapji,v13,0)+ifelse(s14 %in% platlapji,v14,0)) %&gt;% mutate(kopeja_kraja=kraja_skujkoku+kraja_platlapju+kraja_saurlapju) %&gt;% mutate(tips=ifelse(kraja_skujkoku/kopeja_kraja&gt;=0.75,&quot;skujkoku&quot;, ifelse(kraja_saurlapju/kopeja_kraja&gt;=0.75,&quot;saurlapju&quot;, ifelse(kraja_platlapju/kopeja_kraja&gt;0.5,&quot;platlapju&quot;, &quot;jauktu koku&quot;)))) # Jauktu koku pieaugušās un pāraugušās audzes nogabali=mvr %&gt;% filter(zkat==&quot;10&quot;&amp;tips==&quot;jauktu koku&quot;&amp;(vgr==&quot;4&quot;|vgr==&quot;5&quot;)) %&gt;% mutate(yes=688) # rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(!is.na(rastrs_mvr)&amp;maska_meziem==1,688,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Mezi_JauktkokuVecas.tif&quot;, overwrite=TRUE) 3.2.2.2.24 Mežu daudzveidībai Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. To veido slāņi sekojošajā secībā ar norādītajiem kodiem: kods 681 satur Skujkoku jaunaudzes, vidēja vecuma un briestaudzes kods 682 satur Skujkoku pieaugušās un pāraugušās audzes kods 683 satur Šaurlapju jaunaudzes, vidēja vecuma un briestaudzes kods 684 satur Šaurlapju pieaugušās un pāraugušās audzes kods 685 satur Platlapju jaunaudzes, vidēja vecuma un briestaudzes kods 686 satur Platlapju pieaugušās un pāraugušās audzes kods 687 satur Jauktu koku jaunaudzes, vidēja vecuma un briestaudzes kods 688 satur Jauktu koku pieaugušās un pāraugušās audzes izmantotas vienkāršās ainavas maskā ir reģistrētas klases diapazonā no 600 līdz 700; atlikušās Latvijas teritorijā esošās vietas aizpildītas ar vērtību 1. Zemāk esošās komandu rindas izveido failu Ainava_MezuDaudzveidibai.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) maska_meziem=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,1,NA) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 skujkoki=c(&quot;1&quot;,&quot;3&quot;,&quot;13&quot;,&quot;14&quot;,&quot;15&quot;,&quot;22&quot;,&quot;23&quot;) # 7 saurlapji=c(&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;9&quot;,&quot;19&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;,&quot;68&quot;) # 11 platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;, &quot;61&quot;,&quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) # 20 # Mežu daudzveidībai # 681 skujkoku jaunās skuju_jaunas=rast(&quot;./Rastri_10m/Mezi_SkujkokuJaunas.tif&quot;) skuju_jaunas=subst(skuju_jaunas,from=0,to=NA) # 682 skujkoku vecās skuju_vecas=rast(&quot;./Rastri_10m/Mezi_SkujkokuVecas.tif&quot;) skuju_vecas=subst(skuju_vecas,from=0,to=NA) # 683 šaurlapju jaunās saurlapju_jaunas=rast(&quot;./Rastri_10m/Mezi_SaurlapjuJaunas.tif&quot;) saurlapju_jaunas=subst(saurlapju_jaunas,from=0,to=NA) # 684 šaurlapju vecās saurlapju_vecas=rast(&quot;./Rastri_10m/Mezi_SaurlapjuVecas.tif&quot;) saurlapju_vecas=subst(saurlapju_vecas,from=0,to=NA) # 685 platlapju jaunās platlapju_jaunas=rast(&quot;./Rastri_10m/Mezi_PlatlapjuJaunas.tif&quot;) platlapju_jaunas=subst(platlapju_jaunas,from=0,to=NA) # 686 platlapju vecās platlapju_vecas=rast(&quot;./Rastri_10m/Mezi_PlatlapjuVecas.tif&quot;) platlapju_vecas=subst(platlapju_vecas,from=0,to=NA) # 687 jauktu koku jaunās jauktu_jaunas=rast(&quot;./Rastri_10m/Mezi_JauktkokuJaunas.tif&quot;) jauktu_jaunas=subst(jauktu_jaunas,from=0,to=NA) # 688 jauktu koku vecās jauktu_vecas=rast(&quot;./Rastri_10m/Mezi_JauktkokuVecas.tif&quot;) jauktu_vecas=subst(jauktu_vecas,from=0,to=NA) # pamata ainava ainavas_pamatnei=ifel(ainava_t&gt;600&amp;ainava_t&lt;700,ainava_t,1) freq(ainavas_pamatnei) rm(mvr) mezu_ainavai=sprc(skuju_jaunas,skuju_vecas,saurlapju_jaunas,saurlapju_vecas, platlapju_jaunas,platlapju_vecas,jauktu_jaunas,jauktu_vecas, ainavas_pamatnei) mezu_ainava=terra::merge(mezu_ainavai) mezu_daudzveidibai=terra::cover(mezu_ainava,template_t, values=NA, filename=&quot;./Rastri_10m/Ainava_MezuDaudzveidibai.tif&quot;, overwrite=TRUE) 3.2.2.3 Kombinētā ainava Šajā apakšnodaļā apkopoti ar virsnodaļā aprakstīto ainavu saistītie ievades produkti - 10 m izšķirtspējā sagatavoti rastra slāņi, kas nepieciešami tālākai EGV sagatavošanai. Lai atvieglotu meklēšanu un atsaukšanos, tie iedalīti vēl zamāka līmeņa apakšnodaļās. Sekojošajās apakšnodaļās esošajos kodu apgabalos sākuma daļa atkārtojas. Nenoliedzami, tas nomāc svarīgo - slānim specifisko daļu. Tomēr tas ļauj katru no tiem uztvert un izpildīt kā neatkarīgu uzdevumu, ja ir pieejami izmantojamie zemāka līmeņa slāņi, uz kuriem atsauces sniegtas aprakstos. 3.2.2.3.1 Parki, kapi, alejas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti koki ārpus mežiem (klase 640); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_ParkiKapiAlejasYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Parki, kapi, alejas pka=ifel(ainava_t==640,1,0) pka=cover(pka,nulles, filename=&quot;./Rastri_10m/Ainava_ParkiKapiAlejasYN.tif&quot;, overwrite=TRUE) 3.2.2.3.2 Vasarnīcas un mazdārziņi Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrētas klases diapazonā no 400 līdz 500; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_VasarnicasYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Vasarnīcas un mazdārziņi vasarnicas=ifel(ainava_t&gt;=400&amp;ainava_t&lt;500,1,0) vasarnicas=cover(vasarnicas,nulles, filename=&quot;./Rastri_10m/Ainava_VasarnicasYN.tif&quot;, overwrite=TRUE) 3.2.2.3.3 Ūdensobjektu platība Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti ūdeņi (klase 200); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_UdeniYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Ūdensobjektu platība udeni=ifel(ainava_t==200,1,0) udeni=cover(udeni,nulles, filename=&quot;./Rastri_10m/Ainava_UdeniYN.tif&quot;, overwrite=TRUE) 3.2.2.3.4 Niedrāji, meldrāji, grīslāji un pārplūstošā Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrētas klases diapazonā no 720 līdz 730 (galapunktus ieskaitot) ; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_NiedrajiBebrainesYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Niedrāji, meldrāji, grīslāji un pārplūstošā niedraji=ifel(ainava_t&gt;=720&amp;ainava_t&lt;=730,1,0) niedraji=cover(niedraji,nulles, filename=&quot;./Rastri_10m/Ainava_NiedrajiBebrainesYN.tif&quot;, overwrite=TRUE) 3.2.2.3.5 Mitrāju platība Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrētas klases diapazonā no 700 līdz 800; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_MitrajiYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Mitrāju platība mitraji=ifel(ainava_t&gt;=700&amp;ainava_t&lt;800,1,0) mitraji=cover(mitraji,nulles, filename=&quot;./Rastri_10m/Ainava_MitrajiYN.tif&quot;, overwrite=TRUE) 3.2.2.3.6 Atklāta augsne un karjeri Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti smiltāji, smilts, grants un kūdras karjeri (klase 800); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_SmiltajiKudraYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Atklāta augsne un karjeri plikie=ifel(ainava_t==800,1,0) plikie=cover(plikie,nulles, filename=&quot;./Rastri_10m/Ainava_SmiltajiKudraYN.tif&quot;, overwrite=TRUE) 3.2.2.3.7 Kokiem klātās platības Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti koki (klases 630 un 640); Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_KokiYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Kokiem klātās platības koki=ifel(ainava_t&gt;=630&amp;ainava_t&lt;=640,1,0) koki=cover(koki,nulles, filename=&quot;./Rastri_10m/Ainava_KokiYN.tif&quot;, overwrite=TRUE) 3.2.2.3.8 Netaksētās mežaudzes Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēti meži (klase 630), kas neatrodas Meža valsts reģistra Meža inventarizācijas failā laukā zkat ar vērtību “10” atzīmētajās vietās; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_MeziNetaksets.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Netaksētās mežaudzes meziem=ifel(ainava_t==630,1,0) nogabali=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) nogabali=nogabali %&gt;% filter(zkat==&quot;10&quot;) %&gt;% mutate(yes=1) rastrs_mvr=fasterize::fasterize(nogabali,template_r,field=&quot;yes&quot;) rastrs_mvr=rast(rastrs_mvr) pirmsmaskas_rastrs=ifel(is.na(rastrs_mvr)&amp;meziem==1,1,0) aizpildits=terra::cover(pirmsmaskas_rastrs,nulles) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Ainava_MeziNetaksets.tif&quot;, overwrite=TRUE) 3.2.2.3.9 Apbūve Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Vērtība 1 apzīmē šūnas, kurās vienkāršās ainavas slānī ir reģistrēta klase 500; Vērtība 0 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_ApbuveYN.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Apbūve apbuve=ifel(ainava_t==500,1,0) apbuve=cover(apbuve,nulles, filename=&quot;./Rastri_10m/Ainava_ApbuveYN.tif&quot;, overwrite=TRUE) 3.2.2.3.10 Daudzās klases daudzveidībai Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. To veido slāņi sekojošajā secībā ar tajos norādītajiem kodiem: lauku daudzveidības klases mežu daudzveidības klases vienkāršās ainavas kases; atlikušās Latvijas teritorijā esošās vietas aizpildītas ar vērtību 1. Zemāk esošās komandu rindas izveido failu Ainava_KopejaiDaudzveidibai.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # # lauku daudzveidiba lauki=rast(&quot;./Rastri_10m/Ainava_LaukuDaudzveidibai.tif&quot;) lauki=subst(lauki,from=1,to=NA) # mezu daudzveidiba mezi=rast(&quot;./Rastri_10m/Ainava_MezuDaudzveidibai.tif&quot;) mezi=subst(mezi,from=1,to=NA) # apvienosana visai_ainavai=sprc(lauki,mezi,ainava_t) visa_ainava=terra::merge(visai_ainavai) visai_daudzveidibai=terra::cover(visa_ainava,template_t, values=NA, filename=&quot;./Rastri_10m/Ainava_KopejaiDaudzveidibai.tif&quot;, overwrite=TRUE) 3.2.2.4 Malu slāņi Šajā apakšnodaļā apkopoti ar virsnodaļā aprakstīto ainavu saistītie ievades produkti - 10 m izšķirtspējā sagatavoti rastra slāņi, kas nepieciešami tālākai EGV sagatavošanai. Lai atvieglotu meklēšanu un atsaukšanos, tie iedalīti vēl zamāka līmeņa apakšnodaļās. Malu aprēķini ir no skaitļošanas viedokļa izaicinoši gan datoram sniedzamo instrukciju, gan aprēķinu apjoma dēļ. Lai atvieglotu instrukcijas, sagatavoti mērķtiecīgi ievades slāņi, kas satur specifiskās klases, kuru (savstarpējās) malas ir nepieciešams raksrturot, ekoģeogrāfisko mainīgo aprēķināšanai. Sekojošajās apakšnodaļās esošajos kodu apgabalos sākuma daļa atkārtojas. Nenoliedzami, tas nomāc svarīgo - slānim specifisko daļu. Tomēr tas ļauj katru no tiem uztvert un izpildīt kā neatkarīgu uzdevumu, ja ir pieejami izmantojamie zemāka līmeņa slāņi, uz kuriem atsauces sniegtas aprakstos. 3.2.2.4.1 Apbūves un LIZ mala Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 500 saglabāta vienkāršās ainavas slāņa klasei 500; vērtība 300 piešķirta vienkāršās ainavas slāņa klašu diapozonam [300,400); pārējās Latvijas teritorijā esošās šūnas aizpildītas ar NA. Zemāk esošās komandu rindas izveido failu Malam_Apbuve_LIZ.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Apbūves un LIZ malām apbuve=ifel(ainava_t==500,500,NA) liz=ifel(ainava_t&gt;=300&amp;ainava_t&lt;400,300,NA) abi=merge(apbuve,liz, filename=&quot;./Rastri_10m/Malam_Apbuve_LIZ.tif&quot;, overwrite=TRUE) 3.2.2.4.2 Apbūves un koku mala Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 500 saglabāta vienkāršās ainavas slāņa klasei 500; vērtība 634 piešķirta vienkāršās ainavas slāņa klašu diapozonam [630,640]; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar NA. Zemāk esošās komandu rindas izveido failu Malam_Apbuve_koki.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Apbūves un koku malām apbuve=ifel(ainava_t==500,500,NA) koki=ifel(ainava_t&gt;=630&amp;ainava_t&lt;=640,634,NA) abi=merge(apbuve,koki, filename=&quot;./Rastri_10m/Malam_Apbuve_koki.tif&quot;, overwrite=TRUE) 3.2.2.4.3 Aramzemju (visu) malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 310 saglabāta vienkāršās ainavas slāņa klasei 310; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar 0. Zemāk esošās komandu rindas izveido failu Malam_Aramzemes_Y.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # aramzemju malām aramzemes=ifel(ainava_t==310,310,0, filename=&quot;./Rastri_10m/Malam_Aramzemes_Y.tif&quot;, overwrite=TRUE) 3.2.2.4.4 LIZ, izcirtumu un jaunaudžu (&lt;5m) malas ar kokiem &gt;5m Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 634 piešķirta vienkāršās ainavas slāņa klašu diapozonam [630,640]; vērtība 1 piešķirta vienkāršās ainavas slāņa klašu diapozoniem: – [300,400); – [600,620]; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar NA. Zemāk esošās komandu rindas izveido failu Malam_LIZzemiekoki_Koki.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # LIZ, izcirtumu un jaunaudžu (&lt;5m) malām ar kokiem &gt;5m viens=ifel((ainava_t&gt;=300&amp;ainava_t&lt;400)|(ainava_t&gt;=600&amp;ainava_t&lt;=620),1,NA) koki=ifel(ainava_t&gt;=630&amp;ainava_t&lt;=640,634,NA) abi=merge(viens,koki, filename=&quot;./Rastri_10m/Malam_LIZzemiekoki_Koki.tif&quot;, overwrite=TRUE) 3.2.2.4.5 Koku virs 5m malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 634 piešķirta vienkāršās ainavas slāņa klašu diapozonam [630,640]; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar 0. Zemāk esošās komandu rindas izveido failu Malam_Koki_Y.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # koku malām koki=ifel(ainava_t&gt;=630&amp;ainava_t&lt;=640,634,0, filename=&quot;./Rastri_10m/Malam_Koki_Y.tif&quot;, overwrite=TRUE) 3.2.2.4.6 Niedrāju malas ar ūdeni Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 2 piešķirta vienkāršās ainavas slāņa klasei 200; vērtība 1 piešķirta vienkāršās ainavas slāņa klašu diapozonam [720,730]; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar NA. Zemāk esošās komandu rindas izveido failu Malam_NiedrajiBebraines_Udens.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # Niedrāju malām ar ūdeni udens=ifel(ainava_t==200,2,NA) niedraji=ifel(ainava_t&gt;=720&amp;ainava_t&lt;=730,1,NA) abi=merge(udens,niedraji, filename=&quot;./Rastri_10m/Malam_NiedrajiBebraines_Udens.tif&quot;, overwrite=TRUE) 3.2.2.4.7 Pieaugušu un pāraugušu mežaudžu malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot Pieaugušās un pāraugušās mežaudzes reģistrētās vērtības: vērtība 1 piešķirta Pieaugušās un pāraugušās mežaudzes klasei 664; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar 0. Zemāk esošās komandu rindas izveido failu Malam_PieaugParaug_Y.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # Pieaugušu un pāraugušu mežaudžu malām piepar=rast(&quot;./Rastri_10m/Mezi_PieaugParaug.tif&quot;) piepar=ifel(piepar==664,1,0, filename=&quot;./Rastri_10m/Malam_PieaugParaug_Y.tif&quot;, overwrite=TRUE) 3.2.2.4.8 Zālāju (visu) malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot Zālāji visi reģistrētās vērtības: vērtība 1 piešķirta Zālāji visi klasei 1; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar 0. Zemāk esošās komandu rindas izveido failu Malam_Zalaji_Y.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # zālāju malām zalaji=rast(&quot;./Rastri_10m/Lauki_zalajiYN.tif&quot;) zalaji=ifel(zalaji==1,1,0, filename=&quot;./Rastri_10m/Malam_Zalaji_Y.tif&quot;, overwrite=TRUE) 3.2.2.4.9 Ūdens un LIZ malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 2 piešķirta vienkāršās ainavas slāņa klasei 200; vērtība 300 piešķirta vienkāršās ainavas slāņa klašu diapozonam [300,400); pārējās Latvijas teritorijā esošās šūnas aizpildītas ar NA. Zemāk esošās komandu rindas izveido failu Malam_Udens_LIZ.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # ūdens un LIZ malām udens=ifel(ainava_t==200,2,NA) liz=ifel(ainava_t&gt;=300&amp;ainava_t&lt;400,300,NA) abi=merge(udens,liz, filename=&quot;./Rastri_10m/Malam_Udens_LIZ.tif&quot;, overwrite=TRUE) 3.2.2.4.10 Ūdens un zālāju malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 2 piešķirta vienkāršās ainavas slāņa klasei 200; vērtība 1 piešķirta vienkāršās ainavas slāņa klasei 330; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar NA. Zemāk esošās komandu rindas izveido failu Malam_Udens_Zalaji.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # ūdens un zālāju malām udens=ifel(ainava_t==200,2,NA) zalaji=ifel(ainava_t==330,1,NA) abi=merge(udens,zalaji, filename=&quot;./Rastri_10m/Malam_Udens_Zalaji.tif&quot;, overwrite=TRUE) 3.2.2.4.11 Ūdensobjektu malas Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 1 piešķirta vienkāršās ainavas slāņa klasei 200; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar 0. Zemāk esošās komandu rindas izveido failu Malam_Udens_Y.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # ūdeņu malām udens=ifel(ainava_t==200,1,0, filename=&quot;./Rastri_10m/Malam_Udens_Y.tif&quot;, overwrite=TRUE) 3.2.2.4.12 Ceļu garums (malas/2) Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai, pārklasificējot vienkāršās ainavas slānī reģistrētās vērtības: vērtība 1 piešķirta vienkāršās ainavas slāņa klasei 100; pārējās Latvijas teritorijā esošās šūnas aizpildītas ar 0. Zemāk esošās komandu rindas izveido failu Malam_Celi_Y.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # ceļu malām celi=ifel(ainava_t==100,1,0, filename=&quot;./Rastri_10m/Malam_Celi_Y.tif&quot;, overwrite=TRUE) 3.2.2.5 Lauku un mežu daudzveidība - šaurās grupas Šajā apakšnodaļā apkopoti ar virsnodaļā aprakstīto ainavu saistītie ievades produkti - 10 m izšķirtspējā sagatavoti rastra slāņi, kas nepieciešami tālākai EGV sagatavošanai. Lai atvieglotu meklēšanu un atsaukšanos, tie iedalīti vēl zamāka līmeņa apakšnodaļās. Sekojošajās apakšnodaļās esošajos kodu apgabalos sākuma daļa atkārtojas. Nenoliedzami, tas nomāc svarīgo - slānim specifisko daļu. Tomēr tas ļauj katru no tiem uztvert un izpildīt kā neatkarīgu uzdevumu, ja ir pieejami izmantojamie zemāka līmeņa slāņi, uz kuriem atsauces sniegtas aprakstos. 3.2.2.5.1 Lauku (smalkā) daudzveidība Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Tajā ievietotas sekojošas vērtības, slāņu prioritāte secībā lauku Atbalsta Dienesta kultūru kodi; lauku daudzveidībai klašu vērtības reizinātas ar 100; vērtība 1 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_LaukuSmalkaDaudzveidiba.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # vienkāršā ainava ainava_t=rast(&quot;./Rastri_10m/Ainava_vienk_mask.tif&quot;) ainava_r=raster(ainava_t) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # lad$kods=as.numeric(lad$PRODUCT_CODE) summary(lad$kods) laukiem=fasterize::fasterize(lad,template_r,field=&quot;kods&quot;) laukiem=rast(laukiem) lauku_daudzveidiba=rast(&quot;./Rastri_10m/Ainava_LaukuDaudzveidibai.tif&quot;) ld2=lauku_daudzveidiba*100 aizpildits=terra::cover(laukiem,ld2) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Ainava_LaukuSmalkaDaudzveidiba.tif&quot;, overwrite=TRUE) 3.2.2.5.2 Mežu (smalkā) daudzveidība Rastrs ar šūnas izmēru 10 m un segumu visai Latvijas teritorijai. Tajā ievietotas sekojošas vērtības, slāņu prioritāte secībā Valsts meža dienesta Meža valsts reģistrā izveidots kods, kurā valdošās koka sugas kodam, reizinātam ar 1000, pieskaitīts vecuma grupas kods. Bet pirms rasterizēšanas izslēgtas ģeometrijas, kurās nav izveidojies kods, kāda no koda komponentēm ir 0; mežu daudzveidības klašu vērtības; vērtība 1 - pārējās Latvijas teritorijā esošās šūnas. Zemāk esošās komandu rindas izveido failu Ainava_MezuSmalkaDaudzveidiba.tif. Code # Libs if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(raster)) {install.packages(&quot;raster&quot;); require(raster)} if(!require(fasterize)) {install.packages(&quot;fasterize&quot;); require(fasterize)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # templates template_t=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template_r=raster(template_t) nulles=terra::subst(template_t,from=1,to=0) # lauki lad_klasem=read_excel(&quot;./IevadesDati/LAD/KulturuKodi_2024.xlsx&quot;) lad=st_read_parquet(&quot;./IevadesDati/LAD/LAD_lauki.parquet&quot;) lad$yes=1 # meži mvr=st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr$yes=1 # mvr=mvr %&gt;% mutate(kods1=as.numeric(s10)*1000, kods2=as.numeric(vgr), kods=kods1+kods2) %&gt;% filter(!is.na(kods)) %&gt;% filter(kods1&gt;0) %&gt;% filter(kods2&gt;0) meziem=fasterize::fasterize(mvr,template_r,field=&quot;kods&quot;) meziem=rast(meziem) mezu_daudzveidiba=rast(&quot;./Rastri_10m/Ainava_MezuDaudzveidibai.tif&quot;) aizpildits=terra::cover(meziem,mezu_daudzveidiba) pecmaskas_rastrs=mask(aizpildits,template_t, filename=&quot;./Rastri_10m/Ainava_MezuSmalkaDaudzveidiba.tif&quot;, overwrite=TRUE) 3.2.2.5.3 Kopējās ainavas Šenona daudzveidības indekss 500 m šūnā Šenona daudzveidības indeksa aprēķini ir tik resrusu prasīgi, ka tos risināt katrā ainavas mērogā ap katru analīzes šūnu nav racionāli iespējams. Atšķirībā no malu slāņiem, tie nav tieši agregējami. Tādēļ pieņemts lēmums par rastra šūnas izmēru, kurš: veidojas kā analīzes šūnas reizinājums ar veselu skaitli; ir pietiekoši plašs, lai tajā būtu iespējama vides mainība. Tādēļ analīzes šūna pati par sevi (vai reizinājums ar 1) neder - 1 ha teritorijā ir ļoti Zemes seguma un lietojuma veidu maza mainība. Tas nozīmē, ka šai šūnai ir jābūt iespējami lielākai, tomēr pārāk liela analīzes šūna nozīmētu telpiskās autokorelācijas mākslīgu pastiprināšanu; jebkuram ainavas mērogam ir jāveidojas no vairākām ievades līmeņa šūnām. Tā kā ekoģeogrāfisko mainīgo sagatavošanā izmantosim telpiski svērto zonālo statistiku (vairāk - Procesēšanas atvieglošana) un mazākais ainavas līmenis pēc analīzes šūnas ir r=500 m ap analīzes šūnas centru, pieņemts lēmums ainavas daudzveidības indeksa aprēķinus veikt individuālām šūnām ar malas garumu 500 m, tātad, 25 ha ainavā. Tas nozīmē, ka mazākais izmantoto vienību skaits ir deviņi (ainavas mērogam r=500 m ap analīzes šūnas centru). Par ievades informāciju kopējās ainavas daudzveidības indeksa aprēķiniem izmantots Daudzās klases daudzveidībai rezultāts. Zemāk esošās komandu rindas izveido un saglabā slāni Daudzv_Kopeja_x500.tif, kurš tiks izmantots EGV sagatavošanai. Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(landscapemetrics)) {install.packages(&quot;landscapemetrics&quot;); require(landscapemetrics)} if(!require(foreach)) {install.packages(&quot;foreach&quot;); require(foreach)} if(!require(doParallel)) {install.packages(&quot;doParallel&quot;); require(doParallel)} # mapes ---- # kopeja daudzveidiba dir.create(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Kopeja_x500&quot;) # kvadrati ---- kvadrati=st_read_parquet(&quot;./Templates/TemplateGrids/tikls500_sauzeme.parquet&quot;) numuri=levels(factor(kvadrati$tks50km)) library(foreach) library(doParallel) cl &lt;- makeCluster(24) # jānorāda atbilstoši izmantotajai iekārtai registerDoParallel(cl) foreach(i = 1:length(numuri)) %dopar% { library(tidyverse) library(sf) library(arrow) library(sfarrow) library(terra) library(raster) library(exactextractr) library(fasterize) library(landscapemetrics) sakums=Sys.time() print(i) solis=numuri[i] sunas=kvadrati %&gt;% filter(tks50km==solis) telpa=st_as_sfc(st_bbox(sunas)) telpa2=st_buffer(telpa,dist=1000) template_500=rast(&quot;./Templates/TemplateRasters/LV500m_10km.tif&quot;) temp500_mazs=crop(template_500,telpa2) rastrs_500_mazs=raster::raster(temp500_mazs) # kopeja slanis=rast(&quot;./Rastri_10m/Ainava_KopejaiDaudzveidibai.tif&quot;) slanis_mazs=crop(slanis,telpa2) a=sample_lsm(slanis_mazs,y=sunas,plot_id=sunas$id,what=&quot;lsm_l_shdi&quot;) a$value[is.na(a$value)]=0 sunas$vertibas=a$value slanis=fasterize::fasterize(sunas,rastrs_500_mazs,field=&quot;vertibas&quot;) slanis=rast(slanis) slanis2=terra::mask(slanis,temp500_mazs,overwrite=TRUE, filename=paste0(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Kopeja_x500/Daudzv_Kopeja_x500_&quot;,solis,&quot;.tif&quot;)) beigas=Sys.time() ilgums=beigas-sakums print(ilgums) } stopCluster(cl) ## mozaīkas ---- # kopeja daudzveidiba slani=list.files(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Kopeja_x500/&quot;,full.names = TRUE) virt_slani=terra::vrt(slani) names(virt_slani)=&quot;Daudzv_Kopeja_x500&quot; writeRaster(virt_slani,&quot;./Rastri_500m/Daudzv_Kopeja_x500.tif&quot;,overwrite=TRUE) 3.2.2.5.4 Lauku ainavas Šenona daudzveidības indekss 500 m šūnā Šenona daudzveidības indeksa aprēķini ir tik resrusu prasīgi, ka tos risināt katrā ainavas mērogā ap katru analīzes šūnu nav racionāli iespējams. Atšķirībā no malu slāņiem, tie nav tieši agregējami. Tādēļ pieņemts lēmums par rastra šūnas izmēru, kurš: veidojas kā analīzes šūnas reizinājums ar veselu skaitli; ir pietiekoši plašs, lai tajā būtu iespējama vides mainība. Tādēļ analīzes šūna pati par sevi (vai reizinājums ar 1) neder - 1 ha teritorijā ir ļoti Zemes seguma un lietojuma veidu maza mainība. Tas nozīmē, ka šai šūnai ir jābūt iespējami lielākai, tomēr pārāk liela analīzes šūna nozīmētu telpiskās autokorelācijas mākslīgu pastiprināšanu; jebkuram ainavas mērogam ir jāveidojas no vairākām ievades līmeņa šūnām. Tā kā ekoģeogrāfisko mainīgo sagatavošanā izmantosim telpiski svērto zonālo statistiku (vairāk - Procesēšanas atvieglošana) un mazākais ainavas līmenis pēc analīzes šūnas ir r=500 m ap analīzes šūnas centru, pieņemts lēmums ainavas daudzveidības indeksa aprēķinus veikt individuālām šūnām ar malas garumu 500 m, tātad, 25 ha ainavā. Tas nozīmē, ka mazākais izmantoto vienību skaits ir deviņi (ainavas mērogam r=500 m ap analīzes šūnas centru). Par ievades informāciju kopējās ainavas daudzveidības indeksa aprēķiniem izmantots Lauku (smalkā) daudzveidība rezultāts. Zemāk esošās komandu rindas izveido un saglabā slāni Daudzv_Lauku_x500.tif, kurš tiks izmantots EGV sagatavošanai. Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(landscapemetrics)) {install.packages(&quot;landscapemetrics&quot;); require(landscapemetrics)} if(!require(foreach)) {install.packages(&quot;foreach&quot;); require(foreach)} if(!require(doParallel)) {install.packages(&quot;doParallel&quot;); require(doParallel)} # mapes ---- # lauku daudzveidiba dir.create(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Lauku_x500&quot;) # kvadrati ---- kvadrati=st_read_parquet(&quot;./Templates/TemplateGrids/tikls500_sauzeme.parquet&quot;) numuri=levels(factor(kvadrati$tks50km)) library(foreach) library(doParallel) cl &lt;- makeCluster(24) # jānorāda atbilstoši izmantotajai iekārtai registerDoParallel(cl) foreach(i = 1:length(numuri)) %dopar% { library(tidyverse) library(sf) library(arrow) library(sfarrow) library(terra) library(raster) library(exactextractr) library(fasterize) library(landscapemetrics) sakums=Sys.time() print(i) solis=numuri[i] sunas=kvadrati %&gt;% filter(tks50km==solis) telpa=st_as_sfc(st_bbox(sunas)) telpa2=st_buffer(telpa,dist=1000) template_500=rast(&quot;./Templates/TemplateRasters/LV500m_10km.tif&quot;) temp500_mazs=crop(template_500,telpa2) rastrs_500_mazs=raster::raster(temp500_mazs) # lauku daudzveidiba slanis=rast(&quot;./Rastri_10m/Ainava_LaukuSmalkaDaudzveidiba.tif&quot;) slanis_mazs=crop(slanis,telpa2) a=sample_lsm(slanis_mazs,y=sunas,plot_id=sunas$id,what=&quot;lsm_l_shdi&quot;) a$value[is.na(a$value)]=0 sunas$vertibas=a$value slanis=fasterize::fasterize(sunas,rastrs_500_mazs,field=&quot;vertibas&quot;) slanis=rast(slanis) slanis2=terra::mask(slanis,temp500_mazs,overwrite=TRUE, filename=paste0(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Lauku_x500/Daudzv_Lauku_x500_&quot;,solis,&quot;.tif&quot;)) beigas=Sys.time() ilgums=beigas-sakums print(ilgums) } stopCluster(cl) ## mozaīkas ---- # lauku daudzveidiba slani=list.files(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Lauku_x500/&quot;,full.names = TRUE) virt_slani=terra::vrt(slani) names(virt_slani)=&quot;Daudzv_Lauku_x500&quot; writeRaster(virt_slani,&quot;./Rastri_500m/Daudzv_Lauku_x500.tif&quot;,overwrite=TRUE) 3.2.2.5.5 Mežu ainavas Šenona daudzveidības indekss 500 m šūnā Šenona daudzveidības indeksa aprēķini ir tik resrusu prasīgi, ka tos risināt katrā ainavas mērogā ap katru analīzes šūnu nav racionāli iespējams. Atšķirībā no malu slāņiem, tie nav tieši agregējami. Tādēļ pieņemts lēmums par rastra šūnas izmēru, kurš: veidojas kā analīzes šūnas reizinājums ar veselu skaitli; ir pietiekoši plašs, lai tajā būtu iespējama vides mainība. Tādēļ analīzes šūna pati par sevi (vai reizinājums ar 1) neder - 1 ha teritorijā ir ļoti Zemes seguma un lietojuma veidu maza mainība. Tas nozīmē, ka šai šūnai ir jābūt iespējami lielākai, tomēr pārāk liela analīzes šūna nozīmētu telpiskās autokorelācijas mākslīgu pastiprināšanu; jebkuram ainavas mērogam ir jāveidojas no vairākām ievades līmeņa šūnām. Tā kā ekoģeogrāfisko mainīgo sagatavošanā izmantosim telpiski svērto zonālo statistiku (vairāk - Procesēšanas atvieglošana) un mazākais ainavas līmenis pēc analīzes šūnas ir r=500 m ap analīzes šūnas centru, pieņemts lēmums ainavas daudzveidības indeksa aprēķinus veikt individuālām šūnām ar malas garumu 500 m, tātad, 25 ha ainavā. Tas nozīmē, ka mazākais izmantoto vienību skaits ir deviņi (ainavas mērogam r=500 m ap analīzes šūnas centru). Par ievades informāciju kopējās ainavas daudzveidības indeksa aprēķiniem izmantots Mežu (smalkā) daudzveidība rezultāts. Zemāk esošās komandu rindas izveido un saglabā slāni Daudzv_Mezu_x500.tif, kurš tiks izmantots EGV sagatavošanai. Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(landscapemetrics)) {install.packages(&quot;landscapemetrics&quot;); require(landscapemetrics)} if(!require(foreach)) {install.packages(&quot;foreach&quot;); require(foreach)} if(!require(doParallel)) {install.packages(&quot;doParallel&quot;); require(doParallel)} # mapes ---- # mezu daudzveidiba dir.create(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Mezu_x500&quot;) # kvadrati ---- kvadrati=st_read_parquet(&quot;./Templates/TemplateGrids/tikls500_sauzeme.parquet&quot;) numuri=levels(factor(kvadrati$tks50km)) library(foreach) library(doParallel) cl &lt;- makeCluster(24) # jānorāda atbilstoši izmantotajai iekārtai registerDoParallel(cl) foreach(i = 1:length(numuri)) %dopar% { library(tidyverse) library(sf) library(arrow) library(sfarrow) library(terra) library(raster) library(exactextractr) library(fasterize) library(landscapemetrics) sakums=Sys.time() print(i) solis=numuri[i] sunas=kvadrati %&gt;% filter(tks50km==solis) telpa=st_as_sfc(st_bbox(sunas)) telpa2=st_buffer(telpa,dist=1000) template_500=rast(&quot;./Templates/TemplateRasters/LV500m_10km.tif&quot;) temp500_mazs=crop(template_500,telpa2) rastrs_500_mazs=raster::raster(temp500_mazs) # mezu daudzveidiba slanis=rast(&quot;./Rastri_10m/Ainava_MezuSmalkaDaudzveidiba.tif&quot;) slanis_mazs=crop(slanis,telpa2) a=sample_lsm(slanis_mazs,y=sunas,plot_id=sunas$id,what=&quot;lsm_l_shdi&quot;) a$value[is.na(a$value)]=0 sunas$vertibas=a$value slanis=fasterize::fasterize(sunas,rastrs_500_mazs,field=&quot;vertibas&quot;) slanis=rast(slanis) slanis2=terra::mask(slanis,temp500_mazs,overwrite=TRUE, filename=paste0(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Mezu_x500/Daudzv_Mezu_x500_&quot;,solis,&quot;.tif&quot;)) beigas=Sys.time() ilgums=beigas-sakums print(ilgums) } stopCluster(cl) ## mozaīkas ---- # mezu daudzveidiba slani=list.files(&quot;./IevadesDati/ainava/Daudzveidibai/Daudzv_Mezu_x500/&quot;,full.names = TRUE) virt_slani=terra::vrt(slani) names(virt_slani)=&quot;Daudzv_Mezu_x500&quot; writeRaster(virt_slani,&quot;./Rastri_500m/Daudzv_Mezu_x500.tif&quot;,overwrite=TRUE) 3.2.3 Vides pārmaiņas Vides pārmaiņas nepieciešamas novērojumu filtrēšanai. Daļēji tās būtu iegūstamas no Meža Valsts reģistrs un LAD lauku informācija datiem, tomēr projekta darba grupā nav pieejami ik gada raksturojumi (1) un šīs datubāzes neaptver visu valsts teritoriju (2), tādēļ nepieciešams neatkarīgs vērtējums. Tāda izstrādāšanai izmantojām Dynamic World izpēte aprīļa līdz augusta ik gadam no 2017. līdz 2023. rezultātus un Global Forest Watch datus, raksturojot pārmaiņu apjomus analīzes šūnā (nodaļa 100 m režģis Latvijā) un putnu ligzdošanas iecirkņu rādiusu grupu (1.1 att.) buferos ap analīzes šūnu centriem. Saskaņā ar Dynamic World izpēte rezultātiem, ir vērts izmantot šo resursu vides kopējo pārmaiņu analīzē kopš 2017. gada. Par kopējām pārmaiņām uzskatīta jebkura izmaiņa Dynamic World klasē, to salīdzinot ik 10 m pikselim aprīļa-augusta sezonā starp katriem diviem secīgiem gadiem. Pārmaiņu apjoms raksturots kā platības īpatsvars 100 m šūnā vai putnu ligzdošanas iecirkņu rādiusu grupu buferos ap šīs šūnas centru. Tā kā pārmaiņas analizētas vienos un tajos pašos rastros, izmantojot dažādus laukumveida objektus, kurus nepieciešams apvienot vienā failā, katras ģeometrijas raksturojums iestrādāts lauku nosaukumos. Kopumā līdzīga procedūra veikta koku vainagu seguma izzušanas apjoma (īpatsvara no telpas kopumā) raksturošanai. Tomēr šī informācija ir iestrādāta vienā rastra slānī, notikuma gadu norādot kā pikseļa vērtību. Tas ikgadējā samazinājuma apjoma aprēķināšanu apgrūtina, tomēr nepadara par neiespējamu (skatīt komandu rindas zemāk, specifiski - funkciju darbiba). Līdz ar ik gadu zudušā koku vainagu seguma īpatsvara no analīzes telpas platības iegūšanu, tā pievienota analizētajai ģeometrijai kā atsevišķs lauks katram notikuma gadam. Tāpat kā iepriekš - lauku nosaukumi harmonizēti, tajos iestrādājot analīzes telpas raksturojumu, un rezultāti pievienoti 100 m režģa atbilstošajām šūnām. Šis uzdevums ir visai smagnējs no skaitļošanas viedokļa. Tā veikšanai ir jāieplāno pietiekošs apjoms datorresursu. Iniciāli tas īstenots, izmantojot 68 GiB RAM un daļā uzdevuma, aprēķinus veicot 12 paralēlos procesos, vairākās diennaktīs. Potenciāli, to ir iespējams izpildīt ātrāk, pārskatot zonālās statistikas lietojumu saistībā ar Procesēšanas atvieglošana. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)){install.packages(&quot;exactextractr&quot;);require(exactextractr)} if(!require(foreach)) {install.packages(&quot;foreach&quot;); require(foreach)} if(!require(doParallel)) {install.packages(&quot;doParallel&quot;); require(doParallel)} # režģis un buferi lapas_tikls=data.frame(fails_c=list.files(&quot;./Templates/TemplateGrids/lapas/&quot;)) lapas_tikls$cels_grid=paste0(&quot;./Templates/TemplateGrids/lapas/&quot;,lapas_tikls$fails_c) lapas_tikls$lapa=substr(lapas_tikls$fails,10,13) lapas_radiusi=data.frame(fails_r=list.files(&quot;./Templates/TemplateGridPoints/lapas/&quot;)) lapas_radiusi$cels_radiuss=paste0(&quot;./Templates/TemplateGridPoints/lapas/&quot;,lapas_radiusi$fails_r) lapas_radiusi=separate(lapas_radiusi,fails_r, into=c(&quot;sakums&quot;,&quot;veids&quot;,&quot;lapa&quot;,&quot;beigas&quot;),remove = FALSE) lapas_r500=lapas_radiusi %&gt;% filter(veids==&quot;r500&quot;) %&gt;% mutate(fails_r500=fails_r, cels_r500=cels_radiuss) %&gt;% dplyr::select(-sakums,-beigas,-fails_r,-cels_radiuss,-veids) lapas_r1250=lapas_radiusi %&gt;% filter(veids==&quot;r1250&quot;) %&gt;% mutate(fails_r1250=fails_r, cels_r1250=cels_radiuss) %&gt;% dplyr::select(-sakums,-beigas,-fails_r,-cels_radiuss,-veids) lapas_r3000=lapas_radiusi %&gt;% filter(veids==&quot;r3000&quot;) %&gt;% mutate(fails_r3000=fails_r, cels_r3000=cels_radiuss) %&gt;% filter(sakums==&quot;pts100&quot;) %&gt;% dplyr::select(-sakums,-beigas,-fails_r,-cels_radiuss,-veids) lapas=lapas_tikls %&gt;% left_join(lapas_r500) %&gt;% left_join(lapas_r1250) %&gt;% left_join(lapas_r3000) # vides rastri tcl=rast(&quot;./Rastri_10m/TreeCoverLossYear.tif&quot;) tcl2=ifel(tcl&lt;17,NA,tcl) # Zudumi tikai kopš 2017. gada writeRaster(tcl2,&quot;./VidesParmainas/KokuVainagiem.tif&quot;) dw17=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2017_apraug.tif&quot;) dw18=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2018_apraug.tif&quot;) dw19=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2019_apraug.tif&quot;) dw20=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2020_apraug.tif&quot;) dw21=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2021_apraug.tif&quot;) dw22=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2022_apraug.tif&quot;) dw23=rast(&quot;./IevadesDati/DynamicWorld/DynamicWorld_Eksperimentam/DWE_mosaic/DW_2023_apraug.tif&quot;) chDWa=ifel(dw17==dw18,0,1) # Pārmaiņas no 2017. uz 2018. gadu writeRaster(chDWa,&quot;./VidesParmainas/chDWa.tif&quot;) chDWb=ifel(dw18==dw19,0,1) # Pārmaiņas no 2018. uz 2019. gadu writeRaster(chDWb,&quot;./VidesParmainas/chDWb.tif&quot;) chDWc=ifel(dw19==dw20,0,1) # Pārmaiņas no 2019. uz 2020. gadu writeRaster(chDWc,&quot;./VidesParmainas/chDWc.tif&quot;) chDWd=ifel(dw20==dw21,0,1) # Pārmaiņas no 2020. uz 2021. gadu writeRaster(chDWd,&quot;./VidesParmainas/chDWd.tif&quot;) chDWe=ifel(dw21==dw22,0,1) # Pārmaiņas no 2021. uz 2022. gadu writeRaster(chDWe,&quot;./VidesParmainas/chDWe.tif&quot;) chDWf=ifel(dw22==dw23,0,1) # Pārmaiņas no 2022. uz 2023. gadu writeRaster(chDWf,&quot;./VidesParmainas/chDWf.tif&quot;) plot(chDWf) # pārmaiņu analīze soli=levels(factor(lapas$lapa)) cl &lt;- makeCluster(12) # jānorāda izmantojamo kodolu (fizisko) skaits registerDoParallel(cl) foreach(i = 1:length(soli)) %dopar% { library(terra) library(sf) library(tidyverse) library(arrow) library(sfarrow) library(exactextractr) # funkcija platībaīpatsvarā kurā noticis koku vainagu seguma zudums # noteikšanai katrā gadā (2017-2023) darbiba &lt;- function(raster, vector) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction/sum(coverage_fraction,na.rm = TRUE)) %&gt;% arrange(value) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) } # darba lapas solis=soli[i] celi=lapas %&gt;% filter(lapa==solis) # poligonu ielasīšana sunas=st_read_parquet(celi$cels_grid) sunas=sunas %&gt;% dplyr::select(id,yes,tks50km,X,Y) r500=st_read_parquet(celi$cels_r500) r500=r500 %&gt;% dplyr::select(id,yes,tks50km,X,Y) r1250=st_read_parquet(celi$cels_r1250) r1250=r1250 %&gt;% dplyr::select(id,yes,tks50km,X,Y) r3000=st_read_parquet(celi$cels_r3000) r3000=r3000 %&gt;% dplyr::select(id,yes,tks50km,X,Y) # konkrētās darba lapas robežas telpa=st_as_sfc(st_bbox(r3000)) telpa2=st_buffer(telpa,dist=1000) # koku vainagu seguma pārmaiņas tcl2=rast(&quot;./VidesParmainas/KokuVainagiem.tif&quot;) tcl_telpa=crop(tcl2,telpa2) loss_cell=darbiba(tcl_telpa, sunas) sunas=cbind(sunas,loss_cell) loss_r500=darbiba(tcl_telpa, r500) r500=cbind(r500,loss_r500) loss_r1250=darbiba(tcl_telpa, r1250) r1250=cbind(r1250,loss_r1250) loss_r3000=darbiba(tcl_telpa, r3000) r3000=cbind(r3000,loss_r3000) # Vides pārmaiņas Dynamic World datos chDWa=rast(&quot;./VidesParmainas/chDWa.tif&quot;) chDWb=rast(&quot;./VidesParmainas/chDWb.tif&quot;) chDWc=rast(&quot;./VidesParmainas/chDWc.tif&quot;) chDWd=rast(&quot;./VidesParmainas/chDWd.tif&quot;) chDWe=rast(&quot;./VidesParmainas/chDWe.tif&quot;) chDWf=rast(&quot;./VidesParmainas/chDWf.tif&quot;) names(chDWa)=&quot;DWchange_1718&quot; names(chDWb)=&quot;DWchange_1819&quot; names(chDWc)=&quot;DWchange_1920&quot; names(chDWd)=&quot;DWchange_2021&quot; names(chDWe)=&quot;DWchange_2122&quot; names(chDWf)=&quot;DWchange_2223&quot; mazs_chDWa=crop(chDWa,telpa2) mazs_chDWb=crop(chDWb,telpa2) mazs_chDWc=crop(chDWc,telpa2) mazs_chDWd=crop(chDWd,telpa2) mazs_chDWe=crop(chDWe,telpa2) mazs_chDWf=crop(chDWf,telpa2) mazas_DW=raster::stack(c(mazs_chDWa,mazs_chDWb,mazs_chDWc, mazs_chDWd,mazs_chDWe,mazs_chDWf)) sunam=exact_extract(mazas_DW,sunas,&quot;mean&quot;) r500am=exact_extract(mazas_DW,r500,&quot;mean&quot;) r1250am=exact_extract(mazas_DW,r1250,&quot;mean&quot;) r3000am=exact_extract(mazas_DW,r3000,&quot;mean&quot;) # iegūto rezultātu apvienošana sunas=cbind(sunas,sunam) r500=cbind(r500,r500am) r1250=cbind(r1250,r1250am) r3000=cbind(r3000,r3000am) # rezultējošo failu saglabāšana st_write_parquet(sunas,celi$cels_grid) st_write_parquet(r500,celi$cels_r500) st_write_parquet(r1250,celi$cels_r1250) st_write_parquet(r3000,celi$cels_r3000) } stopCluster(cl) # darba lapu apvienošana pirmas_sunas=sfarrow::st_read_parquet(lapas$cels_grid[lapas$lapa==soli[1]]) pirmas_r500=sfarrow::st_read_parquet(lapas$cels_r500[lapas$lapa==soli[1]]) pirmas_r1250=sfarrow::st_read_parquet(lapas$cels_r1250[lapas$lapa==soli[1]]) pirmas_r3000=sfarrow::st_read_parquet(lapas$cels_r3000[lapas$lapa==soli[1]]) dati_c=pirmas_sunas dati_r500=pirmas_r500 dati_r1250=pirmas_r1250 dati_r3000=pirmas_r3000 for(i in 2:length(soli)){ solis=soli[i] nakosas_sunas=sfarrow::st_read_parquet(lapas$cels_grid[lapas$lapa==solis]) nakosas_r500=sfarrow::st_read_parquet(lapas$cels_r500[lapas$lapa==solis]) nakosas_r1250=sfarrow::st_read_parquet(lapas$cels_r1250[lapas$lapa==solis]) nakosas_r3000=sfarrow::st_read_parquet(lapas$cels_r3000[lapas$lapa==solis]) dati_c=bind_rows(dati_c,nakosas_sunas) dati_r500=bind_rows(dati_r500,nakosas_sunas) dati_r1250=bind_rows(dati_r1250,nakosas_sunas) dati_r3000=bind_rows(dati_r3000,nakosas_sunas) } # apvienoto lapu saglabāšana st_write_parquet(dati_c,&quot;./VidesParmainas/VidesParmainas_suna.parquet&quot;) st_write_parquet(dati_r500,&quot;./VidesParmainas/VidesParmainas_r500.parquet&quot;) st_write_parquet(dati_r1250,&quot;./VidesParmainas/VidesParmainas_r1250.parquet&quot;) st_write_parquet(dati_r3000,&quot;./VidesParmainas/VidesParmainas_r3000.parquet&quot;) # lauku nosaukumu harmonizēšana dati_c2=dati_c %&gt;% mutate(cell_TCLNaN=freq_NaN, cell_TCL17=freq_17, cell_TCL18=freq_18, cell_TCL19=freq_19, cell_TCL20=freq_20, cell_TCL21=freq_21, cell_TCL22=freq_22, cell_TCL23=freq_23, cell_DWchange1718=mean.DWchange_1718, cell_DWchange1819=mean.DWchange_1819, cell_DWchange1920=mean.DWchange_1920, cell_DWchange2021=mean.DWchange_2021, cell_DWchange2122=mean.DWchange_2122, cell_DWchange2223=mean.DWchange_2223) %&gt;% dplyr::select(id,yes,tks50km,X,Y, cell_TCLNaN,cell_TCL17,cell_TCL18,cell_TCL19,cell_TCL20, cell_TCL21,cell_TCL22,cell_TCL23, cell_DWchange1718,cell_DWchange1819,cell_DWchange1920, cell_DWchange2021,cell_DWchange2122,cell_DWchange2223) dati_r500a=data.frame(dati_r500) %&gt;% mutate(r500_TCLNaN=freq_NaN, r500_TCL17=freq_17, r500_TCL18=freq_18, r500_TCL19=freq_19, r500_TCL20=freq_20, r500_TCL21=freq_21, r500_TCL22=freq_22, r500_TCL23=freq_23, r500_DWchange1718=mean.DWchange_1718, r500_DWchange1819=mean.DWchange_1819, r500_DWchange1920=mean.DWchange_1920, r500_DWchange2021=mean.DWchange_2021, r500_DWchange2122=mean.DWchange_2122, r500_DWchange2223=mean.DWchange_2223) %&gt;% dplyr::select(id, r500_TCLNaN,r500_TCL17,r500_TCL18,r500_TCL19,r500_TCL20, r500_TCL21,r500_TCL22,r500_TCL23, r500_DWchange1718,r500_DWchange1819,r500_DWchange1920, r500_DWchange2021,r500_DWchange2122,r500_DWchange2223) dati_r1250a=data.frame(dati_r1250) %&gt;% mutate(r1250_TCLNaN=freq_NaN, r1250_TCL17=freq_17, r1250_TCL18=freq_18, r1250_TCL19=freq_19, r1250_TCL20=freq_20, r1250_TCL21=freq_21, r1250_TCL22=freq_22, r1250_TCL23=freq_23, r1250_DWchange1718=mean.DWchange_1718, r1250_DWchange1819=mean.DWchange_1819, r1250_DWchange1920=mean.DWchange_1920, r1250_DWchange2021=mean.DWchange_2021, r1250_DWchange2122=mean.DWchange_2122, r1250_DWchange2223=mean.DWchange_2223) %&gt;% dplyr::select(id, r1250_TCLNaN,r1250_TCL17,r1250_TCL18,r1250_TCL19,r1250_TCL20, r1250_TCL21,r1250_TCL22,r1250_TCL23, r1250_DWchange1718,r1250_DWchange1819,r1250_DWchange1920, r1250_DWchange2021,r1250_DWchange2122,r1250_DWchange2223) dati_r3000a=data.frame(dati_r3000) %&gt;% mutate(r3000_TCLNaN=freq_NaN, r3000_TCL17=freq_17, r3000_TCL18=freq_18, r3000_TCL19=freq_19, r3000_TCL20=freq_20, r3000_TCL21=freq_21, r3000_TCL22=freq_22, r3000_TCL23=freq_23, r3000_DWchange1718=mean.DWchange_1718, r3000_DWchange1819=mean.DWchange_1819, r3000_DWchange1920=mean.DWchange_1920, r3000_DWchange2021=mean.DWchange_2021, r3000_DWchange2122=mean.DWchange_2122, r3000_DWchange2223=mean.DWchange_2223) %&gt;% dplyr::select(id, r3000_TCLNaN,r3000_TCL17,r3000_TCL18,r3000_TCL19,r3000_TCL20, r3000_TCL21,r3000_TCL22,r3000_TCL23, r3000_DWchange1718,r3000_DWchange1819,r3000_DWchange1920, r3000_DWchange2021,r3000_DWchange2122,r3000_DWchange2223) # visu rādiusu pievienošana režģim vides_parmainas=dati_c2 %&gt;% left_join(dati_r500a,by=c(&quot;id&quot;)) %&gt;% left_join(dati_r1250a,by=c(&quot;id&quot;)) %&gt;% left_join(dati_r3000a,by=c(&quot;id&quot;)) # rezultāta saglabāšana st_write_parquet(vides_parmainas,&quot;./VidesParmainas/VidesParmainas_visas.parquet&quot;) References Brown, C.F., Brumby, S.P., Guzder-Williams, B., Birch, T., Hyde, S.B., Mazzariello, J., Czerwinski, W., Pasquarella, V.J., Haertel, R., Ilyushchenko, S., Schwehr, K., Weisse, M., Stolle, F., Hanson, C., Guinan, O., Moore, R., Tait, A.M., 2022. Dynamic World, Near real-time global 10 m land use land cover mapping, Scientific Data. https://doi.org/10.1038/s41597-022-01307-4 Gorelick, N., Hancher, M., Dixon, M., Ilyushchenko, S., Thau, D., Moore, R., 2017. Google Earth Engine: Planetary-scale geospatial analysis for everyone, Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031 Hansen, M.C., Potapov, P.V., Moore, R., Hancher, M., Turubanova, S.A., Tyukavina, A., Thau, D., Stehman, S.V., Goetz, S.J., Loveland, T.R., Kommareddy, A., Egorov, A., Chini, L., Justice, C.O., Townshend, J.R.G., 2013. High-resolution Global maps of 21st-century forest cover change, Science. https://doi.org/10.1126/science.1244693 Sabater, J.M., n.d. ERA5-Land hourly data from 1950 to present. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). https://doi.org/10.24381/cds.e2161bac Shimada, M., Itoh, T., Motooka, T., Watanabe, M., Shiraishi, T., Thapa, R., Lucas, R., 2013. New global forest/non-forest maps from ALOS PALSAR data (2007–2010), Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2014.04.014 Wang, L., Liu, H., 2006. An efficient method for identifying and filling surface depressions in digital elevation models for hydrologic analysis and modelling, International Journal of Geographical Information Science. https://doi.org/10.1080/13658810500433453 "],["Chapter4.html", "4 Dynamic World izpēte 4.1 Q0: DW nosegums 4.2 Q1: Lauksaimniecības kultūras 4.3 Q2: Mežaudzes augstums sugu grupās 4.4 Q3: Topogrāfiskās kartes mitrāji 4.5 Q4: Karjeri, kūdras ieguves vietas un ceļi 4.6 Q5: Izcirtuma izmērs un forma 4.7 Q6: Zālāju transformācija uz aramzemēm 4.8 Secinājumi", " 4 Dynamic World izpēte Dynamic World (DW) ir relatīvi nesens Zemes novērošanas sistēmu produkts, kurš klasificē zemes segumu un lietojumu (LULC) deviņās kategorijās (0=water, 1=trees, 2=grass, 3=flooded_vegetation, 4=crops, 5=shrub_and_scrub, 6=built, 7=bare, 8=snow_and_ice), katram ESA Copernicus Sentinel-2 attēlam ar identificēto mākoņainību \\(\\le35%\\), pieļaujot filtrēšanu un dažādu agregāciju veidošanu (Brown et al., 2022). Salīdzinot ar dažādiem statiskākiem (produktu veidā sagatavotiem konkrētiem gadiem ar smagnēju projicēšanu citiem gadiem) un/vai konkrētu ekosistēmas daļu raksturošanai paredzētiem, piemēram EU Crop Map (Ghassemi et al., 2024) un ELULC-10 (Mirmazloumi et al., 2022), DW neapšaubāmi ir ar lielākām sagaidāmajām kļūdām pie klašu (gēotelpiskajām) robežām, tomēr labāku telpisko (klasificēti ir visas izmantojamās satelītainas, nevis vadoties pēc kādas vidi atpazīstošas maskas) un temporālo pārklājumu (dinamiska un tuvu reāllaikam klasifikācijas pieejamība ik satelītainai, nevis atsevišķas projekcijas laikā). Dažādu nesen radīto augstas izšķirtspējas LULC klasifikatoru salīdzinājumos, piemēram, (Venter et al., 2022) un (Xu et al., 2024), ir konstatētas dažādas atšķirības starp tiem, turklāt DW nav bijis uzskatāms par precīzāko, jo sevišķi spējā detektēt relatīvi šaurus līnijaveida objektus un saistībā ar neironu tīklos balstīto pieeju tieksmi pārspīlēt vertikāli strukturētās klases, tomēr tam ir augstākā temporālā pieejamība. Par šajos salīdzinājumos precīzāko uzskatāmajam ESA WorldCover brīvi pieejama ir informācijai tikai par 2020. un 2021. gadiem (https://collections.sentinel-hub.com/worldcover/). Augstās temporālās pieejamības dēļ, DW izpēte turpināta, jo pat, ja klases nav vienmēr korekti atpazītas, ir vērts izpētīt spēju atpazīt pārmaiņas to sastopamībā. Tā kā šī projekta komandai nav zināmi izsekojami (caurspīdīgi, reproducējami) Latvijā veikti DW klasifikācijas un tās pārmaiņu uzticamības pētījumi, šī resursa izpēte veikta projekta ietvaros. Izpētei ir sekojoši mērķi: noskaidrot DW izmantošanas iespējas LĢIA topogrāfiskās kartes (un citu ierobežotas pieejamības resursu) aizstāšanai sugu izplatības modelēšanai; noskaidrot labāko sezonu (mēnešu griezumā) Latvijas ainavas (un tās pārmaiņu) raksturošanai dzīvnieku vairošanās un veģetācijas sezonā; iegūt informāciju par DW spēju raksturot ainavas pārmaiņas starp gadiem. Izpēti fokusējām dzīvnieku vairošanās sezonai, kuras plaši pārklājas ar veģetācijas sezonu, kurā ir sagaidāma augstākā klasifikatoru spēja sniegt informatīvu rezultātu. Sezonas sākums: aprīlis, jo: šis ir mēnesis, kurā daļa valsts teritorijas vēl var būt zem sniega segas, bet lielākajā teritorijas daļā tas jau būs nokusis; šajā mēnesī sākas lapu koku plaukšana, bet tikai sākas, tomēr visbiežāk jau visā valsts teritorijā; lakstaugu veģetācija būs sazaļojusi galvenokārt ziemājos, bet ne dabiskajā veģetācijā; protams, uz mēneša beigām dažādi mauriņi u. tml., bet tas vēl nebūs noticis mēneša sākumā; vajadzētu būt vēl saglabājušamies sniega kušanas ūdeņiem, ja tādi bija uzkrājušies; Sezonas beigas: augusts, jo: tas labi sakrīt ar laiku, kad ligzdošanas un vairošanās sezona ir noslēgusies vairumam dzīvnieku sugu; sākas migrāciju sezona, kas gan ierosina, ka jūlijs varētu būt labāks beigu punkts, bet ir vērts pārbaudīt dažādas kombinācijas; intensīvi sākas rudens aršanas darbi, kas veido (t.sk. iznīcina) dzīvotnes nākošajai sezonai (pat, ja ietekmēta ziemošana, tās reproduktīvā vai teritoriju aizņemtības izpausme būs novērojama nākošajā sezonā); arī šis sliecas ierosināt, ka jūlijs būtu labāks beigu punkts, bet ir vērts pārbaudīt dažādas kombinācijas; šis mēnesis vēl ir svarīgs daudzām bezmugurkaulnieku sugām, to konstatēšanai; Soļa garums analīzēm: 2-5 secīgi mēneši, jo tikai viena mēneša izmantošana nebūtu sevišķi laba doma, ja tas ir, piemēram, tikai viens aprīļa mēnesis, varētu būt problēmas ar jebkādu veģetāciju, bet vasaras mēnešos ar ūdeņainajām vietām utml.; secīgi, jo savādāk nav loģiski; pieci, jo periodā ir tikai pieci; kopējais kombināciju skaits sezonalitātes pārbaudēm sanāk desmit (turpmākajos apzīmējumos lietots pirmā un pēdējā mēneša trīs burtu saīsinājumu angļu valodā apvienojums bez atdalītājiem): apr-may; apr-may-jun; apr-may-jun-jul; apr-may-jun-jul-aug; may-jun; may-jun-jul; may-jun-jul-aug; jun-jul; jun-jul-aug; jul-aug Mērķa sasniegšanai ir izvirzāmi vairāki izpētes jautājumi, kuri ir risināti šīs nodaļas sekojošajās daļās: Kuros gados un kādos griezumos DW slāņi nosedz visu Latviju, kāda ir datu multi-temporālā un telpiskā pieejamība?; Cik labi tiek atpazītas lauksaimniecības kultūras plašās grupās - nepieciešams, lai šo izmantotu par pamatu turpmākam darbam ainavas klasificēšanā par kultūrām, par kurām nav izpratnes, un vietām, par kurām nav pieejama reģistru informācija, raksturošanai; Kāda ir mežaudzes augstuma (atkarībā no valdošās koku sugas) saistība ar DW mežu/koku un krūmu klasēm - nepieciešama, lai veiktu ainavas klasifikāciju par vietām, kurām nav reģistru, izdalītu koku un krūmu pudurus; Kāds ir topogrāfiskās kartes ar mitrājiem saistāmo klašu sadalījums DW klasēs, kad ir labākā saistība ar vēlamo klasi (un kura tad tā būtu augstajiem purviem un ūdeņu veģetācijai) - nepieciešams gan ainavas, gan pārmaiņu raksturošanai; Kāda ir topogrāfiskās kartes karjeru un kūdras ieguves vietu, kā arī dažādu ceļu saistība ar DW klasēm - nepieciešams gan ainavas, gan pārmaiņu raksturošanai; Kāda ir izcirtuma izmēra (un formas) saistība ar DW klasēm - nepieciešams gan ainavas, gan pārmaiņu raksturošanai; Kāda DW klase tiek piešķirta aramzemēm, kuras pirms gada transformētas no zālājiem - nepieciešams ainavas pārmaiņām. Kopējie uzstādījumi analīžu veikšanai poligonu atlasei izmantojam ‘set.seed(0)’, lai nodrošinātu rezultātu reproducējamību; laika taupīšanai, ik analizei nejauši izlozējam 999 vai izmantojam visus pieejamos poligonus; ik analīzi veicam kā zonālo statistiku, aptverot visu pētāmo plankumu; DW ik periodam ir resamplēts sakritībai ar references 10 m šūnu un ietver tikai Latvijas teritoriju. DW ievades informācija - rastra slānis katrai sezonai katrā gadā - sagtavots Google Earth Engine (GEE) platformā (Gorelick et al., 2017), izmantojot replicēšanas skriptu. Lai izmantotu šo skriptu, ir nepieciešams GEE konts un projekts un pietiekošs apjoms vietas Google Drive diskā. Izpildot komandrindas tiks piedāvāta lejuplāde failam, kas aptver laika periodu no vērtības 7. rindā līdz vērtībai 8. rindā (faila nosaukums norādāms 32. rindā, tā apraksts - 33. rindā un direktorija Google diskā - 31. rindā vai tas viss norādāms apstiprinot saglabāšanau) - šis skripts nav optimizēts visu sezonālo griezumu visiem gadiem sagatavošanai, lai reproducētu vai paplašinātu šo izpēti, tās nepieciešams manuāli izmainīt. Pēc komandrindu izpildes un rezultātu sagatavošanas Google Drive diskā, ir redzams, ka katrs visu Latviju aptverošais slānis ir sadalīts vairākās lapās. Tas ir tādēļ, ka, lai nodrošinātu nulles patieso vērtību (klase “water”, nevis fons), slāņi kodēti kā Float, nevis veselie skaitļi. Visas šīs lapas ir nepieciešams lejuplādēt, sekojošās R komandrindas tās apvieno, nodrošinot koordinātu sistēmas un pikseļu atbilstību references rastram. Code if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} # reference paraugs=rast(&quot;./LV10m_10km.tif&quot;) # saraksts ar lejupielādētajiem failiem, pieņemot, ka tie atrodas direktorijā # &quot;DWE_float&quot; faili=data.frame(faili=list.files(&quot;./DWE_float/&quot;)) faili$celi_sakums=paste0(&quot;./DWE_float/&quot;,faili$faili) # Korekti projicētu mozaīku sagatavošana # failu nosaukumi un ceļš saglabāšanai faili=faili %&gt;% separate(faili,into=c(&quot;DW&quot;,&quot;gads&quot;,&quot;periods&quot;,&quot;parejais&quot;),sep=&quot;_&quot;,remove = FALSE) %&gt;% mutate(unikalais=paste0(DW,&quot;_&quot;,gads,&quot;_&quot;,periods), mosaic_name=paste0(unikalais,&quot;.tif&quot;), masaic_cels=paste0(&quot;./DWE_mosaic/&quot;,mosaic_name)) # unikālie failu nosaukumi cikla vadībai unikalie=levels(factor(faili$unikalais)) # cikls uzdevuma veikšanai for(i in seq_along(unikalie)){ unikalais=faili %&gt;% filter(unikalais==unikalie[i]) beigu_cels=unique(unikalais$masaic_cels) # ik slānis sastāv no divām lapām viens=rast(unikalais$celi_sakums[1]) divi=rast(unikalais$celi_sakums[2]) viens2=project(viens,paraugs) divi2=project(divi,paraugs) mozaika=mosaic(viens2,divi2,fun=&quot;first&quot;) maskets=mask(mozaika,paraugs,filename=beigu_cels,overwrite=TRUE) } 4.1 Q0: DW nosegums Katram gadam (2015-2023) ik iepriekš minētajam sezonas griezumam DW datu pārklājum ir apskatāmi zemāk esošajā attēlā 4.1. Kā jau sagaidāms, 2015. gadā ir trūcīgs nosegums. Pārskata periodā resurss ir samērā droši izmantojams kopš 2018. gada, kopš 2016. gada pielietojamība ir vērtējama, atkarībā no mērķiem un vērtējama saistībā ar sezonas griezumiem. Figure 4.1: DW rezultātu pieejamība dažādos sezonālajos griezumos kopš Sentinel-2 programmas datu pieejamības. Pikseļu krāsa attēla daļās raksturo 1 km šūnās esošo klasifikācijas iztrūkumu īpatsvaru, savukārt skaitļi attēla daļās - kopējo klasifikācijas robu īpatsvaru procentos (%). Komandu rindas reproducēšanai: Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(openxlsx)) {install.packages(&quot;openxlsx&quot;); require(openxlsx)} # 10 m rastra template paraugs=rast(&quot;./LV10m_10km.tif&quot;) # 100 m režģis kvadrati=st_read_parquet(&quot;./tikls1k_sauzeme.parquet&quot;) # robu analīze failu_objekts2=data.frame(faili=list.files(&quot;./DWE_mosaic/&quot;)) failu_objekts2$celi_sakums=paste0(&quot;./DWE_mosaic/&quot;,failu_objekts2$faili) failu_objekts2$celi_beigas=paste0(&quot;./DWEm_missing/&quot;,&quot;missing_&quot;,failu_objekts2$faili) failu_objekts2=failu_objekts2 %&gt;% separate(faili,into=c(&quot;DW&quot;,&quot;gads&quot;,&quot;sezona&quot;,&quot;ext&quot;),remove = FALSE) failu_objekts2$celi_parquet=paste0(&quot;./DWEm_missing/&quot;,&quot;missing_&quot;,&quot;DW_&quot;, failu_objekts2$gads,&quot;_&quot;, failu_objekts2$sezona, &quot;.parquet&quot;) failu_objekts2$missings=NA_real_ for(j in 1:length(failu_objekts2$faili)){ print(j) cels=failu_objekts2$celi_sakums[j] cels_beigas=failu_objekts2$celi_beigas[j] cels_parquet=failu_objekts2$celi_parquet[j] gads=failu_objekts2$gads[j] sezona=failu_objekts2$sezona[j] print(cels) print(cels_beigas) dw1=terra::rast(cels) dw2=classify(dw1,cbind(0,10,0)) dw3=terra::cover(dw2,paraugs,filename=cels_beigas,overwrite=TRUE) iztrukumi=global(dw3, &quot;mean&quot;, na.rm=TRUE) failu_objekts2$missings[j]=round(iztrukumi$mean*100,2) robi_tikla=exact_extract(dw3,kvadrati,&quot;mean&quot;,max_cells_in_memory=1300000000) kvadrati2=kvadrati kvadrati2$robi_tikla=robi_tikla kvadrati2$gads=gads kvadrati2$sezona=sezona st_write_parquet(kvadrati2,cels_parquet) } write.xlsx(failu_objekts2,&quot;./DWmc_missing.xlsx&quot;) # parquet savienošana robu_kvadrati &lt;- map_dfr(list.files(&quot;./DWEm_missing/&quot;,pattern=&quot;.parquet&quot;, full.names = TRUE), sfarrow::st_read_parquet, show_col_types = FALSE) robu_kvadrati2=robu_kvadrati %&gt;% mutate(gads2=as.numeric(gads), sezona2=factor(sezona,ordered=TRUE, levels=c(&quot;aprmay&quot;,&quot;aprjun&quot;,&quot;aprjul&quot;,&quot;apraug&quot;,&quot;mayjun&quot;, &quot;mayjul&quot;,&quot;mayaug&quot;,&quot;junjul&quot;,&quot;junaug&quot;,&quot;julaug&quot;))) failu_objekts2=failu_objekts2 %&gt;% mutate(gads2=as.numeric(gads), sezona2=factor(sezona,ordered=TRUE, levels=c(&quot;aprmay&quot;,&quot;aprjun&quot;,&quot;aprjul&quot;,&quot;apraug&quot;,&quot;mayjun&quot;, &quot;mayjul&quot;,&quot;mayaug&quot;,&quot;junjul&quot;,&quot;junaug&quot;,&quot;julaug&quot;))) %&gt;% mutate(x=410000,y=210000, missings2=paste0(missings,&quot; %&quot;)) # rezultāta vizualizācija ggplot()+ geom_sf(data=robu_kvadrati2,aes(fill=robi_tikla,col=robi_tikla))+ facet_grid(gads2~sezona2)+ theme_bw()+ coord_sf(datum=sf::st_crs(3059))+ geom_text(data=failu_objekts2,aes(x=x,y=y,label=missings2),size=2.5)+ labs(fill=&quot;Missing&quot;,col=&quot;Missing&quot;)+ theme(axis.ticks = element_blank(), axis.text = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank()) ggsave(&quot;./pic_missings.png&quot;,height = 3000,width=5000,units=&quot;px&quot;) 4.2 Q1: Lauksaimniecības kultūras Ir tādas kultūras, par kurām ir skaidrs, ka tām ir jāsakrīt ar DW klasēm, tās ir apskatāmas, lai pārbaudītu šīs Zemes novērošanas sistēmu (EO) klasifikācijas korektumu. Ir tādas kultūras, par kurām nav īsti skaidra šī atbilstība, to ir jānoskaidro pēc pirmās grupas izpētes rezultāta. Bet ir arī tādas kultūras, par kurām ir zināmas bažas par EO datu klasifikācijas rezultātu precizitātes iespējamību, piemēram, kukurūza un auzas. Aplūkojam sekojošas izpētes grupas: ziemāji aramzemēs, kur nav sagaidāmas problēmas, piemēram, rudzi, ziemas mieži, ziemas kvieši, ziemas tritikāle; ziemas rapsis; vasarāji aramzemēs, kur nav sagaidāmas problēmas, piemēram, vasaras mieži, vasaras kvieši, vasaras tritikāle; vasaras rapsis; auzas, jo dažādā izpratnē un pētījumos sarežģīti klasificējas EO datos; kukurūza, jo tur ir visādi jautājumi ar augšanu, augstumu un novākšanu - katrā no trim veidiem, lai labāk saprastu šo ainavā un dabas aizsardzībā nozīmīgo grupu; papuves, lai labāk izprastu šo klasi; ilggadīgi zālāji; kultivētās pļavas, lai labāk saprastu šo klasi; augļukoki, kur apvieno, augļu koki, ābeles, bumbieres, lai labāk saprastu šo klasi; ogu-krūmi, kur apvieno avenes, upenes, jāņogas, ērkšķogas, krūmcidonijas, kazenes, lai labāk saprastu šo klasi; zemās ogas, kur apvieno krūmmellenes un lieogu dzērvenes, bezatbalsta platības, kur apvieno kodus 620 un 792 vagu un rušināmkultūras, kuru ilustrēšanai izmantošu kodus 821, 825, 843, 844 īscirtmeta atvasāji un enerģijas augi, kurā apvienoti kodi 644, 645, 646, 641, 642 Izmantojam 2023. gada DW sezonālos slāņus. Lai gan šajā izpētes solī fokuss ir uz augstāk minētajām grupām, sugu izplatības modelēšanai ir nepieciešams klasificēt visas kultūras, tādēļ jau uzreiz skatām visas kultūras. Komandu rindas DW klašu sastopamības izpētei ir zemāk. To ietvaros izmantota LAD lauku informācija un šajā nodaļā (augstāk) sagatavotās 2023. gada DW sezonālās mozaīkas. Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # ievades dati LAD &lt;- st_read_parquet(&quot;./LAD_lauki.parquet&quot;) AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW klašu ekstrakcija ik lauka kultūru nejauši izlozētiem plankumiem # kultūru kodi kodi=data.frame(kodi=levels(factor(LAD$PRODUCT_CODE))) # saglabāšanas datu pamatne dati=LAD[1,] dati=dati %&gt;% mutate(periods=NA_character_, id=NA_real_, freq_0=NA_real_, freq_1=NA_real_, freq_2=NA_real_, freq_3=NA_real_, freq_4=NA_real_, freq_5=NA_real_, freq_6=NA_real_, freq_7=NA_real_, freq_8=NA_real_, freq_NA=NA_real_) # ekstrakcija ik kodams, veicot izlozi for (i in 1:length(kodi$kodi)){ kods=kodi$kodi[i] # nejaušo plankumu izloze set.seed(0) lauki &lt;- LAD %&gt;% filter(`PRODUCT_CODE` == kods) if (nrow(lauki) &lt; 999) {rand_l &lt;- lauki} else {rand_l &lt;- lauki %&gt;% sample_n(999)} rand_l &lt;- rand_l %&gt;% mutate(id = row_number()) # ekstrakcija a=cbind(rand_l,darbiba(AprAug, rand_l, &quot;AprAug&quot;)) b=cbind(rand_l,darbiba(AprJul, rand_l, &quot;AprJul&quot;)) c=cbind(rand_l,darbiba(AprJun, rand_l, &quot;AprJun&quot;)) d=cbind(rand_l,darbiba(AprMay, rand_l, &quot;AprMay&quot;)) e=cbind(rand_l,darbiba(JulAug, rand_l, &quot;JulAug&quot;)) f=cbind(rand_l,darbiba(JunAug, rand_l, &quot;JunAug&quot;)) g=cbind(rand_l,darbiba(JunJul, rand_l, &quot;JunJul&quot;)) h=cbind(rand_l,darbiba(MayAug, rand_l, &quot;MayAug&quot;)) i=cbind(rand_l,darbiba(MayJul, rand_l, &quot;MayJul&quot;)) j=cbind(rand_l,darbiba(MayJun, rand_l, &quot;MayJun&quot;)) # rezultātu apvienošana rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) } # ērtāki lauku nosaukumi dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) # atbrīvošanās no liekā ieraksta dati_real=dati[-1,] # rezultāta saglabāšana sfarrow::st_write_parquet(dati_real,&quot;./Q1_kulturas.parquet&quot;) 4.2.1 Q1.1: Ziemāji aramzemēs Sekojošajā attēlā 4.2 ir ilustrēta ziemāju aramzemēs (kultūru kodi “121”,“122”,“132”,“112”,“116”,“151”) saistība ar DW klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. Ievērojami zemāka par atlikušajām klasēm ir arī tikai pavasara klasifikācija. Atlikušās ir visai līdzīgas, nedaudz pārāki temporālie griezumi šķiet maijā-jūnijā un maijā-jūlijā. &lt;img src=“./Atteli/ch004_q11.png” alt=“Lauksaimniecības kultūru grupas”ziemāji” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.2: Lauksaimniecības kultūru grupas “ziemāji” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) ziemaji_aramzemes=c(&quot;121&quot;,&quot;122&quot;,&quot;132&quot;,&quot;112&quot;,&quot;116&quot;,&quot;151&quot;) q11data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% ziemaji_aramzemes) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q11data2=q1data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q11data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q11data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q11.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.2 Q1.2: Ziemas rapsis Sekojošajā attēlā 4.3 ir ilustrēta ziemas rapša (kultūras kods “212”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. &lt;img src=“./Atteli/ch004_q12.png” alt=“Lauksaimniecības kultūru grupas”ziemas rapsis” saistība ar DW klasēm.” width=“60%” /&gt; Figure 4.3: Lauksaimniecības kultūru grupas “ziemas rapsis” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) ziemas_rapsis=c(&quot;212&quot;) q12data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% ziemas_rapsis) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q12data2=q12data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q12data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q12data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=200,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q12.png&quot;,width=200,height=100,units=&quot;mm&quot;,dpi=600) 4.2.3 Q1.3: Vasarāji aramzemēs Sekojošajā attēlā 4.4 ir ilustrēta vasarāju aramzemēs (kultūru kodi “131”,“111”,“150”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. &lt;img src=“./Atteli/ch004_q13.png” alt=“Lauksaimniecības kultūru grupas”vasarāji aramzemēs” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.4: Lauksaimniecības kultūru grupas “vasarāji aramzemēs” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) vasaraji_aramzemes=c(&quot;131&quot;,&quot;111&quot;,&quot;150&quot;) q13data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% vasaraji_aramzemes) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q13data2=q13data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q13data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q13data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q13.png&quot;,width=300,height=100,units=&quot;mm&quot;,dpi=600) 4.2.4 Q1.4: Vasaras rapsis Sekojošajā attēlā 4.5 ir ilustrēta vasaras rapša (kultūras kods “211”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. &lt;img src=“./Atteli/ch004_q14.png” alt=“Lauksaimniecības kultūru grupas”vasaras rapsis” saistība ar DW klasēm.” width=“60%” /&gt; Figure 4.5: Lauksaimniecības kultūru grupas “vasaras rapsis” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) vasaras_rapsis=c(&quot;211&quot;) q14data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% vasaras_rapsis) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q14data2=q14data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q14data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q14data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=200,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q14.png&quot;,width=200,height=100,units=&quot;mm&quot;,dpi=600) 4.2.5 Q1.5: Auzas Sekojošajā attēlā 4.6 ir ilustrēta auzu (kultūras kods “140”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. &lt;img src=“./Atteli/ch004_q15.png” alt=“Lauksaimniecības kultūru grupas”auzas” saistība ar DW klasēm.” width=“60%” /&gt; Figure 4.6: Lauksaimniecības kultūru grupas “auzas” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) auzas=c(&quot;140&quot;) q15data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% auzas) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q15data2=q15data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q15data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q15data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=200,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q15.png&quot;,width=200,height=100,units=&quot;mm&quot;,dpi=600) 4.2.6 Q1.6: Kukurūza Sekojošajā attēlā 4.7 ir ilustrēta kukurūzas (kultūru kodi “791”,“741”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. &lt;img src=“./Atteli/ch004_q16.png” alt=“Lauksaimniecības kultūru grupas”kukurūza” saistība ar DW klasēm.” width=“80%” /&gt; Figure 4.7: Lauksaimniecības kultūru grupas “kukurūza” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) kukuruza=c(&quot;791&quot;,&quot;741&quot;) q16data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% kukuruza) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q16data2=q16data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q16data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q16data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=250,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q16.png&quot;,width=250,height=100,units=&quot;mm&quot;,dpi=600) 4.2.7 Q1.7: Papuves Sekojošajā attēlā 4.8 ir ilustrēta papuvju (kultūru kodi “610”,“612”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus. Dominējošā klase ir “crops”, tomēr nereti pikseļi ir klasificēti kā “grass”. Atkarībā no sezonas, par “grass” biežāk sastopama var būt klase “trees”, kas, visai droši ir saistāms ar lauka konfigurāciju, kas kā perimetra-laukuma attiecība ir demonstrēts zemāk 4.9. &lt;img src=“./Atteli/ch004_q17.png” alt=“Lauksaimniecības kultūru grupas”papuves” saistība ar DW klasēm.” width=“80%” /&gt; Figure 4.8: Lauksaimniecības kultūru grupas “papuves” saistība ar DW klasēm. &lt;img src=“./Atteli/ch004_q17b.png” alt=“Lauksaimniecības kultūru grupas”papuves” perimetra-laukuma attiecības saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.9: Lauksaimniecības kultūru grupas “papuves” perimetra-laukuma attiecības saistība ar DW klasēm. Komandu rindas attēlu sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) papuve=c(&quot;610&quot;,&quot;612&quot;) q17data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% papuve) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q17data2=q17data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q17data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q17data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=250,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q17.png&quot;,width=250,height=100,units=&quot;mm&quot;,dpi=600) q17data3=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% papuve) %&gt;% mutate(PAr=SHAPE.LEN/SHAPE.AREA) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,PAr,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) ggplot(q17data3,aes(PAr,proporcija,col=klase))+ facet_wrap(~sezona,ncol=5)+ geom_point(alpha=0.2)+ geom_smooth()+ theme_bw()+ coord_cartesian(ylim=c(0,1),xlim=c(0,0.75))+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ theme(axis.title.y = element_blank(), legend.title = element_blank())+ labs(x=&quot;Perimetra-laukuma attiecība&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q17b.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.8 Q1.8: Ilggadīgie zālāji Sekojošajā attēlā 4.10 ir ilustrēta ilggadīgo zālāju (kultūru kods “710”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klases “crops” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka zemākā atbilstība ir izmantojot tikai vasaras mēnešus, tomēr neatkarīgi no temporālā griezuma tā ir uzskatāma par vāju. Viens no iespējamajiem iemesliem ir laukos un to malās esošie koki un krūmi. Lai par to pārliecinātos, veidoju saistību ar perimetra-laukuma attiecību (sekojošajā attēlā). Kā redzams 4.11, tieši koku piesātinājums laukiem ar proporcionāli garāku malu ir iemesls misklasifikācijai. Tomēr arī šādā griezumā ir redzama sezonālā mainība - pavasara mēnešiem ir nozīme. &lt;img src=“./Atteli/ch004_q18.png” alt=“Lauksaimniecības kultūru grupas”ilggadīgi zālāji” saistība ar DW klasēm.” width=“60%” /&gt; Figure 4.10: Lauksaimniecības kultūru grupas “ilggadīgi zālāji” saistība ar DW klasēm. &lt;img src=“./Atteli/ch004_q18b.png” alt=“Lauksaimniecības kultūru grupas”ilggadīgi zālāji” perimetra-laukuma attiecības saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.11: Lauksaimniecības kultūru grupas “ilggadīgi zālāji” perimetra-laukuma attiecības saistība ar DW klasēm. Komandu rindas attēlu sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) ilggadigi_zalaji=c(&quot;710&quot;) q18data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% ilggadigi_zalaji) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q18data2=q18data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) ggplot(q18data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q18data2,aes(sezona,y=1.1,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=200,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q18.png&quot;,width=200,height=100,units=&quot;mm&quot;,dpi=600) q18data3=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% ilggadigi_zalaji) %&gt;% mutate(PAr=SHAPE.LEN/SHAPE.AREA) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,PAr,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) ggplot(q18data3,aes(PAr,proporcija,col=klase))+ facet_wrap(~sezona,ncol=5)+ geom_point(alpha=0.2)+ geom_smooth()+ theme_bw()+ coord_cartesian(ylim=c(0,1))+ scale_color_viridis_d()+ scale_x_continuous(breaks=seq(0,0.2,by=0.1))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ theme(axis.title.y = element_blank(), legend.title = element_blank())+ labs(x=&quot;Perimetra-laukuma attiecība&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q18b.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.9 Q1.9: Kultivētie zālāji Sekojošajā attēlā 4.12 ir ilustrēta kultivēto zālāju (kultūru kodi “720”,“760”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “crops” un “grass” ar lauka platību svērto vidējo īpatsvaru. Redzama izteikta mainība starp abām dominējošajām klasēm, kas liecina, ka ne katru galu katrs zālājs tiek ielabots aršanai līdzīgā apjomā. Šī mainība, protams, nav ērta, bet ir pamats izdalīt šo biotopu grupu atsevišķi. &lt;img src=“./Atteli/ch004_q19.png” alt=“Lauksaimniecības kultūru grupas”kultivēti zālāji” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.12: Lauksaimniecības kultūru grupas “kultivēti zālāji” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) kultiveti_zalaji=c(&quot;720&quot;,&quot;760&quot;) q19data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% kultiveti_zalaji) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q19data2=q19data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q19data3=q19data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q19data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q19data2,aes(sezona,y=1.1,label=vertiba),size=3)+ geom_text(data=q19data3,aes(sezona,y=1.05,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q19.png&quot;,width=300,height=100,units=&quot;mm&quot;,dpi=600) 4.2.10 Q1.10: Agļukoki Sekojošajā attēlā 4.13 ir ilustrēta augļukoku (kultūru kodi “911”,“912”,“932”,“914”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “trees” un “grass” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka, atkarībā no kultūras, nereti lauki ir klasificēti kā zālāji, nevis koki. No vienas puses tas ir skaidrojams ar telpu starp kokiem, bet var arī būt saistāms ar pašu augļukoku augstumu (šis vairāk tiks apskatīts pie mežaudzēm). &lt;img src=“./Atteli/ch004_q110.png” alt=“Lauksaimniecības kultūru grupas”augļukoki” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.13: Lauksaimniecības kultūru grupas “augļukoki” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) auglukoki=c(&quot;911&quot;,&quot;912&quot;,&quot;932&quot;,&quot;914&quot;) q110data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% auglukoki) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q110data2=q110data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q110data3=q110data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;trees&quot;) ggplot(q110data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q110data2,aes(sezona,y=1.15,label=vertiba),size=3)+ geom_text(data=q110data3,aes(sezona,y=1.07,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q110.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.11 Q1.11: Ogu-krūmi Sekojošajā attēlā 4.14 ir ilustrēta ogu-krūmu (kultūru kodi “921”,“922”,“933”,“927”,“928”,“929”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “crops”, “grass” un “trees” ar lauka platību svērto vidējo īpatsvaru. Redzams, ka, atkarībā no kultūras, nereti lauki ir klasificēti kā zālāji, vai pat aramzemes, nevis koki vai krūmi. No vienas puses tas ir skaidrojams ar telpu starp kultūras augiem, bet var arī būt saistāms ar pašu augu augstumu (šis vairāk tiks apskatīts pie mežaudzēm). Noteikti ir pamats to izdalīt atsevišķā klasē no aramzemēm un zālājiem, domājot par sugu izplatības modelēšanu. &lt;img src=“./Atteli/ch004_q111.png” alt=“Lauksaimniecības kultūru grupas”ogu-krūmi” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.14: Lauksaimniecības kultūru grupas “ogu-krūmi” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) ogukrumi=c(&quot;921&quot;,&quot;922&quot;,&quot;933&quot;,&quot;927&quot;,&quot;928&quot;,&quot;929&quot;) q111data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% ogukrumi) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q111data2=q111data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q111data3=q111data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;trees&quot;) q111data4=q111data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q111data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q111data2,aes(sezona,y=1.15,label=vertiba),size=3)+ geom_text(data=q111data3,aes(sezona,y=1.07,label=vertiba),size=3)+ geom_text(data=q111data4,aes(sezona,y=1.22,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q111.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.12 Q1.12: Zemās ogas Sekojošajā attēlā 4.15 ir ilustrēta zema auguma ogu (kultūru kodi “924”,“934”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “crops”, “grass”, “shrub_and_scrub” un “trees” ar lauka platību svērto vidējo īpatsvaru. Šī klase ir samērā reti sastopama un tās ietvaros ir izteikta heterogenitāte. &lt;img src=“./Atteli/ch004_q112.png” alt=“Lauksaimniecības kultūru grupas”zemās ogas” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.15: Lauksaimniecības kultūru grupas “zemās ogas” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) zemas_ogas=c(&quot;924&quot;,&quot;934&quot;) q112data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% zemas_ogas) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q112data2=q112data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q112data3=q112data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;shrub_and_scrub&quot;) q112data4=q112data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) q112data5=q112data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;trees&quot;) ggplot(q112data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q112data3,aes(sezona,y=1.15,label=vertiba),size=3)+ geom_text(data=q112data5,aes(sezona,y=1.07,label=vertiba),size=3)+ geom_text(data=q112data2,aes(sezona,y=1.23,label=vertiba),size=3)+ geom_text(data=q112data4,aes(sezona,y=1.30,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=250,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q112.png&quot;,width=250,height=100,units=&quot;mm&quot;,dpi=600) 4.2.13 Q1.13: Bezatbalsta platība Sekojošajā attēlā 4.16 ir ilustrēta lauku blokos iekļauto platību, par kurām netiek izmaksāts atbalsts (kultūru kodi “620”,“792”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “crops”, “grass”, “shrub_and_scrub” un “trees” ar lauka platību svērto vidējo īpatsvaru. Šī klase ir samērā reti sastopama un tās ietvaros ir izteikta heterogenitāte. &lt;img src=“./Atteli/ch004_q113.png” alt=“Lauksaimniecības kultūru grupas”bezatbalsta platības” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.16: Lauksaimniecības kultūru grupas “bezatbalsta platības” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) bezatbalsta=c(&quot;620&quot;,&quot;792&quot;) q113data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% bezatbalsta) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q113data2=q113data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q113data3=q113data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;shrub_and_scrub&quot;) q113data4=q113data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) q113data5=q113data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;trees&quot;) ggplot(q113data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q113data3,aes(sezona,y=1.15,label=vertiba),size=3)+ geom_text(data=q113data5,aes(sezona,y=1.07,label=vertiba),size=3)+ geom_text(data=q113data2,aes(sezona,y=1.23,label=vertiba),size=3)+ geom_text(data=q113data4,aes(sezona,y=1.30,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=400,height=100,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q113.png&quot;,width=400,height=100,units=&quot;mm&quot;,dpi=600) 4.2.14 Q1.14: Vagu un rušināmkultūras Sekojošajā attēlā 4.17 ir ilustrēta rušināmkultūru (kultūru kodi “821”,“825”, “843”, “844”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “crops”, “grass” un “trees” ar lauka platību svērto vidējo īpatsvaru. Šīs klases piemēri samērā stabili klasificējas kā aramzemes. &lt;img src=“./Atteli/ch004_q114.png” alt=“Lauksaimniecības kultūru grupas”vagu un rušināmkultūras” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.17: Lauksaimniecības kultūru grupas “vagu un rušināmkultūras” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) rusinamkulturas=c(&quot;821&quot;,&quot;825&quot;, &quot;843&quot;, &quot;844&quot;) q114data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% rusinamkulturas) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q114data2=q114data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q114data3=q114data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;trees&quot;) q114data4=q114data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q114data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q114data2,aes(sezona,y=1.15,label=vertiba),size=3)+ geom_text(data=q114data3,aes(sezona,y=1.07,label=vertiba),size=3)+ geom_text(data=q114data4,aes(sezona,y=1.22,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q114.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.15 Q1.15: Īscirtmeta atvasāji un enerģijas kultūras Sekojošajā attēlā 4.18 ir ilustrēta īscirtmeta atvasāju un enerģijas kultūru (kultūru kodi “644”, “645”, “646”, “641”, “642”) saistība ar Dynamic World klasēm dažādos temporālajos griezumos. Skaitļi attēlu daļās norāda klašu “crops”, “grass” un “trees” ar lauka platību svērto vidējo īpatsvaru. Šīs klases piemēri ir visai heterogēni. Miežabrālis ir lakstaugs, tādēļ skaidra ir samērā izteiktā zālāju klases dominance, tomēr neatkarīgi no sezonas, plaša pārstāvniecība ir arī citām klasēm, kas apgrūtina tā stratificēšanu. Līdzīgi ar kokaugiem, tomēr dominē atbilstošā koku klase, kur pārējās, visticamāk, ir saistītas ar kultūras vecumu, kas tīri teorētiski būtu pieņemami no sugu izplatības modelēšanas viedokļa. &lt;img src=“./Atteli/ch004_q115.png” alt=“Lauksaimniecības kultūru grupas”īscirtmeta atvasāji un enerģijas kultūras” saistība ar DW klasēm.” width=“100%” /&gt; Figure 4.18: Lauksaimniecības kultūru grupas “īscirtmeta atvasāji un enerģijas kultūras” saistība ar DW klasēm. Komandu rindas attēla sagatavošanas reproducēšanai: Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) atvasaji_energy=c(&quot;644&quot;, &quot;645&quot;, &quot;646&quot;, &quot;641&quot;, &quot;642&quot;) q115data=data.frame(dati) %&gt;% filter(PRODUCT_CODE %in% atvasaji_energy) %&gt;% dplyr::select(PRODUCT_CODE,PRODUCT_DESCRIPTION,SHAPE.AREA,sezona,water:snow_and_ice) %&gt;% group_by(PRODUCT_CODE) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% mutate(nosaukums=paste0(PRODUCT_DESCRIPTION,&quot;\\n&quot;,&quot;n=&quot;,skaits)) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q115data2=q115data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;grass&quot;) q115data3=q115data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;trees&quot;) q115data4=q115data %&gt;% group_by(nosaukums,sezona,klase) %&gt;% summarise(vertiba=round(weighted.mean(proporcija,w=SHAPE.AREA,na.rm=TRUE)*100,0)) %&gt;% ungroup() %&gt;% filter(klase==&quot;crops&quot;) ggplot(q115data,aes(sezona,proporcija,col=klase))+ facet_wrap(~nosaukums)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank())+ geom_text(data=q115data2,aes(sezona,y=1.15,label=vertiba),size=3)+ geom_text(data=q115data3,aes(sezona,y=1.07,label=vertiba),size=3)+ geom_text(data=q115data4,aes(sezona,y=1.22,label=vertiba),size=3)+ scale_color_viridis_d()+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q115.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.2.16 Q1: LAD kultūru stratificēšanai Ainavas aprakstu veidošanā sugu izplatības modelēšanai ir jācenšas interpretēt to kā sugas uztver vidi un to kombinēt ar pašas vides aprakstiem (datubāzu informāciju), lai izveidotu atbilstošas pazīmes. Attiecībā uz lauksaimniecībā izmantojamām zemēm, mūsu plāns ir veidot sekojošas grupas (smalkākais dalījums, kuru pēc nepieciešamības apvienot): aramzemes (labība-vasarāji); aramzemes (labība-ziemāji); aramzemes (vagu un rušināmkultūras); aramzemes (vasaras rapsis un rispsis, kukurūzas, zirņi un pupas, soja, kaņepes); aramzemes (ziemas rapsis un ripsis); aramzemes (citur neiekļautās); augļudārzi; krūmveida ilggadīgie stādījumi; papuves; zālāji (ilggadīgie); zālāji (kultivētie); zālāji (ārpus lauku blokiem un bezatbalsta platības). Lai gan šīs klases daļēji atbilst LAD grupām, ir atšķirības un ne vienmēr ir viennozīmīgi skaidrs, kurā grupā konkrētās kultūras iekļaut. Tādēļ veicu principiālo komponentu analīzi (PCA) un K-vidējo (k=12) klāsteranalīzi, lai apskatītu sākotnējo dalījumu un veiktu nepieciešamās korekcijas. Grupēšanās izpētei, izmantoju (1) Aprīļa-Augusta kultūras kodu vidējās vērtības katrā no Dynamic World klasēm un (2) katras Dynamic World klases ik divu mēnešu (“AprMay”,“MayJun”,“JunJul”,“JulAug”) vidējo aritmētisko agregāciju vienotā standartnovirzē kā ievades matricu PCA analīzē. PCA pirmā ass izskaidro 75.5% un otrā ass - 8.4% no kopējās mainības. Kā sekojošajā attēlā 4.19 redzams, starp sākotnēji izdalītajām grupām ir plaša pārklāšanās, jo sevišķi pirmās ass kreisajā malā. Lai gan K-vidējo klāsteranalīze spēj atrast grupas, to apvienošana klāsteranalīzes rezultātos nozīmētu ekoloģiskās jēgas zaudēšanu. Savukārt sugu bioloģijas un ekoloģijas zināšanās un izpratnē par kultūru apsaimniekošanu un veģetācijas attīstības gaitu balstīto grupu sadalīšana smalkākās, radītu nopietnus izaicinājumus sugu izplatības modelēšanā EGV sastopamības dēļ. Tomēr šis vingrinājums arī skaidri uzrādīja atsevišķus kutūru kodus, kuri krasi atšķīrās no pārējām kultūrām savā grupā, tādēļ tie ir pārklasificēti: kultūru kodi 924, 934 un 950 ievietoti pie augļudārziem; kultūru kodi 878, 930 un 940 ievietoti pie kultivētajiem zālājiem. Šis vingrinājums demonstrē, ka, ja nepieciešams izdalīt lauksaimniecības kultūras ekoloģisko atšķirību dēļ, DW nav sevišķi izpalīdzīgs. Protams, eksistē arī citi risinājumi, kas ir sevišķi uzmanīgi pret biežākajām lauksaimniecības kultūrām (un to klasēm), tomēr arī tie neveic tādu dalījumu kā šajās analīzēs ir paredzēts. Tādēļ no LAD datubāzes izmantošanas izvairīties nav iespējams. Šobrīd šķiet, ka Dynamic World varētu sniegt atbalstu platību, kas nav lauku blokos (vai Meža Valsts reģistrā) grupēšanai plašās klasēs, bet, lai par to pārliecinātos, ir jāturpina izpēte. Figure 4.19: PCA rezultāti DW klašu sastopamībai sugu izplatības modelēšanai paredzētajā lauku kultūru dalījumā. Komandu rindas attēla sagatavošanas un veiktās analīzes reproducēšanai (papildus fails - sagatavotais un pēc klāsteranalīzes koriģētais kultūru grupējums): Code dati=sfarrow::st_read_parquet(&quot;./Q1_kulturas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) kulturam=read_excel(&quot;./KulturuKodi_2024.xlsx&quot;) kulturam$kods=as.character(kulturam$kods) dati_means=data.frame(dati) %&gt;% select(PRODUCT_CODE,sezona,water:snow_and_ice) %&gt;% filter(sezona %in% c(&quot;AprAug&quot;)) %&gt;% # izvēlos vienu - garāko sezonu group_by(PRODUCT_CODE) %&gt;% summarise(across(water:snow_and_ice,mean, .names=&quot;mean_{col}&quot;)) %&gt;% ungroup() dati_sds=data.frame(dati) %&gt;% select(PRODUCT_CODE,sezona,water:snow_and_ice) %&gt;% filter(sezona %in% c(&quot;AprMay&quot;,&quot;MayJun&quot;,&quot;JunJul&quot;,&quot;JulAug&quot;)) %&gt;% group_by(PRODUCT_CODE,sezona) %&gt;% summarise_if(is.numeric,mean) %&gt;% group_by(PRODUCT_CODE) %&gt;% summarise(across(water:snow_and_ice,sd, .names=&quot;sd_{col}&quot;)) %&gt;% ungroup() dati2=dati_means %&gt;% left_join(dati_sds,by=&quot;PRODUCT_CODE&quot;) %&gt;% left_join(kulturam,by=c(&quot;PRODUCT_CODE&quot;=&quot;kods&quot;)) matrica=dati2 %&gt;% select(mean_water:sd_snow_and_ice) klasteri &lt;- kmeans(matrica, centers = 12, nstart = 160/12, iter.max = 999) rez_pca = princomp(matrica) summary(rez_pca) rezultati = data.frame(rez_pca$scores, klasteris=klasteri$cluster, SDMgrupa=dati2$SDM_grupa_sakums, kods=dati2$PRODUCT_CODE) ggplot(rezultati,aes(Comp.1,Comp.2,col=SDMgrupa,label=kods))+ geom_point(alpha=0.5,size=4)+ theme_classic()+ theme(panel.background = element_rect(color=&quot;black&quot;))+ labs(x=&quot;PCA pirmā ass (75.5%)&quot;,y=&quot;PCA otrā ass (8.4%)&quot;,col=&quot;Kultūru grupa&quot;)+ theme(axis.title = element_text(size=14), axis.text=element_text(size=12), legend.title = element_text(size=14), legend.text=element_text(size=12)) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q1klasteri.png&quot;, width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.3 Q2: Mežaudzes augstums sugu grupās Lai labāk saprastu potenciālās atšķirības saistībā ar sezonalitāti, pārbaudi veicām dažādām koku sugām (un to grupām) atsevišķi: priedes - tīraudzes; egles - tīraudzes; apses - tīraudzes; bērzi - tīraudzes; melnalksnis - tīraudzes; platlapji - audzes, kurās platlapju krājas koeficientu summa ir &gt;=8; citi - pārējās mežaudzes; Katrā no šīm sugu-grupām veicām nogabalu izlozi katrā vecumgrupā (jaunaudzes, vidēja vecuma audzes, biestaudzes, pieaugušas audzes, pāraugušas audzes) pilnā izlases apjomā, neatkarīgi no apsaimniekošanas vēstures. Tas tad arī veido kokaudzes augstuma gradientu (jaunaudzes, vidēja vecuma un briestaudzes) un ļauj labāk arī saprast veco galu, kurā var būt notikuši jau dažādi dabiskie procesi (pāraugušās audzes). Izmantojām 2023. gada DW sezonālos slāņus. Lai gan primārā interese ir par to no kāda augstuma mežaudzes ir klasificētas kā “trees”, sākumā izmantojām visas DW klases. Kopumā ir novērojama (4.20 att.) augsta Dynamic World klases ‘trees’ sastopamība. Otrā biežākā klase ir ‘grass’, izplatīta jaunaudzēs, savukārt jaunaudzēs sagaidāmā ‘shrub_and_scrub’ ir samērā reti sastopama, tomēr arī jaunaudzēs. Vājākā ‘trees’ pārstāvniecība ir platlapju mežaudzēs. Rodas iespaids, ka labākā atbilstība ir tikai vasaras sezonā, kas ir pretēji lauksaimniecības zemju analīzē novērotajam. Tādēļ turpinu izpēti saistībā ar kokaudzes augstumu. Detalizētāka analīze liecina, ka vasaras mēneši, tomēr nav optimālākie, jo sevišķi platlapju un bērzu audzēs, kur augstākajās uzrādās ievērojams ‘trees’ ar platību svērtā īpatsvara samazinājums (4.21 att.). Arī citu koku sugu audzēs jūlija-augusta sezonā ir zemākā atbilstība sagaidāmajai vērtībai. Mežaudzes virs 10 m augstuma pārējās sezonās ir gandrīz perfekti klasificētas kā ‘trees’. Vidējās vērtības pārsniedz 50% jau no zemākajām audzēs (0.1 m) un kopš apmēram 5 m augstuma tās ir vismaz 80% platības klasificētas kā ‘trees’. Biežāk sastopamā sekojošā klase ir ‘grass’, kas ir loģiski saistāms ar zemiem un relatīvi reti izvietotiem kokiem, kas ieauguši zālē. Tomēr tas arī nozīmē, ka aizaugoši zālāji, kas bagāti ar koku atvasēm līdzīgiem augiem bieži būs klasificēti kā ‘trees’. Figure 4.20: DW klašu sastopamība meža nogabalos ar atšķirīgām valdošajām koku sugu grupām. &lt;img src=“./Atteli/ch004_q22_trees.png” alt=“Ar platību svērtā DW klases”koki” sastapšanas varbūtība dažādās koku sugu grupās, atkarībā no kokaudzes augstuma.” width=“100%” /&gt; Figure 4.21: Ar platību svērtā DW klases “koki” sastapšanas varbūtība dažādās koku sugu grupās, atkarībā no kokaudzes augstuma. Komandu rindas attēlu sagatavošanas un veiktās analīzes reproducēšanai (tiek izmantoti Meža Valsts reģistrs dati): Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # meža dati MVR &lt;- st_read_parquet(&quot;./nogabali_2024janv.parquet&quot;) priedes=c(&quot;1&quot;,&quot;14&quot;,&quot;22&quot;) egles=c(&quot;3&quot;,&quot;13&quot;,&quot;15&quot;,&quot;23&quot;) apses=c(&quot;8&quot;,&quot;19&quot;,&quot;68&quot;) berzi=c(&quot;4&quot;) melnalksni=c(&quot;6&quot;) platlapji=c(&quot;10&quot;,&quot;11&quot;,&quot;12&quot;,&quot;16&quot;,&quot;17&quot;,&quot;18&quot;,&quot;24&quot;,&quot;25&quot;,&quot;26&quot;,&quot;27&quot;,&quot;28&quot;,&quot;29&quot;,&quot;61&quot;, &quot;62&quot;,&quot;63&quot;,&quot;64&quot;,&quot;65&quot;,&quot;66&quot;,&quot;67&quot;,&quot;69&quot;) citi=c(&quot;9&quot;,&quot;20&quot;,&quot;21&quot;,&quot;32&quot;,&quot;35&quot;,&quot;50&quot;) mvr=MVR %&gt;% filter(vgr&gt;0&amp;vgr&lt;=5) %&gt;% mutate(priezu_kk=if_else(s10 %in% priedes,k10,0)+if_else(s11 %in% priedes,k11,0)+ if_else(s12 %in% priedes,k12,0)+if_else(s13 %in% priedes,k13,0)+ if_else(s14 %in% priedes,k14,0), eglu_kk=if_else(s10 %in% egles,k10,0)+if_else(s11 %in% egles,k11,0)+ if_else(s12 %in% egles,k12,0)+if_else(s13 %in% egles,k13,0)+ if_else(s14 %in% egles,k14,0), apsu_kk=if_else(s10 %in% apses,k10,0)+if_else(s11 %in% apses,k11,0)+ if_else(s12 %in% apses,k12,0)+if_else(s13 %in% apses,k13,0)+ if_else(s14 %in% apses,k14,0), berzu_kk=if_else(s10 %in% berzi,k10,0)+if_else(s11 %in% berzi,k11,0)+ if_else(s12 %in% berzi,k12,0)+if_else(s13 %in% berzi,k13,0)+ if_else(s14 %in% berzi,k14,0), melnalksna_kk=if_else(s10 %in% melnalksni,k10,0)+ if_else(s11 %in% melnalksni,k11,0)+if_else(s12 %in% melnalksni,k12,0)+ if_else(s13 %in% melnalksni,k13,0)+if_else(s14 %in% melnalksni,k14,0), platlapju_kk=if_else(s10 %in% platlapji,k10,0)+ if_else(s11 %in% platlapji,k11,0)+if_else(s12 %in% platlapji,k12,0)+ if_else(s13 %in% platlapji,k13,0)+if_else(s14 %in% platlapji,k14,0), citu_kk=if_else(s10 %in% citi,k10,0)+if_else(s11 %in% citi,k11,0)+ if_else(s12 %in% citi,k12,0)+if_else(s13 %in% citi,k13,0)+ if_else(s14 %in% citi,k14,0)) %&gt;% mutate(sugai=if_else(priezu_kk==10,&quot;priedes&quot;, if_else(eglu_kk==10,&quot;egles&quot;, if_else(apsu_kk==10,&quot;apses&quot;, if_else(berzu_kk==10,&quot;berzi&quot;, if_else(melnalksna_kk==10,&quot;melnalksnis&quot;, if_else(platlapju_kk&gt;=8,&quot;platlapji&quot;, &quot;citi&quot;))))))) %&gt;% mutate(vecumgrupas=factor(if_else(vgr==1,&quot;jaunaudze&quot;, if_else(vgr==2,&quot;vidēja vecuma&quot;, if_else(vgr==3,&quot;briestaudze&quot;, if_else(vgr==4,&quot;pieaugusi audze&quot;, &quot;pāraugusi audze&quot;)))), ordered=TRUE,levels=c(&quot;jaunaudze&quot;,&quot;vidēja vecuma&quot;, &quot;briestaudze&quot;,&quot;pieaugusi audze&quot;, &quot;pāraugusi audze&quot;))) %&gt;% mutate(suga_vgr=paste0(sugai,&quot;_&quot;,vgr)) %&gt;% select(sugai,vecumgrupas,suga_vgr,a10,h10,priezu_kk:citu_kk) # DW AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW extraction kodi=data.frame(kods=levels(factor(mvr$suga_vgr))) dati=mvr[1,] for (i in 1:length(kodi$kods)){ kods=kodi$kods[i] set.seed(0) vietas &lt;- mvr %&gt;% filter(suga_vgr == kods) if (nrow(vietas) &lt; 999) {rand_locs &lt;- vietas} else {rand_locs &lt;- vietas %&gt;% sample_n(999)} rand_locs &lt;- rand_locs %&gt;% mutate(id = row_number()) a=cbind(rand_locs,darbiba(AprAug, rand_locs, &quot;AprAug&quot;)) b=cbind(rand_locs,darbiba(AprJul, rand_locs, &quot;AprJul&quot;)) c=cbind(rand_locs,darbiba(AprJun, rand_locs, &quot;AprJun&quot;)) d=cbind(rand_locs,darbiba(AprMay, rand_locs, &quot;AprMay&quot;)) e=cbind(rand_locs,darbiba(JulAug, rand_locs, &quot;JulAug&quot;)) f=cbind(rand_locs,darbiba(JunAug, rand_locs, &quot;JunAug&quot;)) g=cbind(rand_locs,darbiba(JunJul, rand_locs, &quot;JunJul&quot;)) h=cbind(rand_locs,darbiba(MayAug, rand_locs, &quot;MayAug&quot;)) i=cbind(rand_locs,darbiba(MayJul, rand_locs, &quot;MayJul&quot;)) j=cbind(rand_locs,darbiba(MayJun, rand_locs, &quot;MayJun&quot;)) rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) } dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) dati_real=dati[-1,] dati_real[is.na(dati_real)]=0 dati_real$area=as.numeric(st_area(dati_real)) dati_real$perimeter=as.numeric(st_perimeter(dati_real)) sfarrow::st_write_parquet(dati_real,&quot;./Q2_mezaudzes.parquet&quot;) # DW klases MVR grupās dati=sfarrow::st_read_parquet(&quot;./Q2_mezaudzes.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) q21data=data.frame(dati) %&gt;% select(sugai:suga_vgr,sezona,water:snow_and_ice) %&gt;% group_by(sugai,vecumgrupas,suga_vgr) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) ggplot(q21data,aes(sezona,proporcija,col=klase))+ facet_grid(vecumgrupas~sugai)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Sezona&quot;) ggview(width=400,height=250,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q21.png&quot;,width=400,height=250,units=&quot;mm&quot;,dpi=600) # Augstumi ---- q22data_trees=data.frame(dati) %&gt;% select(sugai,vecumgrupas,suga_vgr,sezona,h10,area,trees) %&gt;% group_by(sugai,sezona,h10) %&gt;% summarise(vid_prop=weighted.mean(x=trees,w=area)) %&gt;% ungroup() ggplot(q22data_trees,aes(h10,vid_prop,col=sezona))+ theme_bw()+ facet_wrap(~sugai,nrow=2)+ geom_point(alpha=0.1)+ geom_smooth(method=&quot;loess&quot;,se=FALSE)+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ labs(x=&quot;Augstums, m&quot;,y=&quot;Ar platību svērtais klases &#39;trees&#39; īpatsvars (%)&quot;,col=&quot;Sezona&quot;)+ theme(axis.title = element_text(size=14), axis.text=element_text(size=12), strip.text = element_text(size=11), legend.title = element_blank(size=14), legend.text=element_text(size=12)) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q22_trees.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.4 Q3: Topogrāfiskās kartes mitrāji Pieejamie topogrāfiskās kartes laukumi ir no 2016. gada vasaras beigu versijas. Līdz 2023. gadam ir sagaidāms, ka var būt notikušas dažādas hidroloģiskās izmaiņas, piemēram meliorācija un meliorācijas sistēmu atjaunošana, kā arī kūdras ieguves vietu paplašināšanās. Tajā pašā laikā, iespējams, arī kādu teritoriju applūšana meliorācijas sistēmu aizsērēšanas (u.tml.) dēļ. Diemžēl 2016. un 2017. gados ir bijušas mākoņainas vasaras kā dēļ plašās valsts daļās nav pieejama Dynamic World klasifikācija. Tuvākais relatīvi labi nosegtais gads ir 2018., kas, protams, ir pēc topogrāfiskās kartes sagatavošanas, tomēr tuvāk par citiem pieejamajiem. Ar mitrājiem saistāmie topogrāfiskās kartes laukumi (lauka FNAME klases): Meldrājs_ūdenī_poligons (n=951); poligons_Grīslājs (n=29811); poligons_Meldrājs (n=9246); poligons_Nec_purvs_grīslājs (n=25); poligons_Nec_purvs_meldrājs (n=142); poligons_Nec_purvs_sūnājs (n=103); poligons_Sūnājs (n=5136). Zemāk esošajā attēlā 4.22 ir raksturoša šo topogrāfiskās kartes klašu klasifikācijas sarežģītība. Lielākā daļa “poligons_Sūnājs” ir atpazīta kā “shrub_and_scrub”, kas ir ļautu korekti izdalīt augstos purvus un arī pēc biežuma sekojošās klases “trees” un “grass” ir saprotams, jo augstajos purvos var būt vietas ar lielāku koku augstumu un sastopamību un lāmu rajoni, kuros ir ar lakstaugiem bagātāka veģetācija. Līdzīgi varētu domāt par “poligons_Nec_purvs_sūnājs”. Tomēr meldrāju un grīslāju klases pārspīlēti bieži ir klasificējušās kā “trees”. Ja daļā dadījumu tas noteikti ir korketi, lielākoties tomēr tā nav - var izteikt pieņēmumu, ka jebkura augumā augstāka lakstaugu veģetācija klasificējusies par kokiem, kas daļēji sakrīt ar LAD kultūru izpēti. Figure 4.22: Topogrāfiskās kartes mitrāju plankumu saistība ar DW klasēm. Komandu rindas attēlu sagatavošanas un veiktās analīzes reproducēšanai (tiek izmantoti LĢIA topogrāfiskā karte dati): Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # topogrāfiskās kartes dati topo=sfarrow::st_read_parquet(&quot;./Topo_landus_A.parquet&quot;) mitraji=topo %&gt;% filter(FNAME %in% c(&quot;Meldrājs_ūdenī_poligons&quot;,&quot;poligons_Grīslājs&quot;, &quot;poligons_Meldrājs&quot;,&quot;poligons_Nec_purvs_grīslājs&quot;, &quot;poligons_Nec_purvs_meldrājs&quot;,&quot;poligons_Nec_purvs_sūnājs&quot;, &quot;poligons_Sūnājs&quot;)) # DW AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW extraction kodi=data.frame(kods=levels(factor(mitraji$FNAME))) dati=mitraji[1,] for (i in 1:length(kodi$kods)){ kods=kodi$kods[i] set.seed(0) vietas &lt;- mitraji %&gt;% filter(FNAME == kods) if (nrow(vietas) &lt; 999) {rand_locs &lt;- vietas} else {rand_locs &lt;- vietas %&gt;% sample_n(999)} rand_locs &lt;- rand_locs %&gt;% mutate(id = row_number()) a=cbind(rand_locs,darbiba(AprAug, rand_locs, &quot;AprAug&quot;)) b=cbind(rand_locs,darbiba(AprJul, rand_locs, &quot;AprJul&quot;)) c=cbind(rand_locs,darbiba(AprJun, rand_locs, &quot;AprJun&quot;)) d=cbind(rand_locs,darbiba(AprMay, rand_locs, &quot;AprMay&quot;)) e=cbind(rand_locs,darbiba(JulAug, rand_locs, &quot;JulAug&quot;)) f=cbind(rand_locs,darbiba(JunAug, rand_locs, &quot;JunAug&quot;)) g=cbind(rand_locs,darbiba(JunJul, rand_locs, &quot;JunJul&quot;)) h=cbind(rand_locs,darbiba(MayAug, rand_locs, &quot;MayAug&quot;)) i=cbind(rand_locs,darbiba(MayJul, rand_locs, &quot;MayJul&quot;)) j=cbind(rand_locs,darbiba(MayJun, rand_locs, &quot;MayJun&quot;)) rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) } dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) dati_real=dati[-1,] dati_real[is.na(dati_real)]=0 dati_real$area=as.numeric(st_area(dati_real)) dati_real$perimeter=as.numeric(st_perimeter(dati_real)) sfarrow::st_write_parquet(dati_real,&quot;./Q3_TopoMitraji.parquet&quot;) dati=sfarrow::st_read_parquet(&quot;./Q3_TopoMitraji.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) q31data=data.frame(dati) %&gt;% select(FNAME,sezona,water:snow_and_ice) %&gt;% group_by(FNAME) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q31_props=data.frame(dati) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) %&gt;% filter(klase %in% c(&quot;flooded_vegetation&quot;,&quot;grass&quot;,&quot;shrub_and_scrub&quot;,&quot;trees&quot;)) %&gt;% group_by(FNAME,sezona,klase) %&gt;% summarise(proporcija=round(weighted.mean(proporcija,area)*100,0)) %&gt;% ungroup() ggplot(q31data,aes(sezona,proporcija,col=klase))+ facet_wrap(~FNAME,nrow=2)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ geom_text(data=q31_props[q31_props$klase==&quot;flooded_vegetation&quot;,], aes(sezona,y=1.25,label=proporcija),size=3)+ geom_text(data=q31_props[q31_props$klase==&quot;grass&quot;,], aes(sezona,y=1.2,label=proporcija),size=3)+ geom_text(data=q31_props[q31_props$klase==&quot;shrub_and_scrub&quot;,], aes(sezona,y=1.15,label=proporcija),size=3)+ geom_text(data=q31_props[q31_props$klase==&quot;trees&quot;,], aes(sezona,y=1.1,label=proporcija),size=3)+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=200,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q31.png&quot;,width=300,height=200,units=&quot;mm&quot;,dpi=600) 4.5 Q4: Karjeri, kūdras ieguves vietas un ceļi Arī šeit izmantojām 2018. gada DW rezultātus. Ceļu gadījumā, protams, ir lielas pārmaiņas, jo sevišķi LVM apsaimniekotajās zemēs, bet šajā izpētes līmeni būs pietiekoši tikai ar topogrāfiskās kartes datiem. Izmantotas slāņa LandUse laukumi (lyr=“landus_A”) klases: poligons_Grants (n=5); poligons_Kūdra (n=1227); poligons_Smiltājs (n=885). Ceļu laukumi (lyr=“road_A”) - ir trīs grupas, tās arī izpētījām. Itkā jau ir arī līniju slāņi ar smalkākām kategorijām, bet laukuma ģeometrijas labāk iederas šajā analīzē. Ceļi ir samērā šauri objekti un DW tiecās tos nepamanīt - sekojošajā attēlā 4.23 augšējā rindā klašu sadalījums lielā mērā atspoguļo piegulošās teritorijas. Tas nozīmē, ka bez ārējas informācijas par ceļiem iztikt nevarēs. Attiecībā uz liedagiem un dažādiem karjeriem (kūdras, grants, smilšu u.tml.), situācija ir nedaudz labāka - visur, kur ir kaut vai skraja veģetācija, tā dominē pār ar atklātu augsni saistāmo klasi. Pats par sevi tas nav nekas pārsteidzošs, tomēr, veidojot ekoģeogrāfiskos mainīgos tas jāņem vērā un ir jābūt piesardzīgiem analīžu rezultātu interpretācijā. Figure 4.23: Topogrāfiskās kartes atklātās augsnes un ceļu plankumu saistība ar DW klasēm. Komandu rindas attēlu sagatavošanas un veiktās analīzes reproducēšanai (tiek izmantoti LĢIA topogrāfiskā karte dati): Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # topogrāfiskās kartes dati topo=sfarrow::st_read_parquet(&quot;./Topo_landus_A.parquet&quot;) atvertie=topo %&gt;% filter(FNAME %in% c(&quot;poligons_Grants&quot;,&quot;poligons_Kūdra&quot;,&quot;poligons_Smiltājs&quot;)) celi=sfarrow::st_read_parquet(&quot;./Topo_road_A.parquet&quot;) abi=rbind(atvertie,celi) # DW AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW extraction kodi=data.frame(kods=levels(factor(abi$FNAME))) dati=abi[1,] for (i in 1:length(kodi$kods)){ kods=kodi$kods[i] set.seed(0) vietas &lt;- abi %&gt;% filter(FNAME == kods) if (nrow(vietas) &lt; 999) {rand_locs &lt;- vietas} else {rand_locs &lt;- vietas %&gt;% sample_n(999)} rand_locs &lt;- rand_locs %&gt;% mutate(id = row_number()) a=cbind(rand_locs,darbiba(AprAug, rand_locs, &quot;AprAug&quot;)) b=cbind(rand_locs,darbiba(AprJul, rand_locs, &quot;AprJul&quot;)) c=cbind(rand_locs,darbiba(AprJun, rand_locs, &quot;AprJun&quot;)) d=cbind(rand_locs,darbiba(AprMay, rand_locs, &quot;AprMay&quot;)) e=cbind(rand_locs,darbiba(JulAug, rand_locs, &quot;JulAug&quot;)) f=cbind(rand_locs,darbiba(JunAug, rand_locs, &quot;JunAug&quot;)) g=cbind(rand_locs,darbiba(JunJul, rand_locs, &quot;JunJul&quot;)) h=cbind(rand_locs,darbiba(MayAug, rand_locs, &quot;MayAug&quot;)) i=cbind(rand_locs,darbiba(MayJul, rand_locs, &quot;MayJul&quot;)) j=cbind(rand_locs,darbiba(MayJun, rand_locs, &quot;MayJun&quot;)) rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) } dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) dati_real=dati[-1,] dati_real[is.na(dati_real)]=0 dati_real$area=as.numeric(st_area(dati_real)) dati_real$perimeter=as.numeric(st_perimeter(dati_real)) sfarrow::st_write_parquet(dati_real,&quot;./Q4_TopoAtvertie.parquet&quot;) dati=sfarrow::st_read_parquet(&quot;./Q4_TopoAtvertie.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) q41data=data.frame(dati) %&gt;% select(FNAME,sezona,water:snow_and_ice) %&gt;% group_by(FNAME) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q41_props=data.frame(dati) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) %&gt;% filter(klase %in% c(&quot;bare&quot;,&quot;built&quot;,&quot;crops&quot;,&quot;grass&quot;,&quot;shrub_and_scrub&quot;)) %&gt;% group_by(FNAME,sezona,klase) %&gt;% summarise(proporcija=round(weighted.mean(proporcija,area)*100,0)) %&gt;% ungroup() ggplot(q41data,aes(sezona,proporcija,col=klase))+ facet_wrap(~FNAME,nrow=2)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ geom_text(data=q41_props[q41_props$klase==&quot;bare&quot;,], aes(sezona,y=1.25,label=proporcija),size=3)+ geom_text(data=q41_props[q41_props$klase==&quot;built&quot;,], aes(sezona,y=1.2,label=proporcija),size=3)+ geom_text(data=q41_props[q41_props$klase==&quot;crops&quot;,], aes(sezona,y=1.15,label=proporcija),size=3)+ geom_text(data=q41_props[q41_props$klase==&quot;grass&quot;,], aes(sezona,y=1.1,label=proporcija),size=3)+ geom_text(data=q41_props[q41_props$klase==&quot;shrub_and_scrub&quot;,], aes(sezona,y=1.05,label=proporcija),size=3)+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=200,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q41.png&quot;,width=300,height=200,units=&quot;mm&quot;,dpi=600) 4.6 Q5: Izcirtuma izmērs un forma Šo aplūkojām divās daļās: nesen veidoti izcirtumi, papētot dažādus ciršanas veidus; senāki izcirtumi, bet tikai kailcirtes, lai labāk saprastu pārmaiņas. Visos gadījumos salīdzinājumi pret 2023. gada DW slāņiem. 4.6.1 Q5.1: 2022. gada izcirtumi Tā kā mums ir 2024.gada janvāra MVR, bet 2023. gadā reģistrēta pēdējā ciršana var būt jebkad 2023. gadā notikusi, par kritēriju izmantoju pēdējo ciršanu (p_cirg) 2022. gadā. Šāda atlase rada visai lielu burzmu ar dažādiem pēdējās ciršanas paņēmieniem (p_cirp), tādēļ atlasi papildinu arī ar kritēriju, ka pēdējais ciršanas paņēmiens ir: kailcirte (p_cirp==“11”; n=28878); kailcirte pēc caurmēra (p_cirp==“17”; n=5051); cirte pēc VMD sanitārā atzinuma (p_cirp==“31”; n=2741); atmežošanas cirte (p_cirp==“81”; n=304). Meža nogabalos, kuriem zemes kategorija ir izcirtums, biežāk reģistrētā klase ir “trees” (4.24 att.). Figure 4.24: 2023. gada DW klases dažādos 2022. gada izcirtumos. Līdzīgi kā iepriekš, šīs klases uzpūstās vērtības ir saistītas ar blakus esošajiem nogabaliem (uz ko norāda pozitīvā perimetra-laukuma attiecība), saglabāto koku efektiem un paša nogabala izmēru (4.25 att.). &lt;img src=“./Atteli/ch004_q51b.png” alt=“Ar platību svērtā 2023. gada DW klases”koki” sastapšanas varbūtība dažādos 2022. gada izcirtumos, atkarībā no to perimetra-laukuma attiecības.” width=“100%” /&gt; Figure 4.25: Ar platību svērtā 2023. gada DW klases “koki” sastapšanas varbūtība dažādos 2022. gada izcirtumos, atkarībā no to perimetra-laukuma attiecības. Zemāk esošais attēls (4.26 att.) demonstrē precīzāku klasifikāciju lielākiem nogabaliem. &lt;img src=“./Atteli/ch004_q51c.png” alt=“Ar platību svērtā 2023. gada DW klases”koki” sastapšanas varbūtība dažādos 2022. gada izcirtumos, atkarībā no to platības.” width=“100%” /&gt; Figure 4.26: Ar platību svērtā 2023. gada DW klases “koki” sastapšanas varbūtība dažādos 2022. gada izcirtumos, atkarībā no to platības. Komandu rindas attēlu sagatavošanas un veiktās analīzes reproducēšanai (tiek izmantoti Meža Valsts reģistrs dati): Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # meža dati MVR &lt;- st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr=MVR %&gt;% filter(zkat==&quot;14&quot;&amp;(p_cirp==&quot;11&quot;|p_cirp==&quot;17&quot;|p_cirp==&quot;31&quot;|p_cirp==&quot;81&quot;)&amp;p_cirg==2021) # DW AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW extraction kodi=data.frame(kods=levels(factor(mvr$p_cirp))) dati=mvr[1,] for (i in 1:length(kodi$kods)){ kods=kodi$kods[i] print(kods) set.seed(0) vietas &lt;- mvr %&gt;% filter(p_cirp == kods) if (nrow(vietas) &lt; 999) {rand_locs &lt;- vietas} else {rand_locs &lt;- vietas %&gt;% sample_n(999)} rand_locs &lt;- rand_locs %&gt;% mutate(id = row_number()) a=cbind(rand_locs,darbiba(AprAug, rand_locs, &quot;AprAug&quot;)) b=cbind(rand_locs,darbiba(AprJul, rand_locs, &quot;AprJul&quot;)) c=cbind(rand_locs,darbiba(AprJun, rand_locs, &quot;AprJun&quot;)) d=cbind(rand_locs,darbiba(AprMay, rand_locs, &quot;AprMay&quot;)) e=cbind(rand_locs,darbiba(JulAug, rand_locs, &quot;JulAug&quot;)) f=cbind(rand_locs,darbiba(JunAug, rand_locs, &quot;JunAug&quot;)) g=cbind(rand_locs,darbiba(JunJul, rand_locs, &quot;JunJul&quot;)) h=cbind(rand_locs,darbiba(MayAug, rand_locs, &quot;MayAug&quot;)) i=cbind(rand_locs,darbiba(MayJul, rand_locs, &quot;MayJul&quot;)) j=cbind(rand_locs,darbiba(MayJun, rand_locs, &quot;MayJun&quot;)) rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) } dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) dati_real=dati[-1,] dati_real[is.na(dati_real)]=0 dati_real$area=as.numeric(st_area(dati_real)) dati_real$perimeter=as.numeric(st_perimeter(dati_real)) sfarrow::st_write_parquet(dati_real,&quot;./Q51_Izcirtumi.parquet&quot;) dati=sfarrow::st_read_parquet(&quot;./Q51_Izcirtumi.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) %&gt;% mutate(veids=if_else(p_cirp==&quot;11&quot;,&quot;kailcirte&quot;, if_else(p_cirp==&quot;17&quot;,&quot;kailcirte pēc caurmēra&quot;, if_else(p_cirp==&quot;31&quot;,&quot;cirte pēc\\nVMD sanitārā atzinuma&quot;, if_else(p_cirp==&quot;81&quot;,&quot;atmežošanas cirte&quot;,&quot;draza&quot;))))) q51data=data.frame(dati) %&gt;% select(veids,sezona,water:snow_and_ice) %&gt;% group_by(veids) %&gt;% mutate(skaits=n()/10) %&gt;% ungroup() %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;, values_to = &quot;proporcija&quot;) q51_props=data.frame(dati) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;, values_to = &quot;proporcija&quot;) %&gt;% filter(klase %in% c(&quot;crops&quot;,&quot;grass&quot;,&quot;shrub_and_scrub&quot;,&quot;trees&quot;)) %&gt;% group_by(veids,sezona,klase) %&gt;% summarise(proporcija=round(weighted.mean(proporcija,area)*100,0)) %&gt;% ungroup() ggplot(q51data,aes(sezona,proporcija,col=klase))+ facet_wrap(~veids,nrow=2)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ geom_text(data=q51_props[q51_props$klase==&quot;crops&quot;,], aes(sezona,y=1.2,label=proporcija),size=3)+ geom_text(data=q51_props[q51_props$klase==&quot;grass&quot;,], aes(sezona,y=1.15,label=proporcija),size=3)+ geom_text(data=q51_props[q51_props$klase==&quot;shrub_and_scrub&quot;,], aes(sezona,y=1.1,label=proporcija),size=3)+ geom_text(data=q51_props[q51_props$klase==&quot;trees&quot;,], aes(sezona,y=1.05,label=proporcija),size=3)+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=250,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q51.png&quot;,width=300,height=250,units=&quot;mm&quot;,dpi=600) q51b=data.frame(dati) %&gt;% select(veids,sezona,trees,perimeter,area) %&gt;% mutate(PAr=round(perimeter/area,3)) %&gt;% group_by(veids,sezona,PAr) %&gt;% summarise(propocija=weighted.mean(trees,area)) ggplot(q51b,aes(PAr,propocija,col=sezona))+ facet_wrap(~veids,nrow=2)+ geom_point(alpha=0.1)+ geom_smooth(method=&quot;loess&quot;,se=FALSE)+ theme_bw()+ theme(legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Perimetra-laukuma attiecība&quot;, y=&quot;Ar laukumu svērtā vidējā proporcija (%) klasei &#39;trees&#39;&quot;)+ coord_cartesian(xlim=c(0,0.25)) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q51b.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) q51c=data.frame(dati) %&gt;% select(veids,sezona,trees,perimeter,area) %&gt;% group_by(veids,sezona,area) %&gt;% mutate(proporcija=weighted.mean(trees,area)) ggplot(q51c,aes(area,proporcija,col=sezona))+ geom_point(alpha=0.1)+ geom_smooth(method=&quot;loess&quot;,se=FALSE)+ facet_wrap(~veids,nrow=2)+ theme_bw()+ theme(legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=expression(paste(&quot;Platība, &quot;,m^2)),y=&quot;Proporcija (%) klasei &#39;trees&#39;&quot;)+ coord_cartesian(xlim=c(0,75000)) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q51c.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.6.2 Q5.2: senākas kailcirtes, bet vēl joprojām izcirtumi Nogabali, kuros pēdējā ciršana ir kailcirtē (p_cirp==“11”) un pēdējās darbības veids ir koku ciršana (p_darbv==“1”) ar nejaušu izlozi nogabaliem kopš 2013. gada, kad ik gadu ir vismaz 300 nogabali. Šīs analīzes rezultāti (4.27 att.) saistās ar iepriekšējām - ir izteikti malas efekti, kur blakus esošās mežaudzes ietekmē izpētes audžu klasifikācijas rezultātu un pārspīlētā koku sastopamība, kas ir izpaudusies jau vairākkārt - tikko mežaudzēs ir vismaz 0.1 m augsti kokaugi vai sastopamie augstie lakstaugi, tās klasificētas kā ‘trees’. Augstā koku sastopamība šo resursu padara par otršķirīgu vidi raksturojošu ekoģeogrāfisko mainīgo sagatavošanā. Tomēr vides pārmaiņu analīzē (novērojumu atlasē) to varētu lietot, lai samazinātu (bet ne pilnībā izskaustu) novērojumus vietās, kurās notikušas vides pārmaiņas. Figure 4.27: Ar platību svērtā 2023. gada DW klašu sastopamība kopš 2013. gada veiktās kailcirtēs. Komandu rindas attēlu sagatavošanas un veiktās analīzes reproducēšanai (tiek izmantoti Meža Valsts reģistrs dati): Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # meža dati MVR &lt;- st_read_parquet(&quot;./IevadesDati/MVR/nogabali_2024janv.parquet&quot;) mvr=MVR %&gt;% filter(p_cirp==&quot;11&quot;&amp;p_cirg&gt;=2013&amp;p_darbv==&quot;1&quot;) %&gt;% mutate(p_cirg=as.character(p_cirg)) # DW AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW extraction kodi=data.frame(kods=levels(factor(mvr$p_cirg))) dati=mvr[1,] for (i in 1:length(kodi$kods)){ kods=kodi$kods[i] set.seed(0) vietas &lt;- mvr %&gt;% filter(p_cirg == kods) if (nrow(vietas) &lt; 999) {rand_locs &lt;- vietas} else {rand_locs &lt;- vietas %&gt;% sample_n(999)} rand_locs &lt;- rand_locs %&gt;% mutate(id = row_number()) a=cbind(rand_locs,darbiba(AprAug, rand_locs, &quot;AprAug&quot;)) b=cbind(rand_locs,darbiba(AprJul, rand_locs, &quot;AprJul&quot;)) c=cbind(rand_locs,darbiba(AprJun, rand_locs, &quot;AprJun&quot;)) d=cbind(rand_locs,darbiba(AprMay, rand_locs, &quot;AprMay&quot;)) e=cbind(rand_locs,darbiba(JulAug, rand_locs, &quot;JulAug&quot;)) f=cbind(rand_locs,darbiba(JunAug, rand_locs, &quot;JunAug&quot;)) g=cbind(rand_locs,darbiba(JunJul, rand_locs, &quot;JunJul&quot;)) h=cbind(rand_locs,darbiba(MayAug, rand_locs, &quot;MayAug&quot;)) i=cbind(rand_locs,darbiba(MayJul, rand_locs, &quot;MayJul&quot;)) j=cbind(rand_locs,darbiba(MayJun, rand_locs, &quot;MayJun&quot;)) rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) } dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) dati_real=dati[-1,] dati_real[is.na(dati_real)]=0 dati_real$area=as.numeric(st_area(dati_real)) dati_real$perimeter=as.numeric(st_perimeter(dati_real)) sfarrow::st_write_parquet(dati_real,&quot;./Q52_Izcirtumi.parquet&quot;) dati=sfarrow::st_read_parquet(&quot;./Q52_Izcirtumi.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) q52data=data.frame(dati) %&gt;% select(p_cirg,sezona,perimeter,area,water:snow_and_ice) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) q52_props=data.frame(dati) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;,values_to = &quot;proporcija&quot;) %&gt;% filter(klase %in% c(&quot;crops&quot;,&quot;grass&quot;,&quot;shrub_and_scrub&quot;,&quot;trees&quot;)) %&gt;% group_by(p_cirg,sezona,klase) %&gt;% summarise(proporcija=round(weighted.mean(proporcija,area)*100,0)) %&gt;% ungroup() ggplot(q52data,aes(sezona,proporcija,col=klase))+ facet_wrap(~p_cirg,nrow=2)+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ geom_text(data=q52_props[q52_props$klase==&quot;crops&quot;,], aes(sezona,y=1.2,label=proporcija),size=3)+ geom_text(data=q52_props[q52_props$klase==&quot;grass&quot;,], aes(sezona,y=1.15,label=proporcija),size=3)+ geom_text(data=q52_props[q52_props$klase==&quot;shrub_and_scrub&quot;,], aes(sezona,y=1.1,label=proporcija),size=3)+ geom_text(data=q52_props[q52_props$klase==&quot;trees&quot;,], aes(sezona,y=1.05,label=proporcija),size=3)+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=200,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q52.png&quot;,width=300,height=200,units=&quot;mm&quot;,dpi=600) 4.7 Q6: Zālāju transformācija uz aramzemēm Projekta komandai pieejama informācija par 2017. un 2018. gadu (tomēr skatīt arī lejupielādes iespējas LAD atvērto datu portālā), kas izmantoti attiecināšanai pret 2018. gada DW sezonālajiem slāņiem. Lauku atlasē izmantojām tos laukus, kuros 2017. gadā bija reģistrēti ilglaicīgie zālāji (PIETEIKTAIS_KULTURAS_KODS==“710”), bet 2018. gadā tam pašam numuram reģistrēts kāds no sekojošajiem: rudzi (PIETEIKTAIS_KULTURAS_KODS==“121”); ziemas mieži (PIETEIKTAIS_KULTURAS_KODS==“132”); ziemas kvieši (PIETEIKTAIS_KULTURAS_KODS==“112”); ziemas tritikāle (PIETEIKTAIS_KULTURAS_KODS==“151”); ziemas rapsis (PIETEIKTAIS_KULTURAS_KODS==“212”); vasaras mieži (PIETEIKTAIS_KULTURAS_KODS==“131”); vasaras kvieši (PIETEIKTAIS_KULTURAS_KODS==“111”); vasaras tritikāle (PIETEIKTAIS_KULTURAS_KODS==“150”); vasaras rapsis (PIETEIKTAIS_KULTURAS_KODS==“211”). Šāda atlase atgriež 2828 laukus. Lai samazinātu malas efektus, atlasījām tikai tos, kuriem laukums ir lielāks par mediānu un perimetra-laukuma attiecība ir mazāka par mediānu - šāda atlase atgriež 1255 laukus, kuri saglabāti analīzei. Atlasītajās vietās izteikti dominē klase ‘crops’ (4.28 att.), kas atspoguļo sagaidāmo rezultātu, apstiprinot iespējas šo resursu izmantot vides pārmaiņu analīzē. Figure 4.28: Ar platību svērtā 2018. gada DW klašu sastopamība 2018. gadā par aramzemēm kļuvušajos ilggadīgajos zālājos. Komandu rindas attēlu sagatavošanas un veiktās analīzes reproducēšanai (tiek izmantoti Meža Valsts reģistrs dati): Code # libs if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(exactextractr)) {install.packages(&quot;exactextractr&quot;); require(exactextractr)} if(!require(ggview)) {install.packages(&quot;ggview&quot;); require(ggview)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} if(!require(ggrepel)) {install.packages(&quot;ggrepel&quot;); require(ggrepel)} # lauku dati lauki_old=st_read(&quot;LAUKI_2012-2020.gdb/&quot;,layer=&quot;LRGIS_LAUKI&quot;) lauki_old=lauki_old %&gt;% filter(PIETEIKUMA_GADS==&quot;2017&quot;|PIETEIKUMA_GADS==&quot;2018&quot;) lauki17=lauki_old %&gt;% filter(PIETEIKUMA_GADS==&quot;2017&quot;)%&gt;% filter(PIETEIKTAIS_KULTURAS_KODS==&quot;710&quot;) lauki17_pts=st_centroid(lauki17) lauki18=lauki_old %&gt;% filter(PIETEIKUMA_GADS==&quot;2018&quot;) %&gt;% filter(PIETEIKTAIS_KULTURAS_KODS==&quot;121&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;132&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;112&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;151&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;212&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;131&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;111&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;150&quot;| PIETEIKTAIS_KULTURAS_KODS==&quot;211&quot;) lauki_parbaudei=lauki18[lauki17_pts,,] lauki_parbaudei$PAr=lauki_parbaudei$SHAPE_Length/lauki_parbaudei$SHAPE_Area lauki_parbaudei2=lauki_parbaudei %&gt;% filter(SHAPE_Area&gt;median(SHAPE_Area)&amp;PAr&lt;median(PAr)) st_write(lauki_parbaudei2,&quot;./zalaju_parmainam.gpkg&quot;) # DW AprAug &lt;- rast(&quot;./DW_2023_apraug.tif&quot;) AprJul &lt;- rast(&quot;./DW_2023_aprjul.tif&quot;) AprJun &lt;- rast(&quot;./DW_2023_aprjun.tif&quot;) AprMay &lt;- rast(&quot;./DW_2023_aprmay.tif&quot;) JulAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunAug &lt;- rast(&quot;./DW_2023_julaug.tif&quot;) JunJul &lt;- rast(&quot;./DW_2023_junjul.tif&quot;) MayAug &lt;- rast(&quot;./DW_2023_mayaug.tif&quot;) MayJul &lt;- rast(&quot;./DW_2023_mayjul.tif&quot;) MayJun &lt;- rast(&quot;./DW_2023_mayjun.tif&quot;) # utility darbiba &lt;- function(raster, vector, period) { exact_extract(raster, vector, function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction, na.rm = TRUE)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac, na.rm = TRUE), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;) }) %&gt;% mutate(across(starts_with(&#39;freq&#39;), ~replace_na(., 0))) %&gt;% mutate(periods = period) } # DW extraction dati=lauki_parbaudei2[1,] rand_locs &lt;- lauki_parbaudei2 %&gt;% mutate(id = row_number()) a=cbind(rand_locs,darbiba(AprAug, rand_locs, &quot;AprAug&quot;)) b=cbind(rand_locs,darbiba(AprJul, rand_locs, &quot;AprJul&quot;)) c=cbind(rand_locs,darbiba(AprJun, rand_locs, &quot;AprJun&quot;)) d=cbind(rand_locs,darbiba(AprMay, rand_locs, &quot;AprMay&quot;)) e=cbind(rand_locs,darbiba(JulAug, rand_locs, &quot;JulAug&quot;)) f=cbind(rand_locs,darbiba(JunAug, rand_locs, &quot;JunAug&quot;)) g=cbind(rand_locs,darbiba(JunJul, rand_locs, &quot;JunJul&quot;)) h=cbind(rand_locs,darbiba(MayAug, rand_locs, &quot;MayAug&quot;)) i=cbind(rand_locs,darbiba(MayJul, rand_locs, &quot;MayJul&quot;)) j=cbind(rand_locs,darbiba(MayJun, rand_locs, &quot;MayJun&quot;)) rez=bind_rows(a,b,c,d,e,f,g,h,i,j) dati &lt;- bind_rows(dati, rez) dati=dati %&gt;% mutate(water=freq_0, trees=freq_1, grass=freq_2, flooded_vegetation=freq_3, crops=freq_4, shrub_and_scrub=freq_5, built=freq_6, bare=freq_7, snow_and_ice=freq_8) dati_real=dati[-1,] dati_real[is.na(dati_real)]=0 dati_real$area=as.numeric(st_area(dati_real)) dati_real$perimeter=as.numeric(st_perimeter(dati_real)) sfarrow::st_write_parquet(dati_real,&quot;./Q6_ZalajuTransformacijas.parquet&quot;) # DW klases pārmaiņu vietās dati=sfarrow::st_read_parquet(&quot;./Q6_ZalajuTransformacijas.parquet&quot;) dati=dati %&gt;% mutate(sezona=factor(periods,ordered=TRUE, levels=c(&quot;AprMay&quot;,&quot;AprJun&quot;,&quot;AprJul&quot;,&quot;AprAug&quot;,&quot;MayJun&quot;, &quot;MayJul&quot;,&quot;MayAug&quot;,&quot;JunJul&quot;,&quot;JunAug&quot;,&quot;JulAug&quot;))) q6data=data.frame(dati) %&gt;% select(sezona,perimeter,area,water:snow_and_ice) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;, values_to = &quot;proporcija&quot;) q6_props=data.frame(dati) %&gt;% pivot_longer(cols=water:snow_and_ice,names_to = &quot;klase&quot;, values_to = &quot;proporcija&quot;) %&gt;% filter(klase %in% c(&quot;crops&quot;,&quot;grass&quot;,&quot;shrub_and_scrub&quot;,&quot;trees&quot;)) %&gt;% group_by(sezona,klase) %&gt;% summarise(proporcija=round(weighted.mean(proporcija,area)*100,0)) %&gt;% ungroup() ggplot(q6data,aes(sezona,proporcija,col=klase))+ geom_point(position=position_dodge(width=0.75),alpha=0.2)+ theme_bw()+ geom_text(data=q6_props[q6_props$klase==&quot;crops&quot;,], aes(sezona,y=1.2,label=proporcija),size=3)+ geom_text(data=q6_props[q6_props$klase==&quot;grass&quot;,], aes(sezona,y=1.15,label=proporcija),size=3)+ geom_text(data=q6_props[q6_props$klase==&quot;shrub_and_scrub&quot;,], aes(sezona,y=1.1,label=proporcija),size=3)+ geom_text(data=q6_props[q6_props$klase==&quot;trees&quot;,], aes(sezona,y=1.05,label=proporcija),size=3)+ theme(axis.text.x = element_text(angle=90,vjust=0.5), axis.title.y = element_blank(), legend.title = element_blank(), axis.title = element_text(size=14), axis.text=element_text(size=12), legend.text=element_text(size=12), strip.text = element_text(size=11))+ scale_y_continuous(labels=scales::label_percent(),breaks=seq(0,1,by=.1))+ scale_color_viridis_d()+ labs(x=&quot;Sezona&quot;) ggview(width=300,height=150,units=&quot;mm&quot;,dpi=600,device=&quot;png&quot;) ggsave(filename=&quot;./pic_q6.png&quot;,width=300,height=150,units=&quot;mm&quot;,dpi=600) 4.8 Secinājumi Kā sagaidāms, DW izteikti pārspīlē vertikāli strukturēto klašu (piemēram, ‘trees’ un ‘built’, kura šajā analīzē nav sevišķi uzsvērta) sastopamību. Sevišķi izteikti tas parādās jaunaudžu un izcirtumu analīzēs. Tas nozīmē, ka, izmantojot tikai šo resursu vides raksturošanai, ir sagaidāma krietns troksnis visiem parametriem, kas saistās ar kokiem. To varētu risināt, pārskatot varbūtību sliekšņus katrai no klasēm, lai optimizētu Latvijas apstākļiem un sugu izplatības modelēšanas mērķim. Tomēr tas pieprasa liela apjoma specifisku analīzi, kas šī darba ietvaros netiks veikta. Mitrāji, kas definēti topogrāfiskajā kartē, visai slikti uzrādās DW, galvenokārt augsto lakstaugu, kas klasificēti kā ‘trees’ dēļ. Tā kā daudzām ar mitrājiem saistītajām sugām koku klātbūtne ir uzskatāma par nozīmīgu negatīvi ietekmējošu mainīgo, paļauties uz DW viltus pozitīvo koku klātbūtni nozīmētu samazināt dzīvotņu piemērotības modeļu skaidrojamību un potenciāli arī projekciju uzticamību. Šo nāksies risināt kombinējot dažādākus slāņus, piemēram Global Forest Watch un PALSAR klasifikāciju informācijai par kokiem - šie resursi un to uzticamība Latvijai ir jau pētīti (piemēram, (Avotiņš, 2019a) un (Avotiņš, 2019b)). Lai gan vides klasifikāciju nevar balstīt tikai DW rezultātos, tie pietiekoši labi demonstrē zālāju transformāciju un vismaz lielāka mēroga koku vainagu seguma izzušanu. Tā kā arī apbūves teritoriju klases sastopamības troksnis ir līdzīgs koku klasei, tas pietiekoši aptver nozīmīgākās pārmaiņas vidē, lai varētu izmantot novērojumu atlasē. Tikai vasaras mēnešu izmantošana sniedz zemāko atbalstu sagaidāmajiem rezultātiem. Nedaudz zemāks atbalsts par pārējām klasēm ir tikai pavasara mēnešiem. Tādēļ pārmaiņu analīzē izmantojama sezona, kas aptver gan pavasara, gan vasaras mēnešus. Tā kā atlikušajos sezonas griezumos Dynamic World rezultātos ir tikai marginālas atšķirības, analīzēm izmantosim Aprīļa-Augusta klašu vidējās varbūtības, jo šis periods sniedz klasifikācijas labāko telpisko pārklājumu (4.1 att.). References Avotiņš, A., 2019a. Apodziņa Glaucidium passerinum, bikšainā apoga Aegolius funereus, meža pūces Strix aluco, urālpūces Strix uralensis, ausainās pūces Asio otus un ūpja Bubo bubo aizsardzības plāns. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Avotiņš, A., 2019b. Aizsargājamās dabas teritorijas, mežsaimniecības aprobežojumi un Aichi biodaudzveidības mērķi mežos: Trūkumi dabas teritorijās un iespējas valsts līmeņa plānošanā ar dzīvotņu piemērotības modelēšanu, LU 77th International scientific conference. Brown, C.F., Brumby, S.P., Guzder-Williams, B., Birch, T., Hyde, S.B., Mazzariello, J., Czerwinski, W., Pasquarella, V.J., Haertel, R., Ilyushchenko, S., Schwehr, K., Weisse, M., Stolle, F., Hanson, C., Guinan, O., Moore, R., Tait, A.M., 2022. Dynamic World, Near real-time global 10 m land use land cover mapping, Scientific Data. https://doi.org/10.1038/s41597-022-01307-4 Ghassemi, B., Izquierdo-Verdiguier, E., Verhegghen, A., Yordanov, M., Lemoine, G., Martínez, Á.M., Marchi, D.D., Velde, M. van der, Vuolo, F., d’Andrimont, R., 2024. European Union crop map 2022: Earth observation’s 10-meter dive into Europe’s crop tapestry, Scientific Data. https://doi.org/10.1038/s41597-024-03884-y Gorelick, N., Hancher, M., Dixon, M., Ilyushchenko, S., Thau, D., Moore, R., 2017. Google Earth Engine: Planetary-scale geospatial analysis for everyone, Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031 Mirmazloumi, S.M., Kakooei, M., Mohseni, F., Ghorbanian, A., Amani, M., Crosetto, M., Monserrat, O., 2022. ELULC-10, a 10 m European land use and land cover map using Sentinel and Landsat data in Google Earth Engine, Remote Sensing. https://doi.org/10.3390/rs14133041 Venter, Z.S., Barton, D.N., Chakraborty, T., Simensen, T., Singh, G., 2022. Global 10 m Land Use Land Cover datasets: A comparison of Dynamic World, World Cover and Esri Land Cover, Remote Sensing. https://doi.org/10.3390/rs14164101 Xu, P., Tsendbazar, N.-E., Herold, M., Bruin, S. de, Koopmans, M., Birch, T., Carter, S., Fritz, S., Lesiv, M., Mazur, E., Pickens, A., Potapov, P., Stolle, F., Tyukavina, A., Kerchove, R.V.D., Zanaga, D., 2024. Comparative validation of recent 10 m-resolution global land cover maps, Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2024.114316 "],["Chapter5.html", "5 Ekoģeogrāfiskie mainīgie 5.1 Procesēšanas atvieglošana 5.2 Ainava_pazimes-agregacijas_merogs 5.3 Climate_pazimes-agregacijas_merogs 5.4 Daudzv_pazimes-agregacijas_merogs 5.5 Dist_pazimes-agregacijas_merogs 5.6 EO_pazimes-agregacijas_merogs 5.7 Lauku_pazimes-agregacijas_merogs 5.8 Malas_pazimes-agregacijas_merogs 5.9 Mezi_pazimes-agregacijas_merogs 5.10 Reljefs_pazimes-agregacijas_merogs 5.11 Soils_pazimes-agregacijas_merogs 5.12 Beigu apstrāde", " 5 Ekoģeogrāfiskie mainīgie Šajā nodaļā apkopoti ekoģeogrāfisko mainīgo (EGV) apraksti un sniegta piekļuve to lejupielādei. Apkopotā formā ar hipersaitēm lejupielādei tā ir pieejama arī šajā tabulā (xlsx), savukārt šajā tabulā (xlsx) raksturots to izveidošanas pamatojums - sugas, kuru ekoloģiskās nišas raksturošanai tie sākotnēji ir plānoti. Kā redzams, daļa EGV ir veidoti vienkārši plūsmas ērtībai vai domājot arī par citām, ne tikai šī projekta sugām. Lai nedaudz atvieglotu pārskatīšanu, EGV grupēti pēc raksturojumu veida un prezentēti apakšnodaļās. Pēc EGV sagatavošanas, veikta to aptvertās telpas vienādošana (projektēšana un maksēšana), jo daļai mainīgo nav racionāli iespējams atvert vietas pie pašām valsts robežām, un centrēšana-un-mērogošana (slāņa ik šūnas vērtībai atņemta visa slāņa vidējā aritmērtiskā šūnu vērtība un rezultāts dalīts ar slāņa (izlases) standartnovirzi). Centrēšana-un-mērogošana veikta, lai nodrošinātu pazīmes ietekmes aprēķinu uzticamību, atvieglotu regresiju leņķa koeficientu salīdzināmību un samazinātu multikolinearitāti. Šo darbību ietvaros nodrošināta vienota nosaukumu nomenklatūra, kurā nosaukums sastāv no [veids]_[pazimes-agregacijas]_[telpa].tif, kas ir skaidrojama: [veids] - apzīmējums plašai ievades datu, to apstrādes vai ekoloģiskās nozīmes grupai ar skeojošiem līmeņiem, kas izmantoti tālāk esošajā dalījumā nodaļās: – “Ainava” - dažādas ievades ģeodatu kombinācijas ainavas aprakstu sagatavošanai; – “Climate” - laika apstākļus un klimatu raksturojošie EGV no meteoroloģisko/klimatoloģisko datu avotiem (šajā gadījumā ERA5 Land); – “Daudzv” - Šenona daudzveidības indeksi ainavas klasēm; – “Dist” - Eiklīda distance līdz interešu objektam; – “EO” - Zemes novērošanas sistēmu (šajā gadījumā tikai ESA Sentinel-2) indeksi; – “Lauku” - lauku vidi raksturojošie EGV, kuriem nozīmīgākie ievades dati ir no Lauku Atbalsta Dienesta lauku informācija; – “Malas” - specifisku malu daudzumu raksturojošie EGV; – “Mezi” - mežus raksturojošie EGV, kuriem nozīmīgākie ievades dati ir no Valsts meža dienesta Meža valsts reģistrs; – “Reljefs” - Digitālie reljefa modeļi apstrādi rezultējošie EGV; – “Soils” - augsni raksturojošie EGV. [pazimes-agregacijas] - plaši mainīga rakstuzīmju kombinācija, kas palīdz identificēt konkrētus ievades datus un produktus kā arī ar tiem veiktās aprakstošās statistikas darbības agregāciju sagatavošanai, ja ir laba izpratne par to sagatavošanu. Ja izpratne nav laba, tad šī ir nozīmīga daļa no unikālā identifikatora, kas izmantojams apraksta meklēšanai; [telpa] - raksturotā analīzes telpa ar iespējamām vērtībām: – “cell”=100 m analīzes šūna; – “r500”=telpa 500 m rādiusā ap ik analīzes šūnas centru; – “r1250”= telpa 1250 m rādiusā ap ik analīzes šūnas centru; – “r3000”=telpa 3000 m rādiusā ap ik 300 m šūnas centru (skatīt Procesēšanas atvieglošana); rezultāts savienots ar telpiski saistītajām 100 m (analīzes) šūnām; – “r10000”=telpa 10000 m rādiusā ap ik 1000 m šūnas centru (skatīt Procesēšanas atvieglošana); rezultāts savienots ar telpiski saistītajām 100 m (analīzes) šūnām. Aprēķinos izmantotās komandu rindas un to nepieciešamības skaidrojums katrai pazīmei visos mērogos ir cieši saistīti un gandrīz identiski, tādēļ, lai atvieglotu šī dokumenta izmantošanu (arī, lai samazinātu komandu rindu dublēšanos) tās visiem mērogiem raksturotas vienu reizi - pie šaurākās ainavu telpas, pārējās vietās sniedzot ātras piekļuves ceļu. 5.1 Procesēšanas atvieglošana Ekoģeogrāfisko mainīgo sagatavošanā nozīmīga un neizbēgama darba daļa iejauc vides raksturošanu noslēgtās telpas daļās. Tā kā liela apjoma (valsts līmeņa) vektordatu ģeometriju savstarpējo pārklāšanos procesēšana ir ārkārtīgi izaicinoša un dārga (laika un skaitļošanas izmaksu dēļ), to risina ar zonālo statistiku palīdzību. Zonālās statistikas pamatā ir rastra šūnu vērtību raksturošana ģeogrāfiskās telpas noslēgtās daļās - zonās. Raksturošanai visbiežāk izmanto kādus aprakstošās statistikas mērus (kā šajā projektā), bet var izmantot arī sarežģītākus aprēķinus. Dažādas ģeoprocesēšanas programmatūras izmanto atšķirīgas pieejas zonālās statistikas ieviešanai. Visbiežāk aprakstāmā rastra šūnas tiek klasificētas kā pilnībā piederīgas vai nepiederīgas zonai, kam atkarībā no izmantotās programmas var būt atšķirīgas pieejas, piemēram, zonu rasterizēšana vai aprakstāma rastra pikseļu centru aprēķini (piemēri). Šīm pieejām ir vairāki trūkumi, piemēram, (1) rezultāta precizitāte ir cieši saistīta ar aprakstāmā rastra izšķirtspēju un tās radītajām robežkļūdām gan rasterizācijā, gan aprakstu aprēķinos; (2) vienā rastra šūnā vienlaikus var atrasties tikai viena zona, kas var novest pie vēl lielākām zonu aprakstu kļūdām (nepilnīga pārklājuma) vai sevišķi lēniem iteratīviem aprēķiniem ik zonai atsevišķi, kas kļūst arvien nospiedošāki līdz ar zonu platības (pašas par sevi un savstarpējās pārklāšanās) pieaugumu. Kā efektīvākais risinājums abiem izaicinājumiem šobrīd ir zināms C++ programmēšanas valodā izstrādātais atvērtā koda exactextract, kam pieejama vadība R ar pakotni {exactextractr}. Programmatūras risinājums izmanto sevišķi ātru algoritmu, kurš ieviests vienā no ātrākajām programmēšanas valodām; zonu apraksti tiek rēķināti, svarojot ar pikseļa-platību-zonā, tādā veidā kompensējot rastra šūnu nesakritību ar zonām; risinājums labi mērogojas, pieļaujot vairāku procesora kodolu izmantošanu un nepieprasot visas rastra slāņa platības ielādi operatīvajā atmiņā. Tas nozīmē, ka zonālās statistikas aprēķinus ir iespējams veikt ar zemākas izšķirtspējas šūnām par ievades produktiem (10 m), piemēram, izmantojot analīzes šūnu (100 m) vērtības, kuras var iegūt dažādos veidos. Viens no veidiem EGV vērtību aprēķināšanai analīzes šūnā no ievades produktiem, protams, ir pati zonālā statistika. Tomēr, lai cik izceļami efektīvs {exactectractr} arī nebūtu, ja analīzes šūna precīzi robežojas ar ievades produktu šūnām, kas reizinātas ar kādu veselu skaitli (kā tas ir iestrādāts šajā materiālā), to daudzkārt (tūkstošiem reižu) ātrāk ir iespējams izdarīt, izmantojot kādu no rastra apstrādes pieejām, piemēram, aggregate vai resample. Tām galvenā atšķirība ir tāda, ka aggregate veic vērtību agregāciju (ar izvēlētu aprakstošās statistikas metodi) jauno/izveidoto/zemākās izšķirtspējas šunu centrējot ap uzskaites virzienā pirmo augstākās izšķirtspējas šūnu - visbiežāk tā ir apakšējā kreisā, kas nozīmē informācijas pārbīdīšanu telpā. Savukārt resample, kas izmantota šajā materiālā, aprakstu veic zemākas izšķirtspējas šūnā ietilpstošajām aprakstošā rastra šūnām. Jāatzīmē, ka resample ir apmēram 100 reižu lēnāka darbība par aggregate, tomēr visu Latvijas teritoriju aptverošam 10 m rastra slānim apstrādi par vidējo aritmētisko vērtību 100 m šūnā uz moderna procesora veic vien dažās sekundēs. Tas nozīmē mazu resursu izmaksu zaudējumu absolūtās vērtībās, turklāt resample vēl joprojām nodrošina daudzus tūkstošus reižu laika ietaupījumu salīdzinot ar zonālo statistiku, nezaudējot informācijas precizitāti. Svarīgi ir noskaidrot, cik daudz informācijas tiek zaudēts tālākos soļos - aprēķinot zonālās statistikas zonām, kuras precīzi nesakrīt ar aprakstošo rastru šūnām, ja izmanto 100 m izšķirtspēju, nevis oriģinālo - 10 m. Tas testēts ar vienu mainīgo, kuram ir plaša variabilitāte vidē - Lauku blokiem 10 m izšķirstpējā un to agregātu analīzes šūnā Lauku_Bloki_cell, aprēķinot klases seguma īpatsvaru 500 m, 1250 m un 3000 m rādiusā ap katru no analīzes šūnu centriem un aprēķinot Pīrsona korelācijas koeficientus visām (n=62750) analīzes šūnām Vektordatu režģi tks93_50km lapā “3434”. Pīrsona korelācijas koeficienti starp zonālās statistikas rezultātiem, izmantojot ar-pikseļa-platību-zonā svērto pieeju, aprakstāmajiemr astiem ar 10 m un 100 m izšķirtspēju: 500 m rādiusam: \\(\\rho=0.9999932\\); 1250 m rādiusam: \\(\\rho=0.9999932\\); 3000 m rādiusam: \\(\\rho=0.9999986\\). Tas nozīmē gandrīz funkcionālu korelāciju, tomēr ļauj samazināt skaitļošanas laiku no dažām līdz vairākiem simtiem reižu (pat tūkstošiem zonām ar 10000 m rādiusu), atkarībā no zonas platības un to savstarpējās pārklāšanās (laika mērogojums vizualizēts 5.1). Figure 5.1: Zonālās statistikas aprēķiniem (ap katru analīzes šūnas centru) nepieciešamais laiks, atkarībā no zonas platības (ar krāsu) un aprakstāmā rastra izšķirtspējas (attēla daļās) Aprēķiniem nepieciešamā laika dēļ, zonālās statistikas mērogošanai 10 000 m rādiusā ap ik analīzes šūnas centru pievienots arī ievades produkta agregāts līdz 1000 m šūnas izšķirtspējai, tomēr salīdzinājums veikts tikai 1000 zonās. Tā rezultāti: 10 m ~ 100 m: \\(\\rho=0.9999989\\); 100 m ~ 1000 m: \\(\\rho=0.9852817\\); 10 m ~ 1000 m: \\(\\rho=0.9852621\\); tātad, jau ievērojamu precizitātes zaudējumu (apmēram 1.5% korelācijā un ~3% dispersijas), kas nāk komplektā ar nepieciešamību aprēķiniem sagatavot papildus slāni. Tādēļ turpināta procesu optimizēšanas izpēte. Tā kā plašiem rādiusiem ap analīzes šūnu ir liela blakus esošo zonu savstarpējā pārklāšanās, kas ievērojami apgrūtina/paildzina zonālās statistikas aprēķinus, rezultējoties gandrīz identiskās vērtībās, nolēmām izmēģināt šo aprēķinu veikšanu nevis katrai analīzes šūnai, bet retināt tā, lai aprakstāmo zonu izvietojums būtu izsakāms kā zonas rādiusa dalījums ar 10, kura rezultāts veidojas kā analīzes šūnu reizinājums ar 10. Tas nozīmē, ka šo pieeju izmanto tikai zonām, kuras viedojas rādiusiem 3000 un 10000 m ap analīzes šūnās, tos veicot ik pēc, attiecīgi, 300 un 1000 m un attiecinot uz visām šajās 300 un 1000 m vektordatu šūnās esošajām analīzes šūnām (to izvietojums, savstarpējā saistība un attiecināmība ir iestrādāta Ar modeļiem aptveramā (analīzes) telpa un standartizācijas faili definēšanā). Lielākā teorētiski sagaidāmā kļūda šīs retināšanas rezultātā ir mazāka par 4%, kas izriet no zonu pārklāšanās. Tomēr, empīriskā salīdzinājumā tā vidēji ir daudz mazāka 5.2- atkārtojot zonālās statistikas aprēķinus iepriekš aprakstītajai pazīmei tajā pašā telpā, rezultējošais Pīrsona korelācijas koeficients ir \\(r=0.9966965\\) jeb &lt;1% dispersijas un regresējot - Pīrsona atlikumu vērtību kļūdu \\(MSE=0.0000108\\), tomēr darbu veicot ievērojami ātrāk - gandrīz 100 reizes plašākajā ainavas mērogā, kas ir tuvu veicamo aprēķinu skaita 100 reižu samazinājumam. Figure 5.2: Zonālās statistikas (10 000 m zonās) rezultātu salīdzinājums ar un bez aprēķinu telpiskās retināšanas Šīs prakses ieviešana ekoģeogrāfisko mainīgo aprēķiniem nepieciešamo laiku samazināja daudzus tūkstošus (atsevišķās daļās pat miljonus) reižu. Izmantojot apmēram 80% no Latvijas Universitātes Skaitliskās modelēšanas institūta HPC resursiem nepārtrauktā secīgu uzdevumu plūsmā, darbs, sākot ar analīzes telpas definēšanu un standartizācijas failu sagatavošanu un beidzot ar ekoģeogrāfisko mainīgo sagatavošanu (šīs nodaļas saturu ieskaitot), ir veicams līdz divu nedēļu laikā. 5.2 Ainava_pazimes-agregacijas_merogs Dažādas ievades ģeodatu kombinācijas ainavas aprakstu sagatavošanai. Kopumā balstās Kombinētā ainava ievades produktos, kuri nav tieši atbilstoši kādai no Lauku_pazimes-agregacijas_merogs vai Mezi_pazimes-agregacijas_merogs vidēm. 5.2.1 Ainava_Apbuve_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_Apbuve_cell.tif, centrēts un mērogots EGV nosaukums: Apbūves platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.2 Ainava_Apbuve_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_Apbuve_r500.tif, centrēts un mērogots EGV nosaukums: Apbūves platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.3 Ainava_Apbuve_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_Apbuve_r1250.tif, centrēts un mērogots EGV nosaukums: Apbūves platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.4 Ainava_Apbuve_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Apbuve_r3000.tif, centrēts un mērogots EGV nosaukums: Apbūves platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.5 Ainava_Apbuve_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Apbuve_r10000.tif, centrēts un mērogots EGV nosaukums: Apbūves platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.6 Ainava_Koki_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_Koki_cell.tif, centrēts un mērogots EGV nosaukums: Ar kokiem klātā platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.7 Ainava_Koki_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_Koki_r500.tif, centrēts un mērogots EGV nosaukums: Ar kokiem klātā platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.8 Ainava_Koki_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_Koki_r1250.tif, centrēts un mērogots EGV nosaukums: Ar kokiem klātā platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.9 Ainava_Koki_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Koki_r3000.tif, centrēts un mērogots EGV nosaukums: Ar kokiem klātā platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.10 Ainava_Koki_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Koki_r10000.tif, centrēts un mērogots EGV nosaukums: Ar kokiem klātā platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.11 Ainava_MeziNetaksets_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_MeziNetaksets_cell.tif, centrēts un mērogots EGV nosaukums: Netaksēto mežu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.12 Ainava_MeziNetaksets_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_MeziNetaksets_r500.tif, centrēts un mērogots EGV nosaukums: Netaksēto mežu platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.13 Ainava_MeziNetaksets_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_MeziNetaksets_r1250.tif, centrēts un mērogots EGV nosaukums: Netaksēto mežu platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.14 Ainava_MeziNetaksets_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_MeziNetaksets_r3000.tif, centrēts un mērogots EGV nosaukums: Netaksēto mežu platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.15 Ainava_MeziNetaksets_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_MeziNetaksets_r10000.tif, centrēts un mērogots EGV nosaukums: Netaksēto mežu platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.16 Ainava_Mitraji_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_Mitraji_cell.tif, centrēts un mērogots EGV nosaukums: Mitrāju (dažādu/visu) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.17 Ainava_Mitraji_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_Mitraji_r500.tif, centrēts un mērogots EGV nosaukums: Mitrāju (dažādu/visu) platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.18 Ainava_Mitraji_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_Mitraji_r1250.tif, centrēts un mērogots EGV nosaukums: Mitrāju (dažādu/visu) platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.19 Ainava_Mitraji_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Mitraji_r3000.tif, centrēts un mērogots EGV nosaukums: Mitrāju (dažādu/visu) platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.20 Ainava_Mitraji_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Mitraji_r10000.tif, centrēts un mērogots EGV nosaukums: Mitrāju (dažādu/visu) platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.21 Ainava_NiedrajiBebraines_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_NiedrajiBebraines_cell.tif, centrēts un mērogots EGV nosaukums: Niedrāju un bebraiņu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.22 Ainava_NiedrajiBebraines_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_NiedrajiBebraines_r500.tif, centrēts un mērogots EGV nosaukums: Niedrāju un bebraiņu platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.23 Ainava_NiedrajiBebraines_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_NiedrajiBebraines_r1250.tif, centrēts un mērogots EGV nosaukums: Niedrāju un bebraiņu platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.24 Ainava_NiedrajiBebraines_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_NiedrajiBebraines_r3000.tif, centrēts un mērogots EGV nosaukums: Niedrāju un bebraiņu platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.25 Ainava_NiedrajiBebraines_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_NiedrajiBebraines_r10000.tif, centrēts un mērogots EGV nosaukums: Niedrāju un bebraiņu platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.26 Ainava_ParkiKapiAlejas_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_ParkiKapiAlejas_cell.tif, centrēts un mērogots EGV nosaukums: Parku, aleju un kapu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.27 Ainava_ParkiKapiAlejas_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_ParkiKapiAlejas_r500.tif, centrēts un mērogots EGV nosaukums: Parku, aleju un kapu platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.28 Ainava_ParkiKapiAlejas_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_ParkiKapiAlejas_r1250.tif, centrēts un mērogots EGV nosaukums: Parku, aleju un kapu platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.29 Ainava_ParkiKapiAlejas_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_ParkiKapiAlejas_r3000.tif, centrēts un mērogots EGV nosaukums: Parku, aleju un kapu platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.30 Ainava_SmiltajiKudra_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_SmiltajiKudra_cell.tif, centrēts un mērogots EGV nosaukums: Smiltāju, smilts, grants un kūdras karjeru platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.31 Ainava_SmiltajiKudra_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_SmiltajiKudra_r500.tif, centrēts un mērogots EGV nosaukums: Smiltāju, smilts, grants un kūdras karjeru platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.32 Ainava_SmiltajiKudra_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_SmiltajiKudra_r1250.tif, centrēts un mērogots EGV nosaukums: Smiltāju, smilts, grants un kūdras karjeru platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.33 Ainava_SmiltajiKudra_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_SmiltajiKudra_r3000.tif, centrēts un mērogots EGV nosaukums: Smiltāju, smilts, grants un kūdras karjeru platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.34 Ainava_SmiltajiKudra_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_SmiltajiKudra_r10000.tif, centrēts un mērogots EGV nosaukums: Smiltāju, smilts, grants un kūdras karjeru platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.35 Ainava_Udeni_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_Udeni_cell.tif, centrēts un mērogots EGV nosaukums: Ūdeņu (grāvju, upju, ezeru, dīķu) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.36 Ainava_Udeni_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_Udeni_r500.tif, centrēts un mērogots EGV nosaukums: Ūdeņu (grāvju, upju, ezeru, dīķu) platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.37 Ainava_Udeni_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_Udeni_r1250.tif, centrēts un mērogots EGV nosaukums: Ūdeņu (grāvju, upju, ezeru, dīķu) platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.38 Ainava_Udeni_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Udeni_r3000.tif, centrēts un mērogots EGV nosaukums: Ūdeņu (grāvju, upju, ezeru, dīķu) platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.39 Ainava_Udeni_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Udeni_r10000.tif, centrēts un mērogots EGV nosaukums: Ūdeņu (grāvju, upju, ezeru, dīķu) platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.40 Ainava_Vasarnicas_cell Faila nosaukums un GeoTIFF pieejamība: Ainava_Vasarnicas_cell.tif, centrēts un mērogots EGV nosaukums: Mazdārziņu un vasarnīcu koloniju platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.41 Ainava_Vasarnicas_r500 Faila nosaukums un GeoTIFF pieejamība: Ainava_Vasarnicas_r500.tif, centrēts un mērogots EGV nosaukums: Mazdārziņu un vasarnīcu koloniju platības īpatsvars r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.42 Ainava_Vasarnicas_r1250 Faila nosaukums un GeoTIFF pieejamība: Ainava_Vasarnicas_r1250.tif, centrēts un mērogots EGV nosaukums: Mazdārziņu un vasarnīcu koloniju platības īpatsvars r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.43 Ainava_Vasarnicas_r3000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Vasarnicas_r3000.tif, centrēts un mērogots EGV nosaukums: Mazdārziņu un vasarnīcu koloniju platības īpatsvars r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.2.44 Ainava_Vasarnicas_r10000 Faila nosaukums un GeoTIFF pieejamība: Ainava_Vasarnicas_r10000.tif, centrēts un mērogots EGV nosaukums: Mazdārziņu un vasarnīcu koloniju platības īpatsvars r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.3 Climate_pazimes-agregacijas_merogs Laika apstākļus un klimatu raksturojošie EGV no meteoroloģisko/klimatoloģisko datu avotiem (šajā gadījumā ERA5 Land). Tikai analīzes šūnas līmeņa EGV. 5.3.1 Climate_FebPrec_cell Faila nosaukums un GeoTIFF pieejamība: Climate_FebPrec_cell.tif, centrēts un mērogots EGV nosaukums: Februāra (gada aukstākā mēneša) nokrišņu summu mediāna 2015-2023 Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.3.2 Climate_FebTempSum_cell Faila nosaukums un GeoTIFF pieejamība: Climate_FebTempSum_cell.tif, centrēts un mērogots EGV nosaukums: Februāra (gada aukstākā mēneša) vidējo gaisa temperatūru (K) 2 m augstumā mediāna 2015-2023 Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.3.3 Climate_JulPrec_cell Faila nosaukums un GeoTIFF pieejamība: Climate_JulPrec_cell.tif, centrēts un mērogots EGV nosaukums: Jūlija (gada siltākā mēneša) nokrišņu summu mediāna 2015-2023 Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.3.4 Climate_PosTempDays_cell Faila nosaukums un GeoTIFF pieejamība: Climate_PosTempDays_cell.tif, centrēts un mērogots EGV nosaukums: Dienu ar vidējo gaisa temperatūru 2 m augstumā vismaz 275 grādi K skaita mediāna 2015-2023 Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.3.5 Climate_VegTempSums_cell Faila nosaukums un GeoTIFF pieejamība: Climate_VegTempSums_cell.tif, centrēts un mērogots EGV nosaukums: Dienas vidējo temperatūru 2 m augstumā vismaz 279 grādi K summu mediāna 2015-2023 Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.3.6 Climate_YearPrecSum_cell Faila nosaukums un GeoTIFF pieejamība: Climate_YearPrecSum_cell.tif, centrēts un mērogots EGV nosaukums: Uzkrāto ik mēneša nokrišņu summu mediāna 2015-2023 Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4 Daudzv_pazimes-agregacijas_merogs Šenona daudzveidības indeksi ainavas klasēm. 5.4.1 Daudzv_Kopeja_r500 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Kopeja_r500.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss vispārīgajām ainavas klasēm r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.2 Daudzv_Kopeja_r1250 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Kopeja_r1250.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss vispārīgajām ainavas klasēm r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.3 Daudzv_Kopeja_r3000 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Kopeja_r3000.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss vispārīgajām ainavas klasēm r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.4 Daudzv_Kopeja_r10000 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Kopeja_r10000.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss vispārīgajām ainavas klasēm r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.5 Daudzv_Lauku_r500 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Lauku_r500.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām lauku klasēm r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.6 Daudzv_Lauku_r1250 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Lauku_r1250.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām lauku klasēm r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.7 Daudzv_Lauku_r3000 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Lauku_r3000.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām lauku klasēm r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.8 Daudzv_Lauku_r10000 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Lauku_r10000.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām lauku klasēm r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.9 Daudzv_Mezu_r500 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Mezu_r500.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām mežu klasēm r=500m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.10 Daudzv_Mezu_r1250 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Mezu_r1250.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām mežu klasēm r=1250m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.11 Daudzv_Mezu_r3000 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Mezu_r3000.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām mežu klasēm r=3000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.4.12 Daudzv_Mezu_r10000 Faila nosaukums un GeoTIFF pieejamība: Daudzv_Mezu_r10000.tif, centrēts un mērogots EGV nosaukums: β-līmeņa (vidējais α-līmeņa 500x500m) Šenona daudzveidības indekss detalizētajām mežu klasēm r=10000m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.5 Dist_pazimes-agregacijas_merogs Eiklīda distance līdz interešu objektam. Pēc savas būtītas, meta-mēroga pazīme, bet raksturota tikai kā vidējais aritmētiskais (10 m ievades datu šūnām) analīzes šūnā. 5.5.1 Dist_Apbuve-vid_cell Faila nosaukums un GeoTIFF pieejamība: Dist_Apbuve-vid_cell.tif, centrēts un mērogots EGV nosaukums: Attālums līdz apbūvei, vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.5.2 Dist_Atkritumi-vid_cell Faila nosaukums un GeoTIFF pieejamība: Dist_Atkritumi-vid_cell.tif, centrēts un mērogots EGV nosaukums: Attālums līdz atkritumu poligoniem, glabātuvēm un šķirotavām, vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.5.3 Dist_AtkritumuPoligoni-vid_cell Faila nosaukums un GeoTIFF pieejamība: Dist_AtkritumuPoligoni-vid_cell.tif, centrēts un mērogots EGV nosaukums: Attālums līdz atkritumu poligoniem, vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.5.4 Dist_DzilumsMezos-vid_cell Faila nosaukums un GeoTIFF pieejamība: Dist_DzilumsMezos-vid_cell.tif, centrēts un mērogots EGV nosaukums: Attālums mežaudžu (vismaz 5 m, vai klase koki) iekšienē līdz to malā, vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.5.5 Dist_Jura-vid_cell Faila nosaukums un GeoTIFF pieejamība: Dist_Jura-vid_cell.tif, centrēts un mērogots EGV nosaukums: Attālums līdz jūrai, vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.5.6 Dist_ZalajiIlggadigie-vid_cell Faila nosaukums un GeoTIFF pieejamība: Dist_ZalajiIlggadigie-vid_cell.tif, centrēts un mērogots EGV nosaukums: Attālums līdz ilglaicīgajiem zālājiem (LAD), vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6 EO_pazimes-agregacijas_merogs Zemes novērošanas sistēmu (šajā gadījumā tikai ESA Sentinel-2) indeksi. Tikai analīzes šūnas līmeņa EGV. 5.6.1 EO_NDVI-LYmed-iqr_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-LYmed-iqr_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2023. gada aprīļa līdz oktobra NDVI mediānas starpkvartiļu apgabals analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.2 EO_NDVI-LYmed-vid_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-LYmed-vid_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2023. gada aprīļa līdz oktobra NDVI mediānas vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.3 EO_NDVI-STiqr-med_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-STiqr-med_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDVI starpkvartiļu apgabalu vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.4 EO_NDVI-STmed-iqr_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-STmed-iqr_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDVI mediānas starpkvartiļu apgabals analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.5 EO_NDVI-STmed-vid_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-STmed-vid_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDVI mediānas vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.6 EO_NDVI-STp25-min_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-STp25-min_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDVI 25.procentiles mazākā vērtība analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.7 EO_NDVI-STp75-max_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDVI-STp75-max_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDVI 75.procentiles lielākā vērtība analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.8 EO_NDWI-LYmed-iqr_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDWI-LYmed-iqr_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2023. gada aprīļa līdz oktobra NDWI mediānas starpkvartiļu apgabals analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.9 EO_NDWI-LYmed-vid_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDWI-LYmed-vid_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2023. gada aprīļa līdz oktobra NDWI mediānas vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.10 EO_NDWI-STiqr-med_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDWI-STiqr-med_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDWI starpkvartiļu apgabalu vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.11 EO_NDWI-STmed-vid_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDWI-STmed-vid_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDWI mediānas vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.12 EO_NDWI-STp25-min_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDWI-STp25-min_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDWI 25.procentiles mazākā vērtība analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.6.13 EO_NDWI-STp75-max_cell Faila nosaukums un GeoTIFF pieejamība: EO_NDWI-STp75-max_cell.tif, centrēts un mērogots EGV nosaukums: Sentinel-2 (SR; s2cloudless) 2017-2023 ik gada aprīļa līdz oktobra NDWI 75.procentiles lielākā vērtība analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7 Lauku_pazimes-agregacijas_merogs Lauku vidi raksturojošie EGV, kuriem nozīmīgākie ievades dati ir no Lauku Atbalsta Dienesta lauku informācija. 5.7.1 Lauku_AramLabibaVasaraji_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaVasaraji_cell.tif, centrēts un mērogots EGV nosaukums: Vasaras graudaugu (LAD) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.2 Lauku_AramLabibaVasaraji_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaVasaraji_r500.tif, centrēts un mērogots EGV nosaukums: Vasaras graudaugu (LAD) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.3 Lauku_AramLabibaVasaraji_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaVasaraji_r1250.tif, centrēts un mērogots EGV nosaukums: Vasaras graudaugu (LAD) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.4 Lauku_AramLabibaVasaraji_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaVasaraji_r3000.tif, centrēts un mērogots EGV nosaukums: Vasaras graudaugu (LAD) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.5 Lauku_AramLabibaVasaraji_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaVasaraji_r10000.tif, centrēts un mērogots EGV nosaukums: Vasaras graudaugu (LAD) klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.6 Lauku_AramLabibaZiemaji_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaZiemaji_cell.tif, centrēts un mērogots EGV nosaukums: Ziemas graudaugu (LAD) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.7 Lauku_AramLabibaZiemaji_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaZiemaji_r500.tif, centrēts un mērogots EGV nosaukums: Ziemas graudaugu (LAD) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.8 Lauku_AramLabibaZiemaji_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaZiemaji_r1250.tif, centrēts un mērogots EGV nosaukums: Ziemas graudaugu (LAD) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.9 Lauku_AramLabibaZiemaji_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaZiemaji_r3000.tif, centrēts un mērogots EGV nosaukums: Ziemas graudaugu (LAD) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.10 Lauku_AramLabibaZiemaji_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramLabibaZiemaji_r10000.tif, centrēts un mērogots EGV nosaukums: Ziemas graudaugu (LAD) klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.11 Lauku_AramParejas_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramParejas_cell.tif, centrēts un mērogots EGV nosaukums: Citādi neklasificēto aramzemju (LAD+EO) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.12 Lauku_AramParejas_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramParejas_r500.tif, centrēts un mērogots EGV nosaukums: Citādi neklasificēto aramzemju (LAD+EO) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.13 Lauku_AramParejas_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramParejas_r1250.tif, centrēts un mērogots EGV nosaukums: Citādi neklasificēto aramzemju (LAD+EO) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.14 Lauku_AramParejas_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramParejas_r3000.tif, centrēts un mērogots EGV nosaukums: Citādi neklasificēto aramzemju (LAD+EO) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.15 Lauku_AramParejas_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramParejas_r10000.tif, centrēts un mērogots EGV nosaukums: Citādi neklasificēto aramzemju (LAD+EO) klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.16 Lauku_AramVaguRusinamas_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVaguRusinamas_cell.tif, centrēts un mērogots EGV nosaukums: Vagu un rušīnāmkultūru (LAD) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.17 Lauku_AramVaguRusinamas_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVaguRusinamas_r500.tif, centrēts un mērogots EGV nosaukums: Vagu un rušīnāmkultūru (LAD) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.18 Lauku_AramVaguRusinamas_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVaguRusinamas_r1250.tif, centrēts un mērogots EGV nosaukums: Vagu un rušīnāmkultūru (LAD) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.19 Lauku_AramVaguRusinamas_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVaguRusinamas_r3000.tif, centrēts un mērogots EGV nosaukums: Vagu un rušīnāmkultūru (LAD) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.20 Lauku_AramVaguRusinamas_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVaguRusinamas_r10000.tif, centrēts un mērogots EGV nosaukums: Vagu un rušīnāmkultūru (LAD) klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.21 Lauku_AramVasarasRapsiUTML_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVasarasRapsiUTML_cell.tif, centrēts un mērogots EGV nosaukums: Vasaras rapša (utml kultūru; LAD) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.22 Lauku_AramVasarasRapsiUTML_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVasarasRapsiUTML_r500.tif, centrēts un mērogots EGV nosaukums: Vasaras rapša (utml kultūru; LAD) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.23 Lauku_AramVasarasRapsiUTML_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVasarasRapsiUTML_r1250.tif, centrēts un mērogots EGV nosaukums: Vasaras rapša (utml kultūru; LAD) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.24 Lauku_AramVasarasRapsiUTML_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVasarasRapsiUTML_r3000.tif, centrēts un mērogots EGV nosaukums: Vasaras rapša (utml kultūru; LAD) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.25 Lauku_AramVasarasRapsiUTML_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVasarasRapsiUTML_r10000.tif, centrēts un mērogots EGV nosaukums: Vasaras rapša (utml kultūru; LAD) klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.26 Lauku_AramVisas_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVisas_cell.tif, centrēts un mērogots EGV nosaukums: Visu aramzemju klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.27 Lauku_AramVisas_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVisas_r500.tif, centrēts un mērogots EGV nosaukums: Visu aramzemju klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.28 Lauku_AramVisas_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVisas_r1250.tif, centrēts un mērogots EGV nosaukums: Visu aramzemju klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.29 Lauku_AramVisas_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVisas_r3000.tif, centrēts un mērogots EGV nosaukums: Visu aramzemju klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.30 Lauku_AramVisas_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramVisas_r10000.tif, centrēts un mērogots EGV nosaukums: Visu aramzemju klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.31 Lauku_AramZiemasRapsi_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AramZiemasRapsi_cell.tif, centrēts un mērogots EGV nosaukums: Ziemas rapša (utml kultūru; LAD) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.32 Lauku_AramZiemasRapsi_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramZiemasRapsi_r500.tif, centrēts un mērogots EGV nosaukums: Ziemas rapša (utml kultūru; LAD) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.33 Lauku_AramZiemasRapsi_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramZiemasRapsi_r1250.tif, centrēts un mērogots EGV nosaukums: Ziemas rapša (utml kultūru; LAD) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.34 Lauku_AramZiemasRapsi_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramZiemasRapsi_r3000.tif, centrēts un mērogots EGV nosaukums: Ziemas rapša (utml kultūru; LAD) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.35 Lauku_AramZiemasRapsi_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AramZiemasRapsi_r10000.tif, centrēts un mērogots EGV nosaukums: Ziemas rapša (utml kultūru; LAD) klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.36 Lauku_AugludarziLAD_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_AugludarziLAD_cell.tif, centrēts un mērogots EGV nosaukums: Augļu un ogu kultūru (LAD) klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.37 Lauku_AugludarziLAD_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_AugludarziLAD_r500.tif, centrēts un mērogots EGV nosaukums: Augļu un ogu kultūru (LAD) klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.38 Lauku_AugludarziLAD_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_AugludarziLAD_r1250.tif, centrēts un mērogots EGV nosaukums: Augļu un ogu kultūru (LAD) klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.39 Lauku_AugludarziLAD_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_AugludarziLAD_r3000.tif, centrēts un mērogots EGV nosaukums: Augļu un ogu kultūru (LAD) klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.40 Lauku_Bloki_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_Bloki_cell.tif, centrēts un mērogots EGV nosaukums: LAD lauku blokos iekļautās platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.41 Lauku_Bloki_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_Bloki_r500.tif, centrēts un mērogots EGV nosaukums: LAD lauku blokos iekļautās platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.42 Lauku_Bloki_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_Bloki_r1250.tif, centrēts un mērogots EGV nosaukums: LAD lauku blokos iekļautās platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.43 Lauku_Bloki_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_Bloki_r3000.tif, centrēts un mērogots EGV nosaukums: LAD lauku blokos iekļautās platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.44 Lauku_Bloki_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_Bloki_r10000.tif, centrēts un mērogots EGV nosaukums: LAD lauku blokos iekļautās platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.45 Lauku_KrumiLAD_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_KrumiLAD_cell.tif, centrēts un mērogots EGV nosaukums: LAD krūmveida kultūru platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.46 Lauku_KrumiLAD_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_KrumiLAD_r500.tif, centrēts un mērogots EGV nosaukums: LAD krūmveida kultūru platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.47 Lauku_KrumiLAD_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_KrumiLAD_r1250.tif, centrēts un mērogots EGV nosaukums: LAD krūmveida kultūru platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.48 Lauku_KrumiLAD_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_KrumiLAD_r3000.tif, centrēts un mērogots EGV nosaukums: LAD krūmveida kultūru platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.49 Lauku_Papuves_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_Papuves_cell.tif, centrēts un mērogots EGV nosaukums: LAD papuvju platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.50 Lauku_Papuves_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_Papuves_r500.tif, centrēts un mērogots EGV nosaukums: LAD papuvju platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.51 Lauku_Papuves_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_Papuves_r1250.tif, centrēts un mērogots EGV nosaukums: LAD papuvju platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.52 Lauku_Papuves_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_Papuves_r3000.tif, centrēts un mērogots EGV nosaukums: LAD papuvju platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.53 Lauku_Papuves_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_Papuves_r10000.tif, centrēts un mērogots EGV nosaukums: LAD papuvju platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.54 Lauku_ZalajiBezatbNELAD_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiBezatbNELAD_cell.tif, centrēts un mērogots EGV nosaukums: Citu zālāju (bez LAD atbalsta; ārpus LAD) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.55 Lauku_ZalajiBezatbNELAD_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiBezatbNELAD_r500.tif, centrēts un mērogots EGV nosaukums: Citu zālāju (bez LAD atbalsta; ārpus LAD) platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.56 Lauku_ZalajiBezatbNELAD_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiBezatbNELAD_r1250.tif, centrēts un mērogots EGV nosaukums: Citu zālāju (bez LAD atbalsta; ārpus LAD) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.57 Lauku_ZalajiBezatbNELAD_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiBezatbNELAD_r3000.tif, centrēts un mērogots EGV nosaukums: Citu zālāju (bez LAD atbalsta; ārpus LAD) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.58 Lauku_ZalajiBezatbNELAD_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiBezatbNELAD_r10000.tif, centrēts un mērogots EGV nosaukums: Citu zālāju (bez LAD atbalsta; ārpus LAD) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.59 Lauku_ZalajiIlggadigie_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiIlggadigie_cell.tif, centrēts un mērogots EGV nosaukums: LAD ilggadīgo zālāju platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.60 Lauku_ZalajiIlggadigie_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiIlggadigie_r500.tif, centrēts un mērogots EGV nosaukums: LAD ilggadīgo zālāju platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.61 Lauku_ZalajiIlggadigie_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiIlggadigie_r1250.tif, centrēts un mērogots EGV nosaukums: LAD ilggadīgo zālāju platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.62 Lauku_ZalajiIlggadigie_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiIlggadigie_r3000.tif, centrēts un mērogots EGV nosaukums: LAD ilggadīgo zālāju platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.63 Lauku_ZalajiIlggadigie_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiIlggadigie_r10000.tif, centrēts un mērogots EGV nosaukums: LAD ilggadīgo zālāju platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.64 Lauku_ZalajiKultivetie_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiKultivetie_cell.tif, centrēts un mērogots EGV nosaukums: LAD kultivēto zālāju (un pielīdzināmo klašu) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.65 Lauku_ZalajiKultivetie_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiKultivetie_r500.tif, centrēts un mērogots EGV nosaukums: LAD kultivēto zālāju (un pielīdzināmo klašu) platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.66 Lauku_ZalajiKultivetie_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiKultivetie_r1250.tif, centrēts un mērogots EGV nosaukums: LAD kultivēto zālāju (un pielīdzināmo klašu) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.67 Lauku_ZalajiKultivetie_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiKultivetie_r3000.tif, centrēts un mērogots EGV nosaukums: LAD kultivēto zālāju (un pielīdzināmo klašu) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.68 Lauku_ZalajiKultivetie_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiKultivetie_r10000.tif, centrēts un mērogots EGV nosaukums: LAD kultivēto zālāju (un pielīdzināmo klašu) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.69 Lauku_ZalajiVisi_cell Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiVisi_cell.tif, centrēts un mērogots EGV nosaukums: Visu zālāju klašu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.70 Lauku_ZalajiVisi_r500 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiVisi_r500.tif, centrēts un mērogots EGV nosaukums: Visu zālāju klašu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.71 Lauku_ZalajiVisi_r1250 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiVisi_r1250.tif, centrēts un mērogots EGV nosaukums: Visu zālāju klašu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.72 Lauku_ZalajiVisi_r3000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiVisi_r3000.tif, centrēts un mērogots EGV nosaukums: Visu zālāju klašu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.7.73 Lauku_ZalajiVisi_r10000 Faila nosaukums un GeoTIFF pieejamība: Lauku_ZalajiVisi_r10000.tif, centrēts un mērogots EGV nosaukums: Visu zālāju klašu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8 Malas_pazimes-agregacijas_merogs Specifisku malu daudzumu raksturojošie EGV. Šajā projektā pieņemts, ka visas malas starp ainavas klasēm, kas izmantotas konkrētā EGV sagatavošanā ir salīdzināmas. 5.8.1 Malas_Apbuve-Koki_cell Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-Koki_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un kokiem, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.2 Malas_Apbuve-Koki_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-Koki_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un kokiem, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.3 Malas_Apbuve-Koki_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-Koki_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un kokiem, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.4 Malas_Apbuve-Koki_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-Koki_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un kokiem, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.5 Malas_Apbuve-Koki_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-Koki_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un kokiem, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.6 Malas_Apbuve-LIZ_cell Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-LIZ_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un LIZ, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.7 Malas_Apbuve-LIZ_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-LIZ_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un LIZ, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.8 Malas_Apbuve-LIZ_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-LIZ_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un LIZ, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.9 Malas_Apbuve-LIZ_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-LIZ_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un LIZ, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.10 Malas_Apbuve-LIZ_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_Apbuve-LIZ_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo robežu starp apbūvi un LIZ, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.11 Malas_AramzemesY_cell Faila nosaukums un GeoTIFF pieejamība: Malas_AramzemesY_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo aramzemju malas ar jebko citu, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.12 Malas_AramzemesY_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_AramzemesY_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo aramzemju malas ar jebko citu, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.13 Malas_AramzemesY_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_AramzemesY_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo aramzemju malas ar jebko citu, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.14 Malas_AramzemesY_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_AramzemesY_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo aramzemju malas ar jebko citu, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.15 Malas_AramzemesY_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_AramzemesY_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo aramzemju malas ar jebko citu, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.16 Malas_Celi_cell Faila nosaukums un GeoTIFF pieejamība: Malas_Celi_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pusi no ceļu malām ar jebko citu, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.17 Malas_Celi_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_Celi_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pusi no ceļu malām ar jebko citu, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.18 Malas_Celi_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_Celi_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pusi no ceļu malām ar jebko citu, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.19 Malas_Celi_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_Celi_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pusi no ceļu malām ar jebko citu, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.20 Malas_Celi_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_Celi_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pusi no ceļu malām ar jebko citu, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.21 Malas_KokiY_cell Faila nosaukums un GeoTIFF pieejamība: Malas_KokiY_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ar kokiem klāto platību malas ar jebko citu, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.22 Malas_KokiY_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_KokiY_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ar kokiem klāto platību malas ar jebko citu, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.23 Malas_KokiY_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_KokiY_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ar kokiem klāto platību malas ar jebko citu, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.24 Malas_KokiY_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_KokiY_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ar kokiem klāto platību malas ar jebko citu, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.25 Malas_KokiY_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_KokiY_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ar kokiem klāto platību malas ar jebko citu, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.26 Malas_LIZzemieKoki-Koki_cell Faila nosaukums un GeoTIFF pieejamība: Malas_LIZzemieKoki-Koki_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo LIZ_izcirtumu_krūmu malas ar kokiem (vismaz 5m), skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.27 Malas_LIZzemieKoki-Koki_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_LIZzemieKoki-Koki_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo LIZ_izcirtumu_krūmu malas ar kokiem (vismaz 5m), skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.28 Malas_LIZzemieKoki-Koki_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_LIZzemieKoki-Koki_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo LIZ_izcirtumu_krūmu malas ar kokiem (vismaz 5m), skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.29 Malas_LIZzemieKoki-Koki_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_LIZzemieKoki-Koki_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo LIZ_izcirtumu_krūmu malas ar kokiem (vismaz 5m), skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.30 Malas_LIZzemieKoki-Koki_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_LIZzemieKoki-Koki_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo LIZ_izcirtumu_krūmu malas ar kokiem (vismaz 5m), skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.31 Malas_NiedrajiBebraines-Udens_cell Faila nosaukums un GeoTIFF pieejamība: Malas_NiedrajiBebraines-Udens_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo niedrāju_meldrāju_bebraiņu malas ar ūdeni, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.32 Malas_NiedrajiBebraines-Udens_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_NiedrajiBebraines-Udens_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo niedrāju_meldrāju_bebraiņu malas ar ūdeni, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.33 Malas_NiedrajiBebraines-Udens_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_NiedrajiBebraines-Udens_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo niedrāju_meldrāju_bebraiņu malas ar ūdeni, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.34 Malas_NiedrajiBebraines-Udens_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_NiedrajiBebraines-Udens_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo niedrāju_meldrāju_bebraiņu malas ar ūdeni, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.35 Malas_NiedrajiBebraines-Udens_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_NiedrajiBebraines-Udens_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo niedrāju_meldrāju_bebraiņu malas ar ūdeni, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.36 Malas_PieaugParaugY_cell Faila nosaukums un GeoTIFF pieejamība: Malas_PieaugParaugY_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pieaugušu un pāraugušu mežaudžu malas ar jebko citu, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.37 Malas_PieaugParaugY_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_PieaugParaugY_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pieaugušu un pāraugušu mežaudžu malas ar jebko citu, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.38 Malas_PieaugParaugY_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_PieaugParaugY_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pieaugušu un pāraugušu mežaudžu malas ar jebko citu, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.39 Malas_PieaugParaugY_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_PieaugParaugY_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pieaugušu un pāraugušu mežaudžu malas ar jebko citu, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.40 Malas_PieaugParaugY_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_PieaugParaugY_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo pieaugušu un pāraugušu mežaudžu malas ar jebko citu, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.41 Malas_Udens-LIZ_cell Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-LIZ_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar LIZ, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.42 Malas_Udens-LIZ_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-LIZ_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar LIZ, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.43 Malas_Udens-LIZ_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-LIZ_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar LIZ, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.44 Malas_Udens-LIZ_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-LIZ_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar LIZ, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.45 Malas_Udens-LIZ_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-LIZ_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar LIZ, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.46 Malas_Udens-Zalaji_cell Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-Zalaji_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar zālājiem, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.47 Malas_Udens-Zalaji_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-Zalaji_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar zālājiem, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.48 Malas_Udens-Zalaji_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-Zalaji_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar zālājiem, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.49 Malas_Udens-Zalaji_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-Zalaji_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar zālājiem, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.50 Malas_Udens-Zalaji_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_Udens-Zalaji_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdens malas ar zālājiem, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.51 Malas_UdensY_cell Faila nosaukums un GeoTIFF pieejamība: Malas_UdensY_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdeņu malas ar jebko citu, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.52 Malas_UdensY_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_UdensY_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdeņu malas ar jebko citu, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.53 Malas_UdensY_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_UdensY_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdeņu malas ar jebko citu, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.54 Malas_UdensY_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_UdensY_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdeņu malas ar jebko citu, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.55 Malas_UdensY_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_UdensY_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo ūdeņu malas ar jebko citu, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.56 Malas_ZalajiY_cell Faila nosaukums un GeoTIFF pieejamība: Malas_ZalajiY_cell.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo zālāju malas ar jebko citu, skaits analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.57 Malas_ZalajiY_r500 Faila nosaukums un GeoTIFF pieejamība: Malas_ZalajiY_r500.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo zālāju malas ar jebko citu, skaits r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.58 Malas_ZalajiY_r1250 Faila nosaukums un GeoTIFF pieejamība: Malas_ZalajiY_r1250.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo zālāju malas ar jebko citu, skaits r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.59 Malas_ZalajiY_r3000 Faila nosaukums un GeoTIFF pieejamība: Malas_ZalajiY_r3000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo zālāju malas ar jebko citu, skaits r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.8.60 Malas_ZalajiY_r10000 Faila nosaukums un GeoTIFF pieejamība: Malas_ZalajiY_r10000.tif, centrēts un mērogots EGV nosaukums: Šūnu (10m), kuras raksturo zālāju malas ar jebko citu, skaits r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9 Mezi_pazimes-agregacijas_merogs Mežus raksturojošie EGV, kuriem nozīmīgākie ievades dati ir no Valsts meža dienesta Meža valsts reģistrs. 5.9.1 Mezi_ApsuKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_ApsuKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva apšu krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.2 Mezi_BerzuKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_BerzuKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva bērzu krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.3 Mezi_EgluKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_EgluKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva egļu krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.4 Mezi_EitrPurv_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrPurv_cell.tif, centrēts un mērogots EGV nosaukums: Eitrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.5 Mezi_EitrPurv_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrPurv_r1250.tif, centrēts un mērogots EGV nosaukums: Eitrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.6 Mezi_EitrPurv_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrPurv_r3000.tif, centrēts un mērogots EGV nosaukums: Eitrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.7 Mezi_EitrPurv_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrPurv_r10000.tif, centrēts un mērogots EGV nosaukums: Eitrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.8 Mezi_EitrSaus_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSaus_cell.tif, centrēts un mērogots EGV nosaukums: Eitrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.9 Mezi_EitrSaus_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSaus_r1250.tif, centrēts un mērogots EGV nosaukums: Eitrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.10 Mezi_EitrSaus_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSaus_r3000.tif, centrēts un mērogots EGV nosaukums: Eitrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.11 Mezi_EitrSaus_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSaus_r10000.tif, centrēts un mērogots EGV nosaukums: Eitrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.12 Mezi_EitrSus_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSus_cell.tif, centrēts un mērogots EGV nosaukums: Eitrofu susināto mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.13 Mezi_EitrSus_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSus_r1250.tif, centrēts un mērogots EGV nosaukums: Eitrofu susināto mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.14 Mezi_EitrSus_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSus_r3000.tif, centrēts un mērogots EGV nosaukums: Eitrofu susināto mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.15 Mezi_EitrSus_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_EitrSus_r10000.tif, centrēts un mērogots EGV nosaukums: Eitrofu susināto mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.16 Mezi_IzcUNzem5m_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_IzcUNzem5m_cell.tif, centrēts un mērogots EGV nosaukums: Izcirtumu un MVR mežaudžu līdz 5 m platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.17 Mezi_IzcUNzem5m_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_IzcUNzem5m_r500.tif, centrēts un mērogots EGV nosaukums: Izcirtumu un MVR mežaudžu līdz 5 m platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.18 Mezi_IzcUNzem5m_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_IzcUNzem5m_r1250.tif, centrēts un mērogots EGV nosaukums: Izcirtumu un MVR mežaudžu līdz 5 m platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.19 Mezi_IzcUNzem5m_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_IzcUNzem5m_r3000.tif, centrēts un mērogots EGV nosaukums: Izcirtumu un MVR mežaudžu līdz 5 m platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.20 Mezi_IzcUNzem5m_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_IzcUNzem5m_r10000.tif, centrēts un mērogots EGV nosaukums: Izcirtumu un MVR mežaudžu līdz 5 m platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.21 Mezi_Jauktukoku_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_Jauktukoku_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.22 Mezi_Jauktukoku_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jauktukoku_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.23 Mezi_Jauktukoku_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jauktukoku_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.24 Mezi_Jauktukoku_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jauktukoku_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku mežaudžu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.25 Mezi_JauktukokuJaunas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuJaunas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.26 Mezi_JauktukokuJaunas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuJaunas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.27 Mezi_JauktukokuJaunas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuJaunas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.28 Mezi_JauktukokuJaunas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuJaunas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.29 Mezi_JauktukokuVecas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuVecas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku pieaugušo un pāraugušo mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.30 Mezi_JauktukokuVecas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuVecas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku pieaugušo un pāraugušo mežaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.31 Mezi_JauktukokuVecas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuVecas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku pieaugušo un pāraugušo mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.32 Mezi_JauktukokuVecas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_JauktukokuVecas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jauktu koku pieaugušo un pāraugušo mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.33 Mezi_Jaunaudzes5mKrumaji_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_Jaunaudzes5mKrumaji_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jaunaudžu (no 5 m), LAD krūmveida kultūru un ārpus tiem esošo krūmāju platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.34 Mezi_Jaunaudzes5mKrumaji_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jaunaudzes5mKrumaji_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jaunaudžu (no 5 m), LAD krūmveida kultūru un ārpus tiem esošo krūmāju platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.35 Mezi_Jaunaudzes5mKrumaji_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jaunaudzes5mKrumaji_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jaunaudžu (no 5 m), LAD krūmveida kultūru un ārpus tiem esošo krūmāju platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.36 Mezi_Jaunaudzes5mKrumaji_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jaunaudzes5mKrumaji_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jaunaudžu (no 5 m), LAD krūmveida kultūru un ārpus tiem esošo krūmāju platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.37 Mezi_Jaunaudzes5mKrumaji_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Jaunaudzes5mKrumaji_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto jaunaudžu (no 5 m), LAD krūmveida kultūru un ārpus tiem esošo krūmāju platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.38 Mezi_KopejaKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_KopejaKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.39 Mezi_LielakaisDiametrs-max_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_LielakaisDiametrs-max_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētais lielākā koka diametrs analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.40 Mezi_MelnalksnuKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_MelnalksnuKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva melnalkšņu krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.41 Mezi_MezoSaus_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_MezoSaus_cell.tif, centrēts un mērogots EGV nosaukums: Mezotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.42 Mezi_MezoSaus_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_MezoSaus_r1250.tif, centrēts un mērogots EGV nosaukums: Mezotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.43 Mezi_MezoSaus_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_MezoSaus_r3000.tif, centrēts un mērogots EGV nosaukums: Mezotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.44 Mezi_MezoSaus_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_MezoSaus_r10000.tif, centrēts un mērogots EGV nosaukums: Mezotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.45 Mezi_NogabalaVecumaProp-vid_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_NogabalaVecumaProp-vid_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā valdošās sugas vecuma īpatsvars no galvenās cirtes vecuma, vidējais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.46 Mezi_OligoPurv_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoPurv_cell.tif, centrēts un mērogots EGV nosaukums: Oligotrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.47 Mezi_OligoPurv_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoPurv_r1250.tif, centrēts un mērogots EGV nosaukums: Oligotrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.48 Mezi_OligoPurv_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoPurv_r3000.tif, centrēts un mērogots EGV nosaukums: Oligotrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.49 Mezi_OligoPurv_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoPurv_r10000.tif, centrēts un mērogots EGV nosaukums: Oligotrofu purvaiņu mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.50 Mezi_OligoSaus_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSaus_cell.tif, centrēts un mērogots EGV nosaukums: Oligotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.51 Mezi_OligoSaus_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSaus_r1250.tif, centrēts un mērogots EGV nosaukums: Oligotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.52 Mezi_OligoSaus_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSaus_r3000.tif, centrēts un mērogots EGV nosaukums: Oligotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.53 Mezi_OligoSaus_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSaus_r10000.tif, centrēts un mērogots EGV nosaukums: Oligotrofu sausieņu un slapjaiņu mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.54 Mezi_OligoSus_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSus_cell.tif, centrēts un mērogots EGV nosaukums: Oligotrofu susināto mežu (MVR MAAT klase) platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.55 Mezi_OligoSus_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSus_r1250.tif, centrēts un mērogots EGV nosaukums: Oligotrofu susināto mežu (MVR MAAT klase) platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.56 Mezi_OligoSus_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSus_r3000.tif, centrēts un mērogots EGV nosaukums: Oligotrofu susināto mežu (MVR MAAT klase) platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.57 Mezi_OligoSus_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_OligoSus_r10000.tif, centrēts un mērogots EGV nosaukums: Oligotrofu susināto mežu (MVR MAAT klase) platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.58 Mezi_PieaugParaug_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_PieaugParaug_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto pieaugušo un pāraugušo mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.59 Mezi_PieaugParaug_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_PieaugParaug_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto pieaugušo un pāraugušo mežaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.60 Mezi_PieaugParaug_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_PieaugParaug_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto pieaugušo un pāraugušo mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.61 Mezi_PieaugParaug_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_PieaugParaug_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto pieaugušo un pāraugušo mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.62 Mezi_PieaugParaug_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_PieaugParaug_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto pieaugušo un pāraugušo mežaudžu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.63 Mezi_Platlapju_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_Platlapju_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.64 Mezi_Platlapju_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_Platlapju_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.65 Mezi_Platlapju_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Platlapju_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.66 Mezi_Platlapju_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Platlapju_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju mežaudžu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.67 Mezi_PlatlapjuJaunas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuJaunas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.68 Mezi_PlatlapjuJaunas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuJaunas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.69 Mezi_PlatlapjuJaunas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuJaunas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.70 Mezi_PlatlapjuJaunas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuJaunas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.71 Mezi_PlatlapjuKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva platlapju krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.72 Mezi_PlatlapjuVecas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuVecas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.73 Mezi_PlatlapjuVecas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuVecas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.74 Mezi_PlatlapjuVecas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuVecas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.75 Mezi_PlatlapjuVecas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_PlatlapjuVecas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto platlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.76 Mezi_PriezuKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_PriezuKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva priežu krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.77 Mezi_Saurlapju_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_Saurlapju_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.78 Mezi_Saurlapju_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_Saurlapju_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.79 Mezi_Saurlapju_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Saurlapju_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.80 Mezi_Saurlapju_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Saurlapju_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju mežaudžu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.81 Mezi_SaurlapjuCKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuCKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva šaurlapju (atsevišķi neaprakstīto) krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.82 Mezi_SaurlapjuJaunas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuJaunas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.83 Mezi_SaurlapjuJaunas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuJaunas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.84 Mezi_SaurlapjuJaunas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuJaunas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.85 Mezi_SaurlapjuJaunas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuJaunas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.86 Mezi_SaurlapjuVecas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuVecas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.87 Mezi_SaurlapjuVecas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuVecas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.88 Mezi_SaurlapjuVecas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuVecas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.89 Mezi_SaurlapjuVecas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuVecas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto šaurlapju pieaugušo un pāraugušo mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.90 Mezi_SaurlapjuVKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SaurlapjuVKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva šaurlapju (visu) krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.91 Mezi_Skujkoku_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_Skujkoku_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.92 Mezi_Skujkoku_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_Skujkoku_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.93 Mezi_Skujkoku_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Skujkoku_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.94 Mezi_Skujkoku_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_Skujkoku_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku mežaudžu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.95 Mezi_SkujkokuJaunas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuJaunas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.96 Mezi_SkujkokuJaunas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuJaunas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.97 Mezi_SkujkokuJaunas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuJaunas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.98 Mezi_SkujkokuJaunas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuJaunas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku jaunaudžu, vidēja vecuma un briestaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.99 Mezi_SkujkokuKraja-sum_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuKraja-sum_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva skujkoku krāja analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.100 Mezi_SkujkokuVecas_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuVecas_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku pieaugušo un pāraugušo mežaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.101 Mezi_SkujkokuVecas_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuVecas_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku pieaugušo un pāraugušo mežaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.102 Mezi_SkujkokuVecas_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuVecas_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku pieaugušo un pāraugušo mežaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.103 Mezi_SkujkokuVecas_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_SkujkokuVecas_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto skujkoku pieaugušo un pāraugušo mežaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.104 Mezi_TaucLaiks-vid_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_TaucLaiks-vid_cell.tif, centrēts un mērogots EGV nosaukums: Laiks no pēdējā ar koku augšanu saistītā traucējuma līdz 2024.gadam, vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.105 Mezi_ValdosaisDiametrs-max_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_ValdosaisDiametrs-max_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrētā pirmā stāva valdošās sugas nogabalā diametrs, lielākais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.106 Mezi_VidejasBriestaudzes_cell Faila nosaukums un GeoTIFF pieejamība: Mezi_VidejasBriestaudzes_cell.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto vidēja vecuma un briestaudžu platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.107 Mezi_VidejasBriestaudzes_r500 Faila nosaukums un GeoTIFF pieejamība: Mezi_VidejasBriestaudzes_r500.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto vidēja vecuma un briestaudžu platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.108 Mezi_VidejasBriestaudzes_r1250 Faila nosaukums un GeoTIFF pieejamība: Mezi_VidejasBriestaudzes_r1250.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto vidēja vecuma un briestaudžu platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.109 Mezi_VidejasBriestaudzes_r3000 Faila nosaukums un GeoTIFF pieejamība: Mezi_VidejasBriestaudzes_r3000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto vidēja vecuma un briestaudžu platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.9.110 Mezi_VidejasBriestaudzes_r10000 Faila nosaukums un GeoTIFF pieejamība: Mezi_VidejasBriestaudzes_r10000.tif, centrēts un mērogots EGV nosaukums: VMD MVR reģistrēto vidēja vecuma un briestaudžu platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10 Reljefs_pazimes-agregacijas_merogs Digitālie reljefa modeļi apstrādi rezultējošie EGV. 5.10.1 Reljefs_Aspect-iqr_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_Aspect-iqr_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) pikseļu vērsumu (debespuse, grādos) analīzes šūnā starpkvartiļu amplitūda Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.2 Reljefs_Aspect-mean_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_Aspect-mean_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) pikseļu vērsums (debespuse, grādos), vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.3 Reljefs_DiS-area_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-area_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju platības īpatsvars analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.4 Reljefs_DiS-area_r500 Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-area_r500.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju platības īpatsvars r=500 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.5 Reljefs_DiS-area_r1250 Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-area_r1250.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju platības īpatsvars r=1250 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.6 Reljefs_DiS-area_r3000 Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-area_r3000.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju platības īpatsvars r=3000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.7 Reljefs_DiS-area_r10000 Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-area_r10000.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju platības īpatsvars r=10000 m ap analīzes šūnas centru Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.8 Reljefs_DiS-max_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-max_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju lielākais dziļums analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.9 Reljefs_DiS-mean_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_DiS-mean_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) beznoteces depresiju vidējais dziļums analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.10 Reljefs_Slope-iqr_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_Slope-iqr_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) pikseļu slīpumu (nogāze, grādos) analīzes šūnā starpkvartiļu amplitūda Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.11 Reljefs_Slope-mean_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_Slope-mean_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) pikseļu slīpums (nogāze, grādos), vidējais aritmētiskais analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.10.12 Reljefs_TWI-mean_cell Faila nosaukums un GeoTIFF pieejamība: Reljefs_TWI-mean_cell.tif, centrēts un mērogots EGV nosaukums: Reljefa modeļa (DEM, 10 m) topogrāfiskā mitruma indeksa vidējā aritmētiskā vērtība analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.11 Soils_pazimes-agregacijas_merogs Šajā projektā ir sagatavots tikai viens augsni tiešā veidā raksturojošs EGV. Tikai analīzes šūnas līmeņa EGV. 5.11.1 Soils_OrganicCarbon_cell Faila nosaukums un GeoTIFF pieejamība: Soils_OrganicCarbon_cell.tif, centrēts un mērogots EGV nosaukums: Eiropas vienotā pētījumu centra (JRC) iztrādātā augsnes modeļa parametra “organiskais ogleklis” vidējā vērtība analīzes šūnā Izveidošanas gaita un atkarības: Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(tidyverse)) {install.packages(&quot;tidyverse&quot;); require(tidyverse)} if(!require(sf)) {install.packages(&quot;sf&quot;); require(sf)} if(!require(arrow)) {install.packages(&quot;arrow&quot;); require(arrow)} if(!require(sfarrow)) {install.packages(&quot;sfarrow&quot;); require(sfarrow)} if(!require(mgcv)) {install.packages(&quot;mgcv&quot;); require(mgcv)} # rastra templates ---- paraugs=rast(&quot;./Templates/TemplateRasters/LV10m_10km.tif&quot;) template100=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) rastrs100=raster::raster(template100) 5.12 Beigu apstrāde Lai gan ievades datu apstrādē, ievades produktu sagatavošanā un EGV izstrādē ir izmantoti vienoti harmonizēšanas faili un cik vien racionāli tas ir iespējams, veikta robu aizpildīšana, ne visos gadījumos tas ir bijis uzticami iespējams. Daļēji tas ir uzticamu datu un piemērotu aizpildīšanas metožu trūkums vai to pielietošanas resursu izmaksas (nepieciešamais laiks attiecībā pret koriģējamo telpu - tās platību un novietojumu pie robežām). Galvenokārt šie trūkumi attiecas uz digitālo reljefa modeļu telpisko pārklājumu, tomēr daļēji arī uz Sentinel-2 pikseļu projektējumu. Šie trūkumi informācijā skar mazāk par 2200 šūnām (1 ha), kuras atrodas uz valsts robežas un kurās kopējā informācijas pieejamība ir ārkārtīgi ierobežota. Šīs beigu apstrādes ietvaros ir veikta arī failu nosaukumu nomenklatūras harmonizēšana. Failu nosaukumi un tajos esošo informācijas iztrūkumi apjomi ir apskatāmi šajā failā. Zemāk esošās komandu rindas harmonizē slāņus un to nosaukumus. Code # libs ---- if(!require(terra)) {install.packages(&quot;terra&quot;); require(terra)} if(!require(openxlsx)) {install.packages(&quot;openxlsx&quot;); require(openxlsx)} if(!require(readxl)) {install.packages(&quot;readxl&quot;); require(readxl)} # Templates ---- vieni=rast(&quot;./Templates/TemplateRasters/LV100m_10km.tif&quot;) nulles=subst(vieni,1,0) # Iepazīšanās ----- failu_celi=list.files(&quot;./Rastri_100m/RAW/&quot;,full.names = TRUE,pattern=&quot;.tif$&quot;) nosaukumiem=list.files(&quot;./Rastri_100m/RAW/&quot;,full.names = FALSE,pattern=&quot;.tif$&quot;) faili=data.frame(faili=failu_celi, nosaukumi=nosaukumiem, pietrukst=NA) for(i in seq_along(faili$faili)){ print(i) sakums=Sys.time() fails=rast(faili$faili[i]) fails=project(fails,nulles) maskets=mask(fails,nulles) iztrukumi=ifel(is.na(maskets)&amp;!is.na(nulles),1,NA) frekvences=freq(iztrukumi) vertiba=frekvences$count[frekvences$value==1] faili$pietrukst[i]=vertiba beigas=Sys.time() laiks=beigas-sakums print(laiks) } aspektam=rast(&quot;./Rastri_100m/RAW/reljefs_Aspect_mean_cell.tif&quot;) aspekts_maskets=maskets=mask(aspektam,nulles) nulles2=ifel(!is.na(aspekts_maskets)&amp;!is.na(nulles),0,NA) EOLY=rast(&quot;./Rastri_100m/RAW//EO_NDVI_LY_med_iqr.tif&quot;) nulles3=ifel(!is.na(EOLY)&amp;!is.na(nulles2),0,NA) freq(nulles) freq(nulles2) freq(nulles3) writeRaster(nulles3,&quot;./Rastri_100m/nulles_LV100m_10km.tif&quot;) faili$pietrukst2=NA for(i in seq_along(faili$faili)){ print(i) sakums=Sys.time() fails=rast(faili$faili[i]) fails=project(fails,nulles3) maskets=mask(fails,nulles3) iztrukumi=ifel(is.na(maskets)&amp;!is.na(nulles3),1,NA) frekvences=freq(iztrukumi) vertiba=frekvences$count[frekvences$value==1] faili$pietrukst2[i]=vertiba beigas=Sys.time() laiks=beigas-sakums print(laiks) } write.xlsx(faili,&quot;./Rastri_100m/RAW_names.xlsx&quot;) # Nosaukumi projektētajiem un mērogotajiem slāņiem piešķirti analogi. # Pēc nosaukumu harmonizēšanas, fails pārsaukts par &quot;EGV_names.xlsx&quot; # un izmantots tālāk # Pārsaukšana ---- nosaukumiem=read_excel(&quot;./Rastri_100m/EGV_names.xlsx&quot;) definicija=rast(&quot;./Rastri_100m/nulles_LV100m_10km.tif&quot;) for(i in seq_along(nosaukumiem$nosaukumi)){ print(i) sakums=Sys.time() fails=rast(nosaukumiem$faili[i]) fails=project(fails,definicija) maskets=mask(fails,definicija) names(maskets)=substr(nosaukumiem$proj_NAME[i],1,nchar(nosaukumiem$proj_NAME[i])-4) writeRaster(maskets, filename=paste0(&quot;./Rastri_100m/Proj/&quot;,nosaukumiem$proj_NAME[i]), overwrite=TRUE) merogots=terra::scale(maskets,center = TRUE,scale = TRUE) writeRaster(merogots, filename=paste0(&quot;./Rastri_100m/Scaled/&quot;,nosaukumiem$scale_NAME[i]), overwrite=TRUE) beigas=Sys.time() ilgums=beigas-sakums print(ilgums) } "],["Chapter6.html", "6 Novērojumu atlase 6.1 Datu avoti 6.2 Nomenklatūra 6.3 Atrašanās Latvijā 6.4 Datums un laiks 6.5 Ligzdošanas pazīmes 6.6 Dublieri 6.7 Novietojums 6.8 Sezonalitāte 6.9 Vides pārmaiņas 6.10 Papildkritēriji 6.11 Ligzdošanas ticamība 6.12 Kvadrātu skaits 6.13 Rezultāti 6.14 Uzticamās klātbūtnes vietas", " 6 Novērojumu atlase Šajā nodaļā raksturota novērojumu apkopošana un filtrēšana modelēšanai. 6.1 Datu avoti Dabasdati.lv OZOLS - tikai daļa, bet jāpaņem no Life for Species Aigars Kalvāns DD&amp;Co Jānis Ķuze Latvijas Dabas Fonds Lediņš-Kalvāns-Jakovļevs Edmunds Račinskis Pūču plāna novērojumi Pūču ligzdošanas vietas Plēšputnu monitoringa ziņas LPU 2023. gada dati Vanagu projekta rezultāti Piekrastes putnu monitorings(!) 6.2 Nomenklatūra Vārdnīcas katrai datu kopai 6.3 Atrašanās Latvijā Pret sapludināto 100 m režģi 6.4 Datums un laiks Kopš 2017. gada Ne ilgāku periodu par 1 mēnesi 6.5 Ligzdošanas pazīmes Uz ligzdošanu attiecināmās pazīmes 6.6 Dublieri Ik datubāzē (arī - ja identifikatoram ir mainījie sugas nosaukums) Starp datubāzēm 6.7 Novietojums Saskaņā ar CLC, izslēdzot droši nepiemēroto vidi 6.8 Sezonalitāte Ligzdošanas sezona, izņemot pierādītajām ligzdošanām 6.9 Vides pārmaiņas Analīzes šūnā nevienā periodā kopš novērojuma ne vairāk par 5% (10%?) Ligzdošanas iecirknī ne vairāk par 10% (20%?) 6.10 Papildkritēriji Vismaz ACCGEN - attālums no apdzīvotām vietām 6.11 Ligzdošanas ticamība Ligzdošanas ticamības pakāpju pierēķināšana, lai izvēlētos uzticamākos, bet pietiekoša apjoma datus bez acīmredzamām telpiskajām problēmām 6.12 Kvadrātu skaits Pierēķināšana un vizualizēšana izvērtējumiem kopā ar ligzdošanas ticamības pakāpēm 6.13 Rezultāti Lēmumu pieņemšana par turpmāko modelēšanu un tai izmantojamajiem datiem 6.14 Uzticamās klātbūtnes vietas Failu saglabāšana "],["Chapter7.html", "7 Sugu izplatības (dzīvotņu piemērotības) modeļi 7.1 Sākotnēji izvēlēto pazīmju neatkarība un EGV atlases otrā kārta (VIF) 7.2 Vidi kopumā raksturojoši fona punkti 7.3 Vienkāršots modelis EGV noslēguma atlasei 7.4 Modeļa parametrizācija 7.5 Labākās parametrizācijas izvēle 7.6 Labākā modeļa rezultāti 7.7 Rezultāta uzticamības izvērtējums", " 7 Sugu izplatības (dzīvotņu piemērotības) modeļi All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 7.1 Sākotnēji izvēlēto pazīmju neatkarība un EGV atlases otrā kārta (VIF) VIF analīze un individuāla pārskatīšana vai netrūkst kaut kas sevišķi nozīmīgs 7.2 Vidi kopumā raksturojoši fona punkti Atbilstoši procedūrai. Vismaz 10K 7.3 Vienkāršots modelis EGV noslēguma atlasei LQ un premutation importance 7.4 Modeļa parametrizācija Feature types and algorithms Regularization multipliers Krosvalidācija 7.5 Labākās parametrizācijas izvēle AICc (un AUCtest?) 7.6 Labākā modeļa rezultāti Dažādu failu ģenerēšana un modeļa spājas apraksti 7.7 Rezultāta uzticamības izvērtējums Vizuāls novēr’tejums vai nav pilnīgas muļķības, kuru dēļ nepieciešams atkārtot modelēšanu ar kaut kādām korekcijām "],["Chapter8.html", "8 SDM pēcapstrāde 8.1 Ekoloģiskās nišas dziļumi 8.2 Saistība ar aizsargājamām teritorijām 8.3 Saistība ar aizsardzības režīmiem 8.4 Saistība ar ekosistēmām", " 8 SDM pēcapstrāde All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 8.1 Ekoloģiskās nišas dziļumi a 8.2 Saistība ar aizsargājamām teritorijām b 8.3 Saistība ar aizsardzības režīmiem c 8.4 Saistība ar ekosistēmām d "],["Chapter9.html", "9 Vietu prioritizēšana aizsardzībai 9.1 Ik sugas aizsardzībai prioritārās vietas 9.2 Daudzsugu pieeja dabas aizsardzības plānošanai", " 9 Vietu prioritizēšana aizsardzībai All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 9.1 Ik sugas aizsardzībai prioritārās vietas Vienas sugas zonation 9.2 Daudzsugu pieeja dabas aizsardzības plānošanai Šajā nodaļā demonstrēta izmantotā pieeja 9.2.1 Mežu (putnu) aizsardzībai prioritārās vietas Par mežu putniem, kuri iekļaujami plašākā 9.2.2 Lauku (putnu) aizsardzībai prioritārās vietas Par lauku putniem, kuri iekļaujami plašākā 9.2.3 Mitrāju (putnu) aizsardzībai prioritārās vietas Par mitrāju putniem, kuri iekļaujami plašākā 9.2.4 Ūdeņu (putnu) aizsardzībai prioritārās vietas Par ūdeņu putniem, kuri iekļaujami plašākā 9.2.5 Vietu ar skraju veģetāciju (putnu) aizsardzībai prioritārās vietas Par šo vietu putniem, kuri iekļaujami plašākā 9.2.6 Valstī kopumā Baigi jau nu bezjēdzīgais "],["Chapter10.html", "10 Rezultāti 10.1 Individuālu sugu rezultāti 10.2 Kopējie valsts līmeņa rezultāti", " 10 Rezultāti Šajā nodaļā apkopoti iegūtie sugu izplatības un aizsardzībās, kā arī sugu sabiedrību (ekosistēmu) aizsardzības prioritizēšanas rezultāti, sniedzot piekļuvi tiem, kuri nav ierobežotas pieejamas savas izšķirtspējas dēļ. 10.1 Individuālu sugu rezultāti Apkopotā formā ik sugas rezultāti ar hiperstaitēm lejupielādei ir šajā tabulā (xlsx). 10.1.1 (1) COTCOT - paipala Coturnix coturnix Dzīvotņu piemērotība (GeoTIFF) Modeļa spējas raksturojums neatkarīgos testa datos: pAUC: ; TSS: pie dzīvotņu piemērotības , ar: sensitivitāte: specifiskums: recall: precission: EGV atbildes līknes (png) Modelis (RDS) Ekspektācija sugas klātbūtnei (GeoTIFF) Aizsardzībai prioritārās vietas (GeoTIFF) 10.1.2 (2) PERPER - laukirbe Perdix perdix BONBON - mežirbe Bonasa bonasia TETURO - mednis Tetrao urogallus LYRTET - rubenis Lyrurus tetrix CYGCYG - ziemeļu gulbis Cygnus cygnus ANSANS - meža zoss Anser anser TADTAD - Sāmsalas dižpīle Tadorna tadorna AYTFER - brūnkaklis Aythya ferina AYTFUL - cekulpīle Aythya fuligula SPAQUE - prīkšķe Spatula querquedula SPACLY - platknābis Spatula clypeata MARSTR - pelēkā pīle Mareca strepera MARPEN - baltvēderis Mareca penelope TACRUF - mazais dūkuris Tachybaptus ruficollis PODGRI - pelēkvaigu dūkuris Podiceps grisegena PODCRI - cekuldūkuris Podiceps cristatus STRTUR - parastā ūbele Streptopelia turtur CAPEUR - vakarlēpis Caprimulgus europaeus RALAQU - dumbrcālis Rallus aquaticus CRECRE - grieze Crex crex PORPOR - ormanītis Porzana porzana ZAPPAR - mazais ormanītis Zapornia parva FULATR - laucis Fulica atra GRUGRU - dzērve Grus grus CICNIG - melnais stārķis Ciconia nigra CICCIC - baltais stārķis Ciconia ciconia BOTSTE - lielais dumpis Botaurus stellaris IXOMIN - mazais dumpis Ixobrychus minutus HAEOST - jūrasžagata Haematopus ostralegus PLUAPR - dzeltenais tārtiņš Pluvialis apricaria CHAHIA - smilšu tārtiņš Charadrius hiaticula CHADUB - upes tārtiņš Charadrius dubius VANVAN - ķīvīte Vanellus vanellus NUMPHA - lietuvainis Numenius phaeopus NUMARQ - kuitala Numenius arquata LIMLIM - melnā puskuitala Limosa limosa GALMED - ķikuts Gallinago media GALGAL - mērkaziņa Gallinago gallinago TRINEB - lielā tilbīte Tringa nebularia TRITOT - pļavu tilbīte Tringa totanus TRIGLA - purva tilbīte Tringa glareola GLAPAS - apodziņš Glaucidium passerinum AEGFUN - bikšainais apogs Aegolius funereus ASIOTU - ausainā pūce Asio otus STRALU - meža pūce Strix aluco STRURA - urālpūce Strix uralensis BUBBUB - ūpis Bubo bubo PANHAL - zivjērglis Pandion haliaetus PERAPI - ķīķis Pernis apivorus CLAPOM - mazais ērglis Clanga pomarina CIRAER - niedru lija Circus aeruginosus ACCNIS - zvirbuļvanags Accipiter nisus ACCGEN - vistu vanags Accipiter gentilis HALALB - jūras ērglis Haliaeetus albicilla MILMIL - sarkanā klija Milvus milvus MILMIG - melnā klija Milvus migrans BUTBUT - peļu klijāns Buteo buteo UPUEPO - pupuķis Upupa epops CORGAR - zaļā vārna Coracias garrulus JYNTOR - tītiņš Jynx torquilla PICCAN - pelēkā dzilna Picus canus DRYMAR - melnā dzilna Dryocopus martius PICTRI - trīspirkstu dzenis Picoides tridactylus LEIMED - vidējais dzenis Leiopicus medius DRYMIN - mazais dzenis Dryobates minor DENLEU - baltmugurdzenis Dendrocopos leucotos DENMAJ - dižraibais dzenis Dendrocopos major FALTIN - lauku piekūns Falco tinnunculus FALCOL - purva piekūns Falco columbarius ORIORI - vālodze Oriolus oriolus LANCOL - brūnā čakste Lanius collurio LANEXC - lielā čakste Lanius excubitor NUCCAR - riekstrozis Nucifraga caryocatactes PERATE - meža zīlīte Periparus ater LOPCRI - cekulzīlīte Lophophanes cristatus POEPAL - purva zīlīte Poecile palustris POEMON - pelēkā zīlīte Poecile montanus LULARB - sila cīrulis Lullula arborea ALAARV - lauku cīrulis Alauda arvensis IDUCAL - klusais ķauķis Iduna caligata ACRRIS - purva ķauķis Acrocephalus palustris ACRARU - niedru strazds Acrocephalus arundinaceus LOCFLU - upes ķauķis Locustella fluviatilis LOCNAE - kārklu ķauķis Locustella naevia HIRRUS - bezdelīga Hirundo rustica PHYSIB - svirlītis Phylloscopus sibilatrix AEGCAU - garastīte Aegithalos caudatus CURNIS - svītrainais ķauķis Curruca nisoria CURCOM - brūnspārnu ķauķis Curruca communis CERFAM - mizložņa Certhia familiaris SITEUR - dzilnītis Sitta europaea STUVUL - mājas strazds Sturnus vulgaris TURVIS - sila strazds Turdus viscivorus TURILI - plukšķis Turdus iliacus CYASVE - zilrīklīte Cyanecula svecica LUSLUS - lakstīgala Luscinia luscinia FICPAR - mazais mušķērājs Ficedula parva FICHYP - melnais mušķērājs Ficedula hypoleuca SAXRUB - lukstu čakstīte Saxicola rubetra REGREG - zeltgalvītis Regulus regulus REGIGN - sārtgalvītis Regulus ignicapilla PASMON - lauku zvirbulis Passer montanus ANTPRA - pļavu čipste Anthus pratensis ANTCAM - stepes čipste Anthus campestris MOTFLA - dzeltenā cielava Motacilla flava MOTCIT - citroncielava Motacilla citreola COCCOC - dižknābis Coccothraustes coccothraustes CARERY - mazais svilpis Carpodacus erythrinus PYRPYR - svilpis Pyrrhula pyrrhula CHLCHL - zaļžubīte Chloris chloris LINCAN - kaņepītis Linaria cannabina LOXCUR - egļu krustknābis Loxia curvirostra CARCAR - dadzītis Carduelis carduelis EMBHOR - dārza stērste Emberiza hortulana EMBCIT - dzeltenā stērste Emberiza citrinella 10.2 Kopējie valsts līmeņa rezultāti Veicot daudzsugu zonēšanu plašākai (par individuālām sugām) dabas aizsardzības plānošanai, iegūtie rezultāti ik videi ir pieejami zemāk. Apkopotā formā ar hiperstaitēm lejupielādei tie ir pieejami arī šajā tabulā (xlsx). 10.2.1 Mežu (putnu) aizsardzībai prioritārās vietas Attēls ar vietu nozīmību aizsardzībai un/vai daudzsugu izzušanas līknes līdz ar kopējo vietu nozīmību Aizsardzībai prioritārās vietas (GeoTIFF) Vietu nozīmība aizsardzībai (GeoTIFF) Vietu nozīmība iekļauto sugu populācijām (csv) 10.2.2 Lauku (putnu) aizsardzībai prioritārās vietas Attēls ar vietu nozīmību aizsardzībai un/vai daudzsugu izzušanas līknes līdz ar kopējo vietu nozīmību Aizsardzībai prioritārās vietas (GeoTIFF) Vietu nozīmība aizsardzībai (GeoTIFF) Vietu nozīmība iekļauto sugu populācijām (csv) 10.2.3 Mitrāju (putnu) aizsardzībai prioritārās vietas Attēls ar vietu nozīmību aizsardzībai un/vai daudzsugu izzušanas līknes līdz ar kopējo vietu nozīmību Aizsardzībai prioritārās vietas (GeoTIFF) Vietu nozīmība aizsardzībai (GeoTIFF) Vietu nozīmība iekļauto sugu populācijām (csv) 10.2.4 Ūdeņu (putnu) aizsardzībai prioritārās vietas Attēls ar vietu nozīmību aizsardzībai un/vai daudzsugu izzušanas līknes līdz ar kopējo vietu nozīmību Aizsardzībai prioritārās vietas (GeoTIFF) Vietu nozīmība aizsardzībai (GeoTIFF) Vietu nozīmība iekļauto sugu populācijām (csv) 10.2.5 Vietu ar skraju veģetāciju (putnu) aizsardzībai prioritārās vietas Attēls ar vietu nozīmību aizsardzībai un/vai daudzsugu izzušanas līknes līdz ar kopējo vietu nozīmību Aizsardzībai prioritārās vietas (GeoTIFF) Vietu nozīmība aizsardzībai (GeoTIFF) Vietu nozīmība iekļauto sugu populācijām (csv) "],["references.html", "References", " References "],["hello-bookdown.html", "11 Hello bookdown 11.1 A section", " 11 Hello bookdown All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 11.1 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. "],["cross.html", "12 Cross-references 12.1 Chapters and sub-chapters 12.2 Captioned figures and tables", " 12 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 12.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 12. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 12.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 12.1. Code par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 12.1: Here is a nice figure! Don’t miss Table 12.1. Code knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 12.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "13 Parts", " 13 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "14 Footnotes and citations 14.1 Footnotes 14.2 Citations", " 14 Footnotes and citations 14.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 14.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie, 2024) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie, 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References Xie, Y., 2024. Bookdown: Authoring books and technical documents with r markdown. Xie, Y., 2015. Dynamic documents with R and knitr, 2nd ed. Chapman; Hall/CRC, Boca Raton, Florida. This is a footnote.↩︎ "],["blocks.html", "15 Blocks 15.1 Equations 15.2 Theorems and proofs 15.3 Callout blocks", " 15 Blocks 15.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{15.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (15.1). 15.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 15.1. Theorem 15.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 15.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "16 Sharing your book 16.1 Publishing 16.2 404 pages 16.3 Metadata for sharing", " 16 Sharing your book 16.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 16.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 16.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: Code ?bookdown::gitbook "],["references-1.html", "References", " References Auniņš, A. (red.), 2013. Eiropas savienības aizsargājamie biotopi latvijā. Noteikšanas rokasgrāmata. 2. Precizēts izdevums. Latvijas Dabas fonds, Vides aizsardzības un reģionālās attīstības ministrija, Rīga, Latvija. Auniņš, A., Mārdega, I., 2020. Dienas putnu fona monitorings. Gala atskaite par 2020. gadu. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Avotins, A., Avotins, A., Ķerus, V., Auniņš, A., 2023. Numerical response of owls to the dampening of small mammal population cycles in Latvia, Life. https://doi.org/10.3390/life13020572 Avotiņš, A., 2019a. Apodziņa Glaucidium passerinum, bikšainā apoga Aegolius funereus, meža pūces Strix aluco, urālpūces Strix uralensis, ausainās pūces Asio otus un ūpja Bubo bubo aizsardzības plāns. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Avotiņš, A., 2019b. Aizsargājamās dabas teritorijas, mežsaimniecības aprobežojumi un Aichi biodaudzveidības mērķi mežos: Trūkumi dabas teritorijās un iespējas valsts līmeņa plānošanā ar dzīvotņu piemērotības modelēšanu, LU 77th International scientific conference. Avotiņš, A., Auniņš, A., Stīpniece, A., Ķerus, V., 2024. Little and a lot of data, both with their own challenges: Approaches used for the red listing of birds in latvia, in: Butkauskas, D., Čekstere-Muižniece, G., Degtjarenko, P., Jankevica, L., Jansson, N., Ķerus, V., Pilāts, V., Telnov, D. (Eds.), Safeguarding Biodiversity: Red Lists and Beyond. Institute of Biology, Faculty of Medicine; Life Sciences, University of Latvia, p. 14. Bergmanis, M., Priednieks, J., Avotiņš, A., Priedniece, I., 2021. Mazā dzeņa Dryobates minor, vidējā dzeņa Leiopicus medius, baltmugurdzeņa Dendrocopos leucotos, dižraibā dzeņa Dendrocopos major, trīspirkstu dzeņa Picoides tridactylus, melnās dzilnas Dryocopus martius un pelēkās dzilnas Picus canus aizsardzības plāns. Latvijas Ornitoloģijas biedrība, Rīga, Latvija. Brown, C.F., Brumby, S.P., Guzder-Williams, B., Birch, T., Hyde, S.B., Mazzariello, J., Czerwinski, W., Pasquarella, V.J., Haertel, R., Ilyushchenko, S., Schwehr, K., Weisse, M., Stolle, F., Hanson, C., Guinan, O., Moore, R., Tait, A.M., 2022. Dynamic World, Near real-time global 10 m land use land cover mapping, Scientific Data. https://doi.org/10.1038/s41597-022-01307-4 Celmiņš, A., 2024. Putni.lv. Cramp, S., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hollom, P.A.D., Nicholson, E.M., Ogilvie, M.A., Roselaar, C.S., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1992. Handbook of the birds of Europe, the Middle East and North Africa: Volume 6 - Warblers. Oxford University Press, Hong Kong. Cramp, S., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hollom, P.A.D., Nicholson, E.M., Ogilvie, M.A., Roselaar, C.S., Sellar, P.J., Simmons, K.E.L., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1988. Handbook of the birds of Europe, the Middle East and North Africa: Volume 5 - Tyrant Flycatchers to Thrushes. Oxford University Press, Hong Kong. Cramp, S., Brooks, D.J., Dunn, E., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Roselaar, C.S., Simmons, K.E.L., Voous, K.H., Wallace, D.I.M., Wattel, J., Wilson, M.G., 1994a. Handbook of the birds of Europe, the Middle East and North Africa: Volume 4 - Terns to Woodpeckers. Oxford University Press, Hong Kong. Cramp, S., Perrins, C.M., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hillcoat, B., Hollom, P.A.D., Nicholson, E.M., Roselaar, C.S., Seale, W.T.C., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1994b. Handbook of the birds of Europe, the Middle East and North Africa: Volume 8 - Crows to Finches. Oxford University Press, Hong Kong. Cramp, S., Perrins, C.M., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hillcoat, B., Hollom, P.A.D., Nicholson, E.M., Roselaar, C.S., Seale, W.T.C., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1994c. Handbook of the birds of Europe, the Middle East and North Africa: Volume 9 - Buntings to New World Warblers. Oxford University Press, Hong Kong. Cramp, S., Perrins, C.M., Brooks, D.J., Dunn, E., Gillmor, R., Hall-Craggs, J., Hillcoat, B., Hollom, P.A.D., Nicholson, E.M., Roselaar, C.S., Seale, W.T.C., Sellar, P.J., Simmons, K.E.L., Snow, D.W., Vincent, D., Voous, K.H., Wallace, D.I.M., Wilson, M.G., 1993. Handbook of the birds of Europe, the Middle East and North Africa: Volume 7 - Flycatchers to Shrikes. Oxford University Press, Hong Kong. Cramp, S., Simmons, K.E.L., Brooks, D.J., Collar, N.J., Dunn, E., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Roselaar, C.S., Voous, K.H., Wallace, D.I.M., Wattel, J., Wilson, M.G., 1990. Handbook of the birds of Europe, the Middle East and North Africa: Volume 3 - Waders to Gulls. Oxford University Press, Hong Kong. Cramp, S., Simmons, K.E.L., Ferguson-Lees, I.J., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Voous, K.H., Wattel, J., 1994d. Handbook of the birds of Europe, the Middle East and North Africa: Volume 1 - Ostrich to Ducks. Oxford University Press, New York, United States. Cramp, S., Simmons, K.E.L., Gillmor, R., Hollom, P.A.D., Hudson, R., Nicholson, E.M., Ogilvie, M.A., Olney, P.J.S., Roselaar, P.S., Voous, K.H., Wallace, D.I.M., Wattel, J., 1982. Handbook of the birds of Europe, the Middle East and North Africa: Volume 2 - Hawks to Bustards. Oxford University Press, Hong Kong. Ghassemi, B., Izquierdo-Verdiguier, E., Verhegghen, A., Yordanov, M., Lemoine, G., Martínez, Á.M., Marchi, D.D., Velde, M. van der, Vuolo, F., d’Andrimont, R., 2024. European Union crop map 2022: Earth observation’s 10-meter dive into Europe’s crop tapestry, Scientific Data. https://doi.org/10.1038/s41597-024-03884-y Gorelick, N., Hancher, M., Dixon, M., Ilyushchenko, S., Thau, D., Moore, R., 2017. Google Earth Engine: Planetary-scale geospatial analysis for everyone, Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2017.06.031 Hansen, M.C., Potapov, P.V., Moore, R., Hancher, M., Turubanova, S.A., Tyukavina, A., Thau, D., Stehman, S.V., Goetz, S.J., Loveland, T.R., Kommareddy, A., Egorov, A., Chini, L., Justice, C.O., Townshend, J.R.G., 2013. High-resolution Global maps of 21st-century forest cover change, Science. https://doi.org/10.1126/science.1244693 Lārmanis, V. (red.), 2013. Bioloģiski vērtīgo zālāju kartēšanas metodika. Dabas aizsardzības pārvalde, Sigulda, Latvija. Lipsbergs, J., 2011. Kas notiek ar ūpi Latvijā, Putni Dabā. LU, 2024. Threatened species in latvia: Improved knowledge, capacity, data and awareness (LIFE FOR SPECIES, LIFE19 GIE/LV/000857). Meller, K., Björklund, H., Saurola, P., Valkama, J., 2017. Petolintuvuosi 2016, pesimistulokset ja kannankehitykset, Linnut-vuosikirja 2016. Mirmazloumi, S.M., Kakooei, M., Mohseni, F., Ghorbanian, A., Amani, M., Crosetto, M., Monserrat, O., 2022. ELULC-10, a 10 m European land use and land cover map using Sentinel and Landsat data in Google Earth Engine, Remote Sensing. https://doi.org/10.3390/rs14133041 Sabater, J.M., n.d. ERA5-Land hourly data from 1950 to present. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). https://doi.org/10.24381/cds.e2161bac Shimada, M., Itoh, T., Motooka, T., Watanabe, M., Shiraishi, T., Thapa, R., Lucas, R., 2013. New global forest/non-forest maps from ALOS PALSAR data (2007–2010), Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2014.04.014 Venter, Z.S., Barton, D.N., Chakraborty, T., Simensen, T., Singh, G., 2022. Global 10 m Land Use Land Cover datasets: A comparison of Dynamic World, World Cover and Esri Land Cover, Remote Sensing. https://doi.org/10.3390/rs14164101 Wang, L., Liu, H., 2006. An efficient method for identifying and filling surface depressions in digital elevation models for hydrologic analysis and modelling, International Journal of Geographical Information Science. https://doi.org/10.1080/13658810500433453 Xie, Y., 2024. Bookdown: Authoring books and technical documents with r markdown. Xie, Y., 2015. Dynamic documents with R and knitr, 2nd ed. Chapman; Hall/CRC, Boca Raton, Florida. Xu, P., Tsendbazar, N.-E., Herold, M., Bruin, S. de, Koopmans, M., Birch, T., Carter, S., Fritz, S., Lesiv, M., Mazur, E., Pickens, A., Potapov, P., Stolle, F., Tyukavina, A., Kerchove, R.V.D., Zanaga, D., 2024. Comparative validation of recent 10 m-resolution global land cover maps, Remote Sensing of Environment. https://doi.org/10.1016/j.rse.2024.114316 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
